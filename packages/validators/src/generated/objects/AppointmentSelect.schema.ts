/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { UserDefaultArgsObjectSchema } from './UserDefaultArgs.schema';
import { OrganizationDefaultArgsObjectSchema } from './OrganizationDefaultArgs.schema';
import { AppointmentDefaultArgsObjectSchema } from './AppointmentDefaultArgs.schema';
import { AppointmentCidInputSchema } from '../input/AppointmentCidInput.schema';
import { AllergiesInputSchema } from '../input/AllergiesInput.schema';
import { MedicationsInputSchema } from '../input/MedicationsInput.schema';
import { ComorbiditiesInputSchema } from '../input/ComorbiditiesInput.schema';
import { PatientDefaultArgsObjectSchema } from './PatientDefaultArgs.schema';
import { EventCalendarDefaultArgsObjectSchema } from './EventCalendarDefaultArgs.schema';
import { AppointmentCountOutputTypeDefaultArgsObjectSchema } from './AppointmentCountOutputTypeDefaultArgs.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.AppointmentSelect>;
export const AppointmentSelectObjectSchema: SchemaType = z.object({
    id: z.boolean().optional().optional(), type: z.boolean().optional().optional(), createdAt: z.boolean().optional().optional(), createdById: z.boolean().optional().optional(), createdByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), updatedAt: z.boolean().optional().optional(), updatedById: z.boolean().optional().optional(), updatedByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), deletedAt: z.boolean().optional().optional(), deletedById: z.boolean().optional().optional(), deletedByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), deleted: z.boolean().optional().optional(), organizationId: z.boolean().optional().optional(), organization: z.union([z.boolean(),
    z.lazy(() => OrganizationDefaultArgsObjectSchema)]).optional(), motive: z.boolean().optional().optional(), subjective: z.boolean().optional().optional(), objective: z.boolean().optional().optional(), evaluation: z.boolean().optional().optional(), plan: z.boolean().optional().optional(), startDate: z.boolean().optional().optional(), endDate: z.boolean().optional().optional(), sickNoteDays: z.boolean().optional().optional(), category: z.boolean().optional().optional(), status: z.boolean().optional().optional(), followUpId: z.boolean().optional().optional(), followUp: z.union([z.boolean(),
    z.lazy(() => AppointmentDefaultArgsObjectSchema)]).optional(), predecessorFollowUp: z.union([z.boolean(),
    z.lazy(() => AppointmentDefaultArgsObjectSchema)]).optional(), cids: z.union([z.boolean(),
    z.lazy(() => AppointmentCidInputSchema.findMany)]).optional(), allergies: z.union([z.boolean(),
    z.lazy(() => AllergiesInputSchema.findMany)]).optional(), medications: z.union([z.boolean(),
    z.lazy(() => MedicationsInputSchema.findMany)]).optional(), comorbidities: z.union([z.boolean(),
    z.lazy(() => ComorbiditiesInputSchema.findMany)]).optional(), patientId: z.boolean().optional().optional(), patient: z.union([z.boolean(),
    z.lazy(() => PatientDefaultArgsObjectSchema)]).optional(), eventCalendar: z.union([z.boolean(),
    z.lazy(() => EventCalendarDefaultArgsObjectSchema)]).optional(), _count: z.union([z.boolean(),
    z.lazy(() => AppointmentCountOutputTypeDefaultArgsObjectSchema)]).optional()
}).strict() as SchemaType;
