/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { ExamResultsCreateWithoutPatientInputObjectSchema } from './ExamResultsCreateWithoutPatientInput.schema';
import { ExamResultsUncheckedCreateWithoutPatientInputObjectSchema } from './ExamResultsUncheckedCreateWithoutPatientInput.schema';
import { ExamResultsCreateOrConnectWithoutPatientInputObjectSchema } from './ExamResultsCreateOrConnectWithoutPatientInput.schema';
import { ExamResultsUpsertWithWhereUniqueWithoutPatientInputObjectSchema } from './ExamResultsUpsertWithWhereUniqueWithoutPatientInput.schema';
import { ExamResultsCreateManyPatientInputEnvelopeObjectSchema } from './ExamResultsCreateManyPatientInputEnvelope.schema';
import { ExamResultsWhereUniqueInputObjectSchema } from './ExamResultsWhereUniqueInput.schema';
import { ExamResultsUpdateWithWhereUniqueWithoutPatientInputObjectSchema } from './ExamResultsUpdateWithWhereUniqueWithoutPatientInput.schema';
import { ExamResultsUpdateManyWithWhereWithoutPatientInputObjectSchema } from './ExamResultsUpdateManyWithWhereWithoutPatientInput.schema';
import { ExamResultsScalarWhereInputObjectSchema } from './ExamResultsScalarWhereInput.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.ExamResultsUpdateManyWithoutPatientNestedInput>;
export const ExamResultsUpdateManyWithoutPatientNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => ExamResultsCreateWithoutPatientInputObjectSchema), z.lazy(() => ExamResultsCreateWithoutPatientInputObjectSchema).array(), z.lazy(() => ExamResultsUncheckedCreateWithoutPatientInputObjectSchema), z.lazy(() => ExamResultsUncheckedCreateWithoutPatientInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => ExamResultsCreateOrConnectWithoutPatientInputObjectSchema),
    z.lazy(() => ExamResultsCreateOrConnectWithoutPatientInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => ExamResultsUpsertWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => ExamResultsUpsertWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), createMany: z.lazy(() => ExamResultsCreateManyPatientInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => ExamResultsUpdateWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => ExamResultsUpdateWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => ExamResultsUpdateManyWithWhereWithoutPatientInputObjectSchema),
    z.lazy(() => ExamResultsUpdateManyWithWhereWithoutPatientInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => ExamResultsScalarWhereInputObjectSchema),
    z.lazy(() => ExamResultsScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
