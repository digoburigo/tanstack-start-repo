/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SexSchema } from '../enums/Sex.schema';
import { RaceSchema } from '../enums/Race.schema';
import { CivilStatusSchema } from '../enums/CivilStatus.schema';
import { BloodTypeSchema } from '../enums/BloodType.schema';
import { GenderIdentitySchema } from '../enums/GenderIdentity.schema';
import { AppointmentUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './AppointmentUncheckedCreateNestedManyWithoutPatientInput.schema';
import { VaccinationsUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './VaccinationsUncheckedCreateNestedManyWithoutPatientInput.schema';
import { AllergiesUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './AllergiesUncheckedCreateNestedManyWithoutPatientInput.schema';
import { MedicationsUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './MedicationsUncheckedCreateNestedManyWithoutPatientInput.schema';
import { ExamResultsUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './ExamResultsUncheckedCreateNestedManyWithoutPatientInput.schema';
import { ComorbiditiesUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput.schema';
import { SurgeriesUncheckedCreateNestedManyWithoutPatientInputObjectSchema } from './SurgeriesUncheckedCreateNestedManyWithoutPatientInput.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.PatientUncheckedCreateWithoutHealthPlansInput>;
export const PatientUncheckedCreateWithoutHealthPlansInputObjectSchema: SchemaType = z.object({
    id: z.string().optional().optional(), createdAt: z.union([z.date().optional(), z.string().datetime().optional()]).optional(), createdById: z.union([z.string(),
    z.null()]).optional().nullable(), updatedAt: z.union([z.date().optional(), z.string().datetime().optional()]).optional(), updatedById: z.union([z.string(),
    z.null()]).optional().nullable(), deletedAt: z.union([z.union([z.date(), z.string().datetime().optional()]),
    z.null()]).optional().nullable(), deletedById: z.union([z.string(),
    z.null()]).optional().nullable(), deleted: z.boolean().optional().optional(), organizationId: z.union([z.string(),
    z.null()]).optional().nullable(), name: z.string(), cpf: z.string(), cellphone: z.string(), email: z.string(), sex: z.union([z.lazy(() => SexSchema),
    z.null()]).optional().nullable(), responsible: z.union([z.string(),
    z.null()]).optional().nullable(), nationality: z.string(), race: z.union([z.lazy(() => RaceSchema),
    z.null()]).optional().nullable(), state: z.string(), city: z.string(), zipcode: z.string(), neighborhood: z.string(), street: z.string(), number: z.string(), complement: z.union([z.string(),
    z.null()]).optional().nullable(), occupation: z.string(), sexualOrientation: z.union([z.string(),
    z.null()]).optional().nullable(), civilStatus: z.union([z.lazy(() => CivilStatusSchema),
    z.null()]).optional().nullable(), bloodType: z.union([z.lazy(() => BloodTypeSchema),
    z.null()]).optional().nullable(), genderIdentity: z.union([z.lazy(() => GenderIdentitySchema),
    z.null()]).optional().nullable(), password: z.union([z.string(),
    z.null()]).optional().nullable(), userId: z.union([z.string(),
    z.null()]).optional().nullable(), appointments: z.lazy(() => AppointmentUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional(), vaccinations: z.lazy(() => VaccinationsUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional(), allergies: z.lazy(() => AllergiesUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional(), medications: z.lazy(() => MedicationsUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional(), examResults: z.lazy(() => ExamResultsUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional(), comorbidities: z.lazy(() => ComorbiditiesUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional(), surgeries: z.lazy(() => SurgeriesUncheckedCreateNestedManyWithoutPatientInputObjectSchema).optional().optional()
}).strict() as SchemaType;
