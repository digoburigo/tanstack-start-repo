/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { ComorbiditiesCreateWithoutPatientInputObjectSchema } from './ComorbiditiesCreateWithoutPatientInput.schema';
import { ComorbiditiesUncheckedCreateWithoutPatientInputObjectSchema } from './ComorbiditiesUncheckedCreateWithoutPatientInput.schema';
import { ComorbiditiesCreateOrConnectWithoutPatientInputObjectSchema } from './ComorbiditiesCreateOrConnectWithoutPatientInput.schema';
import { ComorbiditiesUpsertWithWhereUniqueWithoutPatientInputObjectSchema } from './ComorbiditiesUpsertWithWhereUniqueWithoutPatientInput.schema';
import { ComorbiditiesCreateManyPatientInputEnvelopeObjectSchema } from './ComorbiditiesCreateManyPatientInputEnvelope.schema';
import { ComorbiditiesWhereUniqueInputObjectSchema } from './ComorbiditiesWhereUniqueInput.schema';
import { ComorbiditiesUpdateWithWhereUniqueWithoutPatientInputObjectSchema } from './ComorbiditiesUpdateWithWhereUniqueWithoutPatientInput.schema';
import { ComorbiditiesUpdateManyWithWhereWithoutPatientInputObjectSchema } from './ComorbiditiesUpdateManyWithWhereWithoutPatientInput.schema';
import { ComorbiditiesScalarWhereInputObjectSchema } from './ComorbiditiesScalarWhereInput.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput>;
export const ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => ComorbiditiesCreateWithoutPatientInputObjectSchema), z.lazy(() => ComorbiditiesCreateWithoutPatientInputObjectSchema).array(), z.lazy(() => ComorbiditiesUncheckedCreateWithoutPatientInputObjectSchema), z.lazy(() => ComorbiditiesUncheckedCreateWithoutPatientInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => ComorbiditiesCreateOrConnectWithoutPatientInputObjectSchema),
    z.lazy(() => ComorbiditiesCreateOrConnectWithoutPatientInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => ComorbiditiesUpsertWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => ComorbiditiesUpsertWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), createMany: z.lazy(() => ComorbiditiesCreateManyPatientInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema),
    z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema),
    z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema),
    z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema),
    z.lazy(() => ComorbiditiesWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => ComorbiditiesUpdateWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => ComorbiditiesUpdateWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => ComorbiditiesUpdateManyWithWhereWithoutPatientInputObjectSchema),
    z.lazy(() => ComorbiditiesUpdateManyWithWhereWithoutPatientInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => ComorbiditiesScalarWhereInputObjectSchema),
    z.lazy(() => ComorbiditiesScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
