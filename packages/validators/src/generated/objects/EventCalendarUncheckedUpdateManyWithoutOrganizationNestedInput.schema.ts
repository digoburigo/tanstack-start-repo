/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { EventCalendarCreateWithoutOrganizationInputObjectSchema } from './EventCalendarCreateWithoutOrganizationInput.schema';
import { EventCalendarUncheckedCreateWithoutOrganizationInputObjectSchema } from './EventCalendarUncheckedCreateWithoutOrganizationInput.schema';
import { EventCalendarCreateOrConnectWithoutOrganizationInputObjectSchema } from './EventCalendarCreateOrConnectWithoutOrganizationInput.schema';
import { EventCalendarUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema } from './EventCalendarUpsertWithWhereUniqueWithoutOrganizationInput.schema';
import { EventCalendarCreateManyOrganizationInputEnvelopeObjectSchema } from './EventCalendarCreateManyOrganizationInputEnvelope.schema';
import { EventCalendarWhereUniqueInputObjectSchema } from './EventCalendarWhereUniqueInput.schema';
import { EventCalendarUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema } from './EventCalendarUpdateWithWhereUniqueWithoutOrganizationInput.schema';
import { EventCalendarUpdateManyWithWhereWithoutOrganizationInputObjectSchema } from './EventCalendarUpdateManyWithWhereWithoutOrganizationInput.schema';
import { EventCalendarScalarWhereInputObjectSchema } from './EventCalendarScalarWhereInput.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.EventCalendarUncheckedUpdateManyWithoutOrganizationNestedInput>;
export const EventCalendarUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => EventCalendarCreateWithoutOrganizationInputObjectSchema), z.lazy(() => EventCalendarCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => EventCalendarUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => EventCalendarUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => EventCalendarCreateOrConnectWithoutOrganizationInputObjectSchema),
    z.lazy(() => EventCalendarCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => EventCalendarUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => EventCalendarUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), createMany: z.lazy(() => EventCalendarCreateManyOrganizationInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => EventCalendarWhereUniqueInputObjectSchema),
    z.lazy(() => EventCalendarWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => EventCalendarWhereUniqueInputObjectSchema),
    z.lazy(() => EventCalendarWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => EventCalendarWhereUniqueInputObjectSchema),
    z.lazy(() => EventCalendarWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => EventCalendarWhereUniqueInputObjectSchema),
    z.lazy(() => EventCalendarWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => EventCalendarUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => EventCalendarUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => EventCalendarUpdateManyWithWhereWithoutOrganizationInputObjectSchema),
    z.lazy(() => EventCalendarUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => EventCalendarScalarWhereInputObjectSchema),
    z.lazy(() => EventCalendarScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
