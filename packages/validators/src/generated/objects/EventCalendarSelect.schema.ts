/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { UserDefaultArgsObjectSchema } from './UserDefaultArgs.schema';
import { OrganizationDefaultArgsObjectSchema } from './OrganizationDefaultArgs.schema';
import { AppointmentDefaultArgsObjectSchema } from './AppointmentDefaultArgs.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.EventCalendarSelect>;
export const EventCalendarSelectObjectSchema: SchemaType = z.object({
    id: z.boolean().optional().optional(), type: z.boolean().optional().optional(), createdAt: z.boolean().optional().optional(), createdById: z.boolean().optional().optional(), createdByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), updatedAt: z.boolean().optional().optional(), updatedById: z.boolean().optional().optional(), updatedByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), deletedAt: z.boolean().optional().optional(), deletedById: z.boolean().optional().optional(), deletedByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), deleted: z.boolean().optional().optional(), organizationId: z.boolean().optional().optional(), organization: z.union([z.boolean(),
    z.lazy(() => OrganizationDefaultArgsObjectSchema)]).optional(), title: z.boolean().optional().optional(), description: z.boolean().optional().optional(), start: z.boolean().optional().optional(), end: z.boolean().optional().optional(), allDay: z.boolean().optional().optional(), eventType: z.boolean().optional().optional(), rrule: z.boolean().optional().optional(), appointmentId: z.boolean().optional().optional(), appointment: z.union([z.boolean(),
    z.lazy(() => AppointmentDefaultArgsObjectSchema)]).optional()
}).strict() as SchemaType;
