/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SortOrderSchema } from '../enums/SortOrder.schema';
import { SortOrderInputObjectSchema } from './SortOrderInput.schema';
import { UserOrderByWithRelationInputObjectSchema } from './UserOrderByWithRelationInput.schema';
import { OrganizationOrderByWithRelationInputObjectSchema } from './OrganizationOrderByWithRelationInput.schema';
import { AppointmentOrderByRelationAggregateInputObjectSchema } from './AppointmentOrderByRelationAggregateInput.schema';
import { VaccinationsOrderByRelationAggregateInputObjectSchema } from './VaccinationsOrderByRelationAggregateInput.schema';
import { AllergiesOrderByRelationAggregateInputObjectSchema } from './AllergiesOrderByRelationAggregateInput.schema';
import { MedicationsOrderByRelationAggregateInputObjectSchema } from './MedicationsOrderByRelationAggregateInput.schema';
import { ExamResultsOrderByRelationAggregateInputObjectSchema } from './ExamResultsOrderByRelationAggregateInput.schema';
import { ComorbiditiesOrderByRelationAggregateInputObjectSchema } from './ComorbiditiesOrderByRelationAggregateInput.schema';
import { SurgeriesOrderByRelationAggregateInputObjectSchema } from './SurgeriesOrderByRelationAggregateInput.schema';
import { HealthPlansOrderByRelationAggregateInputObjectSchema } from './HealthPlansOrderByRelationAggregateInput.schema';

import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

type SchemaType = z.ZodType<Prisma.PatientOrderByWithRelationInput>;
export const PatientOrderByWithRelationInputObjectSchema: SchemaType = z.object({
    id: z.lazy(() => SortOrderSchema).optional().optional(), type: z.lazy(() => SortOrderSchema).optional().optional(), createdAt: z.lazy(() => SortOrderSchema).optional().optional(), createdById: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), updatedAt: z.lazy(() => SortOrderSchema).optional().optional(), updatedById: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), deletedAt: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), deletedById: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), deleted: z.lazy(() => SortOrderSchema).optional().optional(), organizationId: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), name: z.lazy(() => SortOrderSchema).optional().optional(), cpf: z.lazy(() => SortOrderSchema).optional().optional(), cellphone: z.lazy(() => SortOrderSchema).optional().optional(), email: z.lazy(() => SortOrderSchema).optional().optional(), sex: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), responsible: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), nationality: z.lazy(() => SortOrderSchema).optional().optional(), race: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), state: z.lazy(() => SortOrderSchema).optional().optional(), city: z.lazy(() => SortOrderSchema).optional().optional(), zipcode: z.lazy(() => SortOrderSchema).optional().optional(), neighborhood: z.lazy(() => SortOrderSchema).optional().optional(), street: z.lazy(() => SortOrderSchema).optional().optional(), number: z.lazy(() => SortOrderSchema).optional().optional(), complement: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), occupation: z.lazy(() => SortOrderSchema).optional().optional(), sexualOrientation: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), civilStatus: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), bloodType: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), genderIdentity: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), password: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), userId: z.union([z.lazy(() => SortOrderSchema),
    z.lazy(() => SortOrderInputObjectSchema)]).optional(), createdByUser: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional().optional(), updatedByUser: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional().optional(), deletedByUser: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional().optional(), organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional().optional(), user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional().optional(), appointments: z.lazy(() => AppointmentOrderByRelationAggregateInputObjectSchema).optional().optional(), vaccinations: z.lazy(() => VaccinationsOrderByRelationAggregateInputObjectSchema).optional().optional(), allergies: z.lazy(() => AllergiesOrderByRelationAggregateInputObjectSchema).optional().optional(), medications: z.lazy(() => MedicationsOrderByRelationAggregateInputObjectSchema).optional().optional(), examResults: z.lazy(() => ExamResultsOrderByRelationAggregateInputObjectSchema).optional().optional(), comorbidities: z.lazy(() => ComorbiditiesOrderByRelationAggregateInputObjectSchema).optional().optional(), surgeries: z.lazy(() => SurgeriesOrderByRelationAggregateInputObjectSchema).optional().optional(), healthPlans: z.lazy(() => HealthPlansOrderByRelationAggregateInputObjectSchema).optional().optional()
}).strict() as SchemaType;
