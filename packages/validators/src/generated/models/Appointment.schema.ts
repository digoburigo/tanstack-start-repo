/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { AppointmentCategorySchema } from '../enums/AppointmentCategory.schema';
import { AppointmentStatusSchema } from '../enums/AppointmentStatus.schema';
const baseSchema = z.object({
    id: z.string(),
    type: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    deletedAt: z.coerce.date().nullish(),
    deleted: z.boolean().default(false),
    motive: z.string(),
    subjective: z.string(),
    objective: z.string(),
    evaluation: z.string(),
    plan: z.string(),
    startDate: z.coerce.date().nullish(),
    endDate: z.coerce.date().nullish(),
    sickNoteDays: z.number().nullish(),
    category: AppointmentCategorySchema.nullish(),
    status: AppointmentStatusSchema.nullish(),
}
).strict();
const relationSchema = z.object({
    createdByUser: z.record(z.unknown()).optional(),
    updatedByUser: z.record(z.unknown()).optional(),
    deletedByUser: z.record(z.unknown()).optional(),
    organization: z.record(z.unknown()).optional(),
    followUp: z.record(z.unknown()).optional(),
    predecessorFollowUp: z.record(z.unknown()).optional(),
    cids: z.array(z.unknown()).optional(),
    allergies: z.array(z.unknown()).optional(),
    medications: z.array(z.unknown()).optional(),
    comorbidities: z.array(z.unknown()).optional(),
    patient: z.record(z.unknown()),
    eventCalendar: z.record(z.unknown()).optional(),
}
);
const fkSchema = z.object({
    createdById: z.string().nullish(),
    updatedById: z.string().nullish(),
    deletedById: z.string().nullish(),
    organizationId: z.string().nullish(),
    followUpId: z.string().nullish(),
    patientId: z.string(),
}
);

/**
 * `Appointment` schema excluding foreign keys and relations.
 */
export const AppointmentScalarSchema = baseSchema.omit({
    deleted: true,
});


/**
 * `Appointment` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const AppointmentSchema = AppointmentScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const AppointmentPrismaCreateSchema = baseSchema.omit({ type: true }).partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const AppointmentPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    deletedAt: z.coerce.date().nullish(),
    deleted: z.boolean().default(false),
    motive: z.string(),
    subjective: z.string(),
    objective: z.string(),
    evaluation: z.string(),
    plan: z.string(),
    startDate: z.coerce.date().nullish(),
    endDate: z.coerce.date().nullish(),
    sickNoteDays: z.union([z.number().nullish(), z.record(z.unknown())]),
    category: AppointmentCategorySchema.nullish(),
    status: AppointmentStatusSchema.nullish()
}).partial().passthrough();


/**
 * `Appointment` schema for create operations excluding foreign keys and relations.
 */
export const AppointmentCreateScalarSchema = baseSchema.omit({ type: true }).partial({
    id: true, createdAt: true, updatedAt: true, deleted: true
});


/**
 * `Appointment` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const AppointmentCreateSchema = AppointmentCreateScalarSchema.merge(fkSchema);


/**
 * `Appointment` schema for update operations excluding foreign keys and relations.
 */
export const AppointmentUpdateScalarSchema = baseSchema.omit({ type: true }).partial();


/**
 * `Appointment` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const AppointmentUpdateSchema = AppointmentUpdateScalarSchema.merge(fkSchema.partial());

