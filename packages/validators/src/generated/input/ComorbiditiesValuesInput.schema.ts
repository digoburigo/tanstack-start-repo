/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

;
import { ComorbiditiesValuesSelectObjectSchema } from '../objects/ComorbiditiesValuesSelect.schema';
import { ComorbiditiesValuesIncludeObjectSchema } from '../objects/ComorbiditiesValuesInclude.schema';
import { ComorbiditiesValuesWhereUniqueInputObjectSchema } from '../objects/ComorbiditiesValuesWhereUniqueInput.schema';
import { ComorbiditiesValuesWhereInputObjectSchema } from '../objects/ComorbiditiesValuesWhereInput.schema';
import { ComorbiditiesValuesOrderByWithRelationInputObjectSchema } from '../objects/ComorbiditiesValuesOrderByWithRelationInput.schema';
import { ComorbiditiesValuesScalarFieldEnumSchema } from '../enums/ComorbiditiesValuesScalarFieldEnum.schema';
import { ComorbiditiesValuesCreateInputObjectSchema } from '../objects/ComorbiditiesValuesCreateInput.schema';
import { ComorbiditiesValuesUncheckedCreateInputObjectSchema } from '../objects/ComorbiditiesValuesUncheckedCreateInput.schema';
import { ComorbiditiesValuesCreateManyInputObjectSchema } from '../objects/ComorbiditiesValuesCreateManyInput.schema';
import { ComorbiditiesValuesUpdateInputObjectSchema } from '../objects/ComorbiditiesValuesUpdateInput.schema';
import { ComorbiditiesValuesUncheckedUpdateInputObjectSchema } from '../objects/ComorbiditiesValuesUncheckedUpdateInput.schema';
import { ComorbiditiesValuesUpdateManyMutationInputObjectSchema } from '../objects/ComorbiditiesValuesUpdateManyMutationInput.schema';
import { ComorbiditiesValuesUncheckedUpdateManyInputObjectSchema } from '../objects/ComorbiditiesValuesUncheckedUpdateManyInput.schema';
import { ComorbiditiesValuesCountAggregateInputObjectSchema } from '../objects/ComorbiditiesValuesCountAggregateInput.schema';
import { ComorbiditiesValuesMinAggregateInputObjectSchema } from '../objects/ComorbiditiesValuesMinAggregateInput.schema';
import { ComorbiditiesValuesMaxAggregateInputObjectSchema } from '../objects/ComorbiditiesValuesMaxAggregateInput.schema';
import { ComorbiditiesValuesOrderByWithAggregationInputObjectSchema } from '../objects/ComorbiditiesValuesOrderByWithAggregationInput.schema';
import { ComorbiditiesValuesScalarWhereWithAggregatesInputObjectSchema } from '../objects/ComorbiditiesValuesScalarWhereWithAggregatesInput.schema'

type ComorbiditiesValuesInputSchemaType = {
    findUnique: z.ZodType<Prisma.ComorbiditiesValuesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.ComorbiditiesValuesFindFirstArgs>,
    findMany: z.ZodType<Prisma.ComorbiditiesValuesFindManyArgs>,
    create: z.ZodType<Prisma.ComorbiditiesValuesCreateArgs>,
    createMany: z.ZodType<Prisma.ComorbiditiesValuesCreateManyArgs>,
    delete: z.ZodType<Prisma.ComorbiditiesValuesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.ComorbiditiesValuesDeleteManyArgs>,
    update: z.ZodType<Prisma.ComorbiditiesValuesUpdateArgs>,
    updateMany: z.ZodType<Prisma.ComorbiditiesValuesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.ComorbiditiesValuesUpsertArgs>,
    aggregate: z.ZodType<Prisma.ComorbiditiesValuesAggregateArgs>,
    groupBy: z.ZodType<Prisma.ComorbiditiesValuesGroupByArgs>,
    count: z.ZodType<Prisma.ComorbiditiesValuesCountArgs>
}

export const ComorbiditiesValuesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), where: ComorbiditiesValuesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), where: ComorbiditiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesValuesOrderByWithRelationInputObjectSchema, ComorbiditiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ComorbiditiesValuesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), where: ComorbiditiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesValuesOrderByWithRelationInputObjectSchema, ComorbiditiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ComorbiditiesValuesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), data: z.union([ComorbiditiesValuesCreateInputObjectSchema, ComorbiditiesValuesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([ComorbiditiesValuesCreateManyInputObjectSchema, z.array(ComorbiditiesValuesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), where: ComorbiditiesValuesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: ComorbiditiesValuesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), data: z.union([ComorbiditiesValuesUpdateInputObjectSchema, ComorbiditiesValuesUncheckedUpdateInputObjectSchema]), where: ComorbiditiesValuesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([ComorbiditiesValuesUpdateManyMutationInputObjectSchema, ComorbiditiesValuesUncheckedUpdateManyInputObjectSchema]), where: ComorbiditiesValuesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => ComorbiditiesValuesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesValuesIncludeObjectSchema.optional()), where: ComorbiditiesValuesWhereUniqueInputObjectSchema, create: z.union([ComorbiditiesValuesCreateInputObjectSchema, ComorbiditiesValuesUncheckedCreateInputObjectSchema]), update: z.union([ComorbiditiesValuesUpdateInputObjectSchema, ComorbiditiesValuesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: ComorbiditiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesValuesOrderByWithRelationInputObjectSchema, ComorbiditiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), ComorbiditiesValuesCountAggregateInputObjectSchema]).optional(), _min: ComorbiditiesValuesMinAggregateInputObjectSchema.optional(), _max: ComorbiditiesValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: ComorbiditiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesValuesOrderByWithAggregationInputObjectSchema, ComorbiditiesValuesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: ComorbiditiesValuesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(ComorbiditiesValuesScalarFieldEnumSchema), _count: z.union([z.literal(true), ComorbiditiesValuesCountAggregateInputObjectSchema]).optional(), _min: ComorbiditiesValuesMinAggregateInputObjectSchema.optional(), _max: ComorbiditiesValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: ComorbiditiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesValuesOrderByWithRelationInputObjectSchema, ComorbiditiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ComorbiditiesValuesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), ComorbiditiesValuesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as ComorbiditiesValuesInputSchemaType;
