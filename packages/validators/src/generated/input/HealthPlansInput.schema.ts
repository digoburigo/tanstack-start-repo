/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

;
import { HealthPlansSelectObjectSchema } from '../objects/HealthPlansSelect.schema';
import { HealthPlansIncludeObjectSchema } from '../objects/HealthPlansInclude.schema';
import { HealthPlansWhereUniqueInputObjectSchema } from '../objects/HealthPlansWhereUniqueInput.schema';
import { HealthPlansWhereInputObjectSchema } from '../objects/HealthPlansWhereInput.schema';
import { HealthPlansOrderByWithRelationInputObjectSchema } from '../objects/HealthPlansOrderByWithRelationInput.schema';
import { HealthPlansScalarFieldEnumSchema } from '../enums/HealthPlansScalarFieldEnum.schema';
import { HealthPlansCreateInputObjectSchema } from '../objects/HealthPlansCreateInput.schema';
import { HealthPlansUncheckedCreateInputObjectSchema } from '../objects/HealthPlansUncheckedCreateInput.schema';
import { HealthPlansCreateManyInputObjectSchema } from '../objects/HealthPlansCreateManyInput.schema';
import { HealthPlansUpdateInputObjectSchema } from '../objects/HealthPlansUpdateInput.schema';
import { HealthPlansUncheckedUpdateInputObjectSchema } from '../objects/HealthPlansUncheckedUpdateInput.schema';
import { HealthPlansUpdateManyMutationInputObjectSchema } from '../objects/HealthPlansUpdateManyMutationInput.schema';
import { HealthPlansUncheckedUpdateManyInputObjectSchema } from '../objects/HealthPlansUncheckedUpdateManyInput.schema';
import { HealthPlansCountAggregateInputObjectSchema } from '../objects/HealthPlansCountAggregateInput.schema';
import { HealthPlansMinAggregateInputObjectSchema } from '../objects/HealthPlansMinAggregateInput.schema';
import { HealthPlansMaxAggregateInputObjectSchema } from '../objects/HealthPlansMaxAggregateInput.schema';
import { HealthPlansOrderByWithAggregationInputObjectSchema } from '../objects/HealthPlansOrderByWithAggregationInput.schema';
import { HealthPlansScalarWhereWithAggregatesInputObjectSchema } from '../objects/HealthPlansScalarWhereWithAggregatesInput.schema'

type HealthPlansInputSchemaType = {
    findUnique: z.ZodType<Prisma.HealthPlansFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.HealthPlansFindFirstArgs>,
    findMany: z.ZodType<Prisma.HealthPlansFindManyArgs>,
    create: z.ZodType<Prisma.HealthPlansCreateArgs>,
    createMany: z.ZodType<Prisma.HealthPlansCreateManyArgs>,
    delete: z.ZodType<Prisma.HealthPlansDeleteArgs>,
    deleteMany: z.ZodType<Prisma.HealthPlansDeleteManyArgs>,
    update: z.ZodType<Prisma.HealthPlansUpdateArgs>,
    updateMany: z.ZodType<Prisma.HealthPlansUpdateManyArgs>,
    upsert: z.ZodType<Prisma.HealthPlansUpsertArgs>,
    aggregate: z.ZodType<Prisma.HealthPlansAggregateArgs>,
    groupBy: z.ZodType<Prisma.HealthPlansGroupByArgs>,
    count: z.ZodType<Prisma.HealthPlansCountArgs>
}

export const HealthPlansInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), where: HealthPlansWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), where: HealthPlansWhereInputObjectSchema.optional(), orderBy: z.union([HealthPlansOrderByWithRelationInputObjectSchema, HealthPlansOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: HealthPlansWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(HealthPlansScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), where: HealthPlansWhereInputObjectSchema.optional(), orderBy: z.union([HealthPlansOrderByWithRelationInputObjectSchema, HealthPlansOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: HealthPlansWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(HealthPlansScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), data: z.union([HealthPlansCreateInputObjectSchema, HealthPlansUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([HealthPlansCreateManyInputObjectSchema, z.array(HealthPlansCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), where: HealthPlansWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: HealthPlansWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), data: z.union([HealthPlansUpdateInputObjectSchema, HealthPlansUncheckedUpdateInputObjectSchema]), where: HealthPlansWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([HealthPlansUpdateManyMutationInputObjectSchema, HealthPlansUncheckedUpdateManyInputObjectSchema]), where: HealthPlansWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => HealthPlansSelectObjectSchema.optional()), include: z.lazy(() => HealthPlansIncludeObjectSchema.optional()), where: HealthPlansWhereUniqueInputObjectSchema, create: z.union([HealthPlansCreateInputObjectSchema, HealthPlansUncheckedCreateInputObjectSchema]), update: z.union([HealthPlansUpdateInputObjectSchema, HealthPlansUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: HealthPlansWhereInputObjectSchema.optional(), orderBy: z.union([HealthPlansOrderByWithRelationInputObjectSchema, HealthPlansOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: HealthPlansWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), HealthPlansCountAggregateInputObjectSchema]).optional(), _min: HealthPlansMinAggregateInputObjectSchema.optional(), _max: HealthPlansMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: HealthPlansWhereInputObjectSchema.optional(), orderBy: z.union([HealthPlansOrderByWithAggregationInputObjectSchema, HealthPlansOrderByWithAggregationInputObjectSchema.array()]).optional(), having: HealthPlansScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(HealthPlansScalarFieldEnumSchema), _count: z.union([z.literal(true), HealthPlansCountAggregateInputObjectSchema]).optional(), _min: HealthPlansMinAggregateInputObjectSchema.optional(), _max: HealthPlansMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: HealthPlansWhereInputObjectSchema.optional(), orderBy: z.union([HealthPlansOrderByWithRelationInputObjectSchema, HealthPlansOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: HealthPlansWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(HealthPlansScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), HealthPlansCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as HealthPlansInputSchemaType;
