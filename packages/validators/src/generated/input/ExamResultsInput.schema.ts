/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

;
import { ExamResultsSelectObjectSchema } from '../objects/ExamResultsSelect.schema';
import { ExamResultsIncludeObjectSchema } from '../objects/ExamResultsInclude.schema';
import { ExamResultsWhereUniqueInputObjectSchema } from '../objects/ExamResultsWhereUniqueInput.schema';
import { ExamResultsWhereInputObjectSchema } from '../objects/ExamResultsWhereInput.schema';
import { ExamResultsOrderByWithRelationInputObjectSchema } from '../objects/ExamResultsOrderByWithRelationInput.schema';
import { ExamResultsScalarFieldEnumSchema } from '../enums/ExamResultsScalarFieldEnum.schema';
import { ExamResultsCreateInputObjectSchema } from '../objects/ExamResultsCreateInput.schema';
import { ExamResultsUncheckedCreateInputObjectSchema } from '../objects/ExamResultsUncheckedCreateInput.schema';
import { ExamResultsCreateManyInputObjectSchema } from '../objects/ExamResultsCreateManyInput.schema';
import { ExamResultsUpdateInputObjectSchema } from '../objects/ExamResultsUpdateInput.schema';
import { ExamResultsUncheckedUpdateInputObjectSchema } from '../objects/ExamResultsUncheckedUpdateInput.schema';
import { ExamResultsUpdateManyMutationInputObjectSchema } from '../objects/ExamResultsUpdateManyMutationInput.schema';
import { ExamResultsUncheckedUpdateManyInputObjectSchema } from '../objects/ExamResultsUncheckedUpdateManyInput.schema';
import { ExamResultsCountAggregateInputObjectSchema } from '../objects/ExamResultsCountAggregateInput.schema';
import { ExamResultsMinAggregateInputObjectSchema } from '../objects/ExamResultsMinAggregateInput.schema';
import { ExamResultsMaxAggregateInputObjectSchema } from '../objects/ExamResultsMaxAggregateInput.schema';
import { ExamResultsOrderByWithAggregationInputObjectSchema } from '../objects/ExamResultsOrderByWithAggregationInput.schema';
import { ExamResultsScalarWhereWithAggregatesInputObjectSchema } from '../objects/ExamResultsScalarWhereWithAggregatesInput.schema'

type ExamResultsInputSchemaType = {
    findUnique: z.ZodType<Prisma.ExamResultsFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.ExamResultsFindFirstArgs>,
    findMany: z.ZodType<Prisma.ExamResultsFindManyArgs>,
    create: z.ZodType<Prisma.ExamResultsCreateArgs>,
    createMany: z.ZodType<Prisma.ExamResultsCreateManyArgs>,
    delete: z.ZodType<Prisma.ExamResultsDeleteArgs>,
    deleteMany: z.ZodType<Prisma.ExamResultsDeleteManyArgs>,
    update: z.ZodType<Prisma.ExamResultsUpdateArgs>,
    updateMany: z.ZodType<Prisma.ExamResultsUpdateManyArgs>,
    upsert: z.ZodType<Prisma.ExamResultsUpsertArgs>,
    aggregate: z.ZodType<Prisma.ExamResultsAggregateArgs>,
    groupBy: z.ZodType<Prisma.ExamResultsGroupByArgs>,
    count: z.ZodType<Prisma.ExamResultsCountArgs>
}

export const ExamResultsInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), where: ExamResultsWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), where: ExamResultsWhereInputObjectSchema.optional(), orderBy: z.union([ExamResultsOrderByWithRelationInputObjectSchema, ExamResultsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ExamResultsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ExamResultsScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), where: ExamResultsWhereInputObjectSchema.optional(), orderBy: z.union([ExamResultsOrderByWithRelationInputObjectSchema, ExamResultsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ExamResultsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ExamResultsScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), data: z.union([ExamResultsCreateInputObjectSchema, ExamResultsUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([ExamResultsCreateManyInputObjectSchema, z.array(ExamResultsCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), where: ExamResultsWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: ExamResultsWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), data: z.union([ExamResultsUpdateInputObjectSchema, ExamResultsUncheckedUpdateInputObjectSchema]), where: ExamResultsWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([ExamResultsUpdateManyMutationInputObjectSchema, ExamResultsUncheckedUpdateManyInputObjectSchema]), where: ExamResultsWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => ExamResultsSelectObjectSchema.optional()), include: z.lazy(() => ExamResultsIncludeObjectSchema.optional()), where: ExamResultsWhereUniqueInputObjectSchema, create: z.union([ExamResultsCreateInputObjectSchema, ExamResultsUncheckedCreateInputObjectSchema]), update: z.union([ExamResultsUpdateInputObjectSchema, ExamResultsUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: ExamResultsWhereInputObjectSchema.optional(), orderBy: z.union([ExamResultsOrderByWithRelationInputObjectSchema, ExamResultsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ExamResultsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), ExamResultsCountAggregateInputObjectSchema]).optional(), _min: ExamResultsMinAggregateInputObjectSchema.optional(), _max: ExamResultsMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: ExamResultsWhereInputObjectSchema.optional(), orderBy: z.union([ExamResultsOrderByWithAggregationInputObjectSchema, ExamResultsOrderByWithAggregationInputObjectSchema.array()]).optional(), having: ExamResultsScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(ExamResultsScalarFieldEnumSchema), _count: z.union([z.literal(true), ExamResultsCountAggregateInputObjectSchema]).optional(), _min: ExamResultsMinAggregateInputObjectSchema.optional(), _max: ExamResultsMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: ExamResultsWhereInputObjectSchema.optional(), orderBy: z.union([ExamResultsOrderByWithRelationInputObjectSchema, ExamResultsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ExamResultsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ExamResultsScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), ExamResultsCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as ExamResultsInputSchemaType;
