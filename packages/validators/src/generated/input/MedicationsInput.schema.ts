/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

;
import { MedicationsSelectObjectSchema } from '../objects/MedicationsSelect.schema';
import { MedicationsIncludeObjectSchema } from '../objects/MedicationsInclude.schema';
import { MedicationsWhereUniqueInputObjectSchema } from '../objects/MedicationsWhereUniqueInput.schema';
import { MedicationsWhereInputObjectSchema } from '../objects/MedicationsWhereInput.schema';
import { MedicationsOrderByWithRelationInputObjectSchema } from '../objects/MedicationsOrderByWithRelationInput.schema';
import { MedicationsScalarFieldEnumSchema } from '../enums/MedicationsScalarFieldEnum.schema';
import { MedicationsCreateInputObjectSchema } from '../objects/MedicationsCreateInput.schema';
import { MedicationsUncheckedCreateInputObjectSchema } from '../objects/MedicationsUncheckedCreateInput.schema';
import { MedicationsCreateManyInputObjectSchema } from '../objects/MedicationsCreateManyInput.schema';
import { MedicationsUpdateInputObjectSchema } from '../objects/MedicationsUpdateInput.schema';
import { MedicationsUncheckedUpdateInputObjectSchema } from '../objects/MedicationsUncheckedUpdateInput.schema';
import { MedicationsUpdateManyMutationInputObjectSchema } from '../objects/MedicationsUpdateManyMutationInput.schema';
import { MedicationsUncheckedUpdateManyInputObjectSchema } from '../objects/MedicationsUncheckedUpdateManyInput.schema';
import { MedicationsCountAggregateInputObjectSchema } from '../objects/MedicationsCountAggregateInput.schema';
import { MedicationsMinAggregateInputObjectSchema } from '../objects/MedicationsMinAggregateInput.schema';
import { MedicationsMaxAggregateInputObjectSchema } from '../objects/MedicationsMaxAggregateInput.schema';
import { MedicationsOrderByWithAggregationInputObjectSchema } from '../objects/MedicationsOrderByWithAggregationInput.schema';
import { MedicationsScalarWhereWithAggregatesInputObjectSchema } from '../objects/MedicationsScalarWhereWithAggregatesInput.schema'

type MedicationsInputSchemaType = {
    findUnique: z.ZodType<Prisma.MedicationsFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.MedicationsFindFirstArgs>,
    findMany: z.ZodType<Prisma.MedicationsFindManyArgs>,
    create: z.ZodType<Prisma.MedicationsCreateArgs>,
    createMany: z.ZodType<Prisma.MedicationsCreateManyArgs>,
    delete: z.ZodType<Prisma.MedicationsDeleteArgs>,
    deleteMany: z.ZodType<Prisma.MedicationsDeleteManyArgs>,
    update: z.ZodType<Prisma.MedicationsUpdateArgs>,
    updateMany: z.ZodType<Prisma.MedicationsUpdateManyArgs>,
    upsert: z.ZodType<Prisma.MedicationsUpsertArgs>,
    aggregate: z.ZodType<Prisma.MedicationsAggregateArgs>,
    groupBy: z.ZodType<Prisma.MedicationsGroupByArgs>,
    count: z.ZodType<Prisma.MedicationsCountArgs>
}

export const MedicationsInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), where: MedicationsWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), where: MedicationsWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsOrderByWithRelationInputObjectSchema, MedicationsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(MedicationsScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), where: MedicationsWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsOrderByWithRelationInputObjectSchema, MedicationsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(MedicationsScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), data: z.union([MedicationsCreateInputObjectSchema, MedicationsUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([MedicationsCreateManyInputObjectSchema, z.array(MedicationsCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), where: MedicationsWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: MedicationsWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), data: z.union([MedicationsUpdateInputObjectSchema, MedicationsUncheckedUpdateInputObjectSchema]), where: MedicationsWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([MedicationsUpdateManyMutationInputObjectSchema, MedicationsUncheckedUpdateManyInputObjectSchema]), where: MedicationsWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => MedicationsSelectObjectSchema.optional()), include: z.lazy(() => MedicationsIncludeObjectSchema.optional()), where: MedicationsWhereUniqueInputObjectSchema, create: z.union([MedicationsCreateInputObjectSchema, MedicationsUncheckedCreateInputObjectSchema]), update: z.union([MedicationsUpdateInputObjectSchema, MedicationsUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: MedicationsWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsOrderByWithRelationInputObjectSchema, MedicationsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), MedicationsCountAggregateInputObjectSchema]).optional(), _min: MedicationsMinAggregateInputObjectSchema.optional(), _max: MedicationsMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: MedicationsWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsOrderByWithAggregationInputObjectSchema, MedicationsOrderByWithAggregationInputObjectSchema.array()]).optional(), having: MedicationsScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(MedicationsScalarFieldEnumSchema), _count: z.union([z.literal(true), MedicationsCountAggregateInputObjectSchema]).optional(), _min: MedicationsMinAggregateInputObjectSchema.optional(), _max: MedicationsMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: MedicationsWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsOrderByWithRelationInputObjectSchema, MedicationsOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(MedicationsScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), MedicationsCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as MedicationsInputSchemaType;
