/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

;
import { AssetSelectObjectSchema } from '../objects/AssetSelect.schema';
import { AssetIncludeObjectSchema } from '../objects/AssetInclude.schema';
import { AssetWhereUniqueInputObjectSchema } from '../objects/AssetWhereUniqueInput.schema';
import { AssetWhereInputObjectSchema } from '../objects/AssetWhereInput.schema';
import { AssetOrderByWithRelationInputObjectSchema } from '../objects/AssetOrderByWithRelationInput.schema';
import { AssetScalarFieldEnumSchema } from '../enums/AssetScalarFieldEnum.schema';
import { AssetCreateInputObjectSchema } from '../objects/AssetCreateInput.schema';
import { AssetUncheckedCreateInputObjectSchema } from '../objects/AssetUncheckedCreateInput.schema';
import { AssetCreateManyInputObjectSchema } from '../objects/AssetCreateManyInput.schema';
import { AssetUpdateInputObjectSchema } from '../objects/AssetUpdateInput.schema';
import { AssetUncheckedUpdateInputObjectSchema } from '../objects/AssetUncheckedUpdateInput.schema';
import { AssetUpdateManyMutationInputObjectSchema } from '../objects/AssetUpdateManyMutationInput.schema';
import { AssetUncheckedUpdateManyInputObjectSchema } from '../objects/AssetUncheckedUpdateManyInput.schema';
import { AssetCountAggregateInputObjectSchema } from '../objects/AssetCountAggregateInput.schema';
import { AssetMinAggregateInputObjectSchema } from '../objects/AssetMinAggregateInput.schema';
import { AssetMaxAggregateInputObjectSchema } from '../objects/AssetMaxAggregateInput.schema';
import { AssetOrderByWithAggregationInputObjectSchema } from '../objects/AssetOrderByWithAggregationInput.schema';
import { AssetScalarWhereWithAggregatesInputObjectSchema } from '../objects/AssetScalarWhereWithAggregatesInput.schema'

type AssetInputSchemaType = {
    findUnique: z.ZodType<Prisma.AssetFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.AssetFindFirstArgs>,
    findMany: z.ZodType<Prisma.AssetFindManyArgs>,
    create: z.ZodType<Prisma.AssetCreateArgs>,
    createMany: z.ZodType<Prisma.AssetCreateManyArgs>,
    delete: z.ZodType<Prisma.AssetDeleteArgs>,
    deleteMany: z.ZodType<Prisma.AssetDeleteManyArgs>,
    update: z.ZodType<Prisma.AssetUpdateArgs>,
    updateMany: z.ZodType<Prisma.AssetUpdateManyArgs>,
    upsert: z.ZodType<Prisma.AssetUpsertArgs>,
    aggregate: z.ZodType<Prisma.AssetAggregateArgs>,
    groupBy: z.ZodType<Prisma.AssetGroupByArgs>,
    count: z.ZodType<Prisma.AssetCountArgs>
}

export const AssetInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), where: AssetWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), where: AssetWhereInputObjectSchema.optional(), orderBy: z.union([AssetOrderByWithRelationInputObjectSchema, AssetOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AssetWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AssetScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), where: AssetWhereInputObjectSchema.optional(), orderBy: z.union([AssetOrderByWithRelationInputObjectSchema, AssetOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AssetWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AssetScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), data: z.union([AssetCreateInputObjectSchema, AssetUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([AssetCreateManyInputObjectSchema, z.array(AssetCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), where: AssetWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: AssetWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), data: z.union([AssetUpdateInputObjectSchema, AssetUncheckedUpdateInputObjectSchema]), where: AssetWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([AssetUpdateManyMutationInputObjectSchema, AssetUncheckedUpdateManyInputObjectSchema]), where: AssetWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => AssetSelectObjectSchema.optional()), include: z.lazy(() => AssetIncludeObjectSchema.optional()), where: AssetWhereUniqueInputObjectSchema, create: z.union([AssetCreateInputObjectSchema, AssetUncheckedCreateInputObjectSchema]), update: z.union([AssetUpdateInputObjectSchema, AssetUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: AssetWhereInputObjectSchema.optional(), orderBy: z.union([AssetOrderByWithRelationInputObjectSchema, AssetOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AssetWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), AssetCountAggregateInputObjectSchema]).optional(), _min: AssetMinAggregateInputObjectSchema.optional(), _max: AssetMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: AssetWhereInputObjectSchema.optional(), orderBy: z.union([AssetOrderByWithAggregationInputObjectSchema, AssetOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AssetScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AssetScalarFieldEnumSchema), _count: z.union([z.literal(true), AssetCountAggregateInputObjectSchema]).optional(), _min: AssetMinAggregateInputObjectSchema.optional(), _max: AssetMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: AssetWhereInputObjectSchema.optional(), orderBy: z.union([AssetOrderByWithRelationInputObjectSchema, AssetOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AssetWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AssetScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), AssetCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as AssetInputSchemaType;
