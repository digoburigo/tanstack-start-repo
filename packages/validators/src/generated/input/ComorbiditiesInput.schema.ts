/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../../../db-zenstack/src/generated/zenstack/models';

;
import { ComorbiditiesSelectObjectSchema } from '../objects/ComorbiditiesSelect.schema';
import { ComorbiditiesIncludeObjectSchema } from '../objects/ComorbiditiesInclude.schema';
import { ComorbiditiesWhereUniqueInputObjectSchema } from '../objects/ComorbiditiesWhereUniqueInput.schema';
import { ComorbiditiesWhereInputObjectSchema } from '../objects/ComorbiditiesWhereInput.schema';
import { ComorbiditiesOrderByWithRelationInputObjectSchema } from '../objects/ComorbiditiesOrderByWithRelationInput.schema';
import { ComorbiditiesScalarFieldEnumSchema } from '../enums/ComorbiditiesScalarFieldEnum.schema';
import { ComorbiditiesCreateInputObjectSchema } from '../objects/ComorbiditiesCreateInput.schema';
import { ComorbiditiesUncheckedCreateInputObjectSchema } from '../objects/ComorbiditiesUncheckedCreateInput.schema';
import { ComorbiditiesCreateManyInputObjectSchema } from '../objects/ComorbiditiesCreateManyInput.schema';
import { ComorbiditiesUpdateInputObjectSchema } from '../objects/ComorbiditiesUpdateInput.schema';
import { ComorbiditiesUncheckedUpdateInputObjectSchema } from '../objects/ComorbiditiesUncheckedUpdateInput.schema';
import { ComorbiditiesUpdateManyMutationInputObjectSchema } from '../objects/ComorbiditiesUpdateManyMutationInput.schema';
import { ComorbiditiesUncheckedUpdateManyInputObjectSchema } from '../objects/ComorbiditiesUncheckedUpdateManyInput.schema';
import { ComorbiditiesCountAggregateInputObjectSchema } from '../objects/ComorbiditiesCountAggregateInput.schema';
import { ComorbiditiesMinAggregateInputObjectSchema } from '../objects/ComorbiditiesMinAggregateInput.schema';
import { ComorbiditiesMaxAggregateInputObjectSchema } from '../objects/ComorbiditiesMaxAggregateInput.schema';
import { ComorbiditiesOrderByWithAggregationInputObjectSchema } from '../objects/ComorbiditiesOrderByWithAggregationInput.schema';
import { ComorbiditiesScalarWhereWithAggregatesInputObjectSchema } from '../objects/ComorbiditiesScalarWhereWithAggregatesInput.schema'

type ComorbiditiesInputSchemaType = {
    findUnique: z.ZodType<Prisma.ComorbiditiesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.ComorbiditiesFindFirstArgs>,
    findMany: z.ZodType<Prisma.ComorbiditiesFindManyArgs>,
    create: z.ZodType<Prisma.ComorbiditiesCreateArgs>,
    createMany: z.ZodType<Prisma.ComorbiditiesCreateManyArgs>,
    delete: z.ZodType<Prisma.ComorbiditiesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.ComorbiditiesDeleteManyArgs>,
    update: z.ZodType<Prisma.ComorbiditiesUpdateArgs>,
    updateMany: z.ZodType<Prisma.ComorbiditiesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.ComorbiditiesUpsertArgs>,
    aggregate: z.ZodType<Prisma.ComorbiditiesAggregateArgs>,
    groupBy: z.ZodType<Prisma.ComorbiditiesGroupByArgs>,
    count: z.ZodType<Prisma.ComorbiditiesCountArgs>
}

export const ComorbiditiesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), where: ComorbiditiesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), where: ComorbiditiesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesOrderByWithRelationInputObjectSchema, ComorbiditiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ComorbiditiesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), where: ComorbiditiesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesOrderByWithRelationInputObjectSchema, ComorbiditiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ComorbiditiesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), data: z.union([ComorbiditiesCreateInputObjectSchema, ComorbiditiesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([ComorbiditiesCreateManyInputObjectSchema, z.array(ComorbiditiesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), where: ComorbiditiesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: ComorbiditiesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), data: z.union([ComorbiditiesUpdateInputObjectSchema, ComorbiditiesUncheckedUpdateInputObjectSchema]), where: ComorbiditiesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([ComorbiditiesUpdateManyMutationInputObjectSchema, ComorbiditiesUncheckedUpdateManyInputObjectSchema]), where: ComorbiditiesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => ComorbiditiesSelectObjectSchema.optional()), include: z.lazy(() => ComorbiditiesIncludeObjectSchema.optional()), where: ComorbiditiesWhereUniqueInputObjectSchema, create: z.union([ComorbiditiesCreateInputObjectSchema, ComorbiditiesUncheckedCreateInputObjectSchema]), update: z.union([ComorbiditiesUpdateInputObjectSchema, ComorbiditiesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: ComorbiditiesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesOrderByWithRelationInputObjectSchema, ComorbiditiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), ComorbiditiesCountAggregateInputObjectSchema]).optional(), _min: ComorbiditiesMinAggregateInputObjectSchema.optional(), _max: ComorbiditiesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: ComorbiditiesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesOrderByWithAggregationInputObjectSchema, ComorbiditiesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: ComorbiditiesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(ComorbiditiesScalarFieldEnumSchema), _count: z.union([z.literal(true), ComorbiditiesCountAggregateInputObjectSchema]).optional(), _min: ComorbiditiesMinAggregateInputObjectSchema.optional(), _max: ComorbiditiesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: ComorbiditiesWhereInputObjectSchema.optional(), orderBy: z.union([ComorbiditiesOrderByWithRelationInputObjectSchema, ComorbiditiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: ComorbiditiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(ComorbiditiesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), ComorbiditiesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as ComorbiditiesInputSchemaType;
