/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { db } from ".";
import { createTRPCRouter } from "../../trpc";
import { procedure } from "../../trpc";
import * as _Schema from '@zenstackhq/runtime/zod/input';
const $Schema: typeof _Schema = (_Schema as any).default ?? _Schema;
import { checkRead, checkMutate } from '../helper';

export default function createRouter() {
    return createTRPCRouter({

        aggregate: procedure.input($Schema.HealthPlansInputSchema.aggregate).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.aggregate(input as any))),

        createMany: procedure.input($Schema.HealthPlansInputSchema.createMany.optional()).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.createMany(input as any))),

        create: procedure.input($Schema.HealthPlansInputSchema.create).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.create(input as any))),

        deleteMany: procedure.input($Schema.HealthPlansInputSchema.deleteMany.optional()).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.deleteMany(input as any))),

        delete: procedure.input($Schema.HealthPlansInputSchema.delete).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.delete(input as any))),

        findFirst: procedure.input($Schema.HealthPlansInputSchema.findFirst.optional()).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.findFirst(input as any))),

        findFirstOrThrow: procedure.input($Schema.HealthPlansInputSchema.findFirst.optional()).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.findFirstOrThrow(input as any))),

        findMany: procedure.input($Schema.HealthPlansInputSchema.findMany.optional()).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.findMany(input as any))),

        findUnique: procedure.input($Schema.HealthPlansInputSchema.findUnique).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.findUnique(input as any))),

        findUniqueOrThrow: procedure.input($Schema.HealthPlansInputSchema.findUnique).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.findUniqueOrThrow(input as any))),

        groupBy: procedure.input($Schema.HealthPlansInputSchema.groupBy).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.groupBy(input as any))),

        updateMany: procedure.input($Schema.HealthPlansInputSchema.updateMany).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.updateMany(input as any))),

        update: procedure.input($Schema.HealthPlansInputSchema.update).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.update(input as any))),

        upsert: procedure.input($Schema.HealthPlansInputSchema.upsert).mutation(async ({ ctx, input }) => checkMutate(db(ctx).healthPlans.upsert(input as any))),

        count: procedure.input($Schema.HealthPlansInputSchema.count.optional()).query(({ ctx, input }) => checkRead(db(ctx).healthPlans.count(input as any))),

    }
    );
}
