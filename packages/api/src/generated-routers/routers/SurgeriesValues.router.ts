/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { db } from ".";
import { createTRPCRouter } from "../../trpc";
import { procedure } from "../../trpc";
import * as _Schema from '@zenstackhq/runtime/zod/input';
const $Schema: typeof _Schema = (_Schema as any).default ?? _Schema;
import { checkRead, checkMutate } from '../helper';

export default function createRouter() {
    return createTRPCRouter({

        aggregate: procedure.input($Schema.SurgeriesValuesInputSchema.aggregate).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.aggregate(input as any))),

        createMany: procedure.input($Schema.SurgeriesValuesInputSchema.createMany.optional()).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.createMany(input as any))),

        create: procedure.input($Schema.SurgeriesValuesInputSchema.create).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.create(input as any))),

        deleteMany: procedure.input($Schema.SurgeriesValuesInputSchema.deleteMany.optional()).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.deleteMany(input as any))),

        delete: procedure.input($Schema.SurgeriesValuesInputSchema.delete).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.delete(input as any))),

        findFirst: procedure.input($Schema.SurgeriesValuesInputSchema.findFirst.optional()).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.findFirst(input as any))),

        findFirstOrThrow: procedure.input($Schema.SurgeriesValuesInputSchema.findFirst.optional()).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.findFirstOrThrow(input as any))),

        findMany: procedure.input($Schema.SurgeriesValuesInputSchema.findMany.optional()).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.findMany(input as any))),

        findUnique: procedure.input($Schema.SurgeriesValuesInputSchema.findUnique).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.findUnique(input as any))),

        findUniqueOrThrow: procedure.input($Schema.SurgeriesValuesInputSchema.findUnique).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.findUniqueOrThrow(input as any))),

        groupBy: procedure.input($Schema.SurgeriesValuesInputSchema.groupBy).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.groupBy(input as any))),

        updateMany: procedure.input($Schema.SurgeriesValuesInputSchema.updateMany).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.updateMany(input as any))),

        update: procedure.input($Schema.SurgeriesValuesInputSchema.update).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.update(input as any))),

        upsert: procedure.input($Schema.SurgeriesValuesInputSchema.upsert).mutation(async ({ ctx, input }) => checkMutate(db(ctx).surgeriesValues.upsert(input as any))),

        count: procedure.input($Schema.SurgeriesValuesInputSchema.count.optional()).query(({ ctx, input }) => checkRead(db(ctx).surgeriesValues.count(input as any))),

    }
    );
}
