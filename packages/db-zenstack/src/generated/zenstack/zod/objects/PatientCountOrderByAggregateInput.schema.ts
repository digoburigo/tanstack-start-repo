/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SortOrderSchema } from '../enums/SortOrder.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.PatientCountOrderByAggregateInput>;
export const PatientCountOrderByAggregateInputObjectSchema: SchemaType = z.object({
    id: z.lazy(() => SortOrderSchema).optional().optional(), type: z.lazy(() => SortOrderSchema).optional().optional(), createdAt: z.lazy(() => SortOrderSchema).optional().optional(), createdById: z.lazy(() => SortOrderSchema).optional().optional(), updatedAt: z.lazy(() => SortOrderSchema).optional().optional(), updatedById: z.lazy(() => SortOrderSchema).optional().optional(), deletedAt: z.lazy(() => SortOrderSchema).optional().optional(), deletedById: z.lazy(() => SortOrderSchema).optional().optional(), deleted: z.lazy(() => SortOrderSchema).optional().optional(), organizationId: z.lazy(() => SortOrderSchema).optional().optional(), name: z.lazy(() => SortOrderSchema).optional().optional(), cpf: z.lazy(() => SortOrderSchema).optional().optional(), cellphone: z.lazy(() => SortOrderSchema).optional().optional(), email: z.lazy(() => SortOrderSchema).optional().optional(), sex: z.lazy(() => SortOrderSchema).optional().optional(), responsible: z.lazy(() => SortOrderSchema).optional().optional(), nationality: z.lazy(() => SortOrderSchema).optional().optional(), race: z.lazy(() => SortOrderSchema).optional().optional(), state: z.lazy(() => SortOrderSchema).optional().optional(), city: z.lazy(() => SortOrderSchema).optional().optional(), zipcode: z.lazy(() => SortOrderSchema).optional().optional(), neighborhood: z.lazy(() => SortOrderSchema).optional().optional(), street: z.lazy(() => SortOrderSchema).optional().optional(), number: z.lazy(() => SortOrderSchema).optional().optional(), complement: z.lazy(() => SortOrderSchema).optional().optional(), occupation: z.lazy(() => SortOrderSchema).optional().optional(), sexualOrientation: z.lazy(() => SortOrderSchema).optional().optional(), civilStatus: z.lazy(() => SortOrderSchema).optional().optional(), bloodType: z.lazy(() => SortOrderSchema).optional().optional(), genderIdentity: z.lazy(() => SortOrderSchema).optional().optional(), password: z.lazy(() => SortOrderSchema).optional().optional(), userId: z.lazy(() => SortOrderSchema).optional().optional()
}).strict() as SchemaType;
