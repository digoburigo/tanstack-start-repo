/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { ExamResultsCreateWithoutOrganizationInputObjectSchema } from './ExamResultsCreateWithoutOrganizationInput.schema';
import { ExamResultsUncheckedCreateWithoutOrganizationInputObjectSchema } from './ExamResultsUncheckedCreateWithoutOrganizationInput.schema';
import { ExamResultsCreateOrConnectWithoutOrganizationInputObjectSchema } from './ExamResultsCreateOrConnectWithoutOrganizationInput.schema';
import { ExamResultsUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema } from './ExamResultsUpsertWithWhereUniqueWithoutOrganizationInput.schema';
import { ExamResultsCreateManyOrganizationInputEnvelopeObjectSchema } from './ExamResultsCreateManyOrganizationInputEnvelope.schema';
import { ExamResultsWhereUniqueInputObjectSchema } from './ExamResultsWhereUniqueInput.schema';
import { ExamResultsUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema } from './ExamResultsUpdateWithWhereUniqueWithoutOrganizationInput.schema';
import { ExamResultsUpdateManyWithWhereWithoutOrganizationInputObjectSchema } from './ExamResultsUpdateManyWithWhereWithoutOrganizationInput.schema';
import { ExamResultsScalarWhereInputObjectSchema } from './ExamResultsScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.ExamResultsUpdateManyWithoutOrganizationNestedInput>;
export const ExamResultsUpdateManyWithoutOrganizationNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => ExamResultsCreateWithoutOrganizationInputObjectSchema), z.lazy(() => ExamResultsCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => ExamResultsUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => ExamResultsUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => ExamResultsCreateOrConnectWithoutOrganizationInputObjectSchema),
    z.lazy(() => ExamResultsCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => ExamResultsUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => ExamResultsUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), createMany: z.lazy(() => ExamResultsCreateManyOrganizationInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => ExamResultsWhereUniqueInputObjectSchema),
    z.lazy(() => ExamResultsWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => ExamResultsUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => ExamResultsUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => ExamResultsUpdateManyWithWhereWithoutOrganizationInputObjectSchema),
    z.lazy(() => ExamResultsUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => ExamResultsScalarWhereInputObjectSchema),
    z.lazy(() => ExamResultsScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
