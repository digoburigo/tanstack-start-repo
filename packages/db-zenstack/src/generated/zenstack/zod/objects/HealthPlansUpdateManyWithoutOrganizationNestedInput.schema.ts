/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { HealthPlansCreateWithoutOrganizationInputObjectSchema } from './HealthPlansCreateWithoutOrganizationInput.schema';
import { HealthPlansUncheckedCreateWithoutOrganizationInputObjectSchema } from './HealthPlansUncheckedCreateWithoutOrganizationInput.schema';
import { HealthPlansCreateOrConnectWithoutOrganizationInputObjectSchema } from './HealthPlansCreateOrConnectWithoutOrganizationInput.schema';
import { HealthPlansUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema } from './HealthPlansUpsertWithWhereUniqueWithoutOrganizationInput.schema';
import { HealthPlansCreateManyOrganizationInputEnvelopeObjectSchema } from './HealthPlansCreateManyOrganizationInputEnvelope.schema';
import { HealthPlansWhereUniqueInputObjectSchema } from './HealthPlansWhereUniqueInput.schema';
import { HealthPlansUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema } from './HealthPlansUpdateWithWhereUniqueWithoutOrganizationInput.schema';
import { HealthPlansUpdateManyWithWhereWithoutOrganizationInputObjectSchema } from './HealthPlansUpdateManyWithWhereWithoutOrganizationInput.schema';
import { HealthPlansScalarWhereInputObjectSchema } from './HealthPlansScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.HealthPlansUpdateManyWithoutOrganizationNestedInput>;
export const HealthPlansUpdateManyWithoutOrganizationNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => HealthPlansCreateWithoutOrganizationInputObjectSchema), z.lazy(() => HealthPlansCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => HealthPlansUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => HealthPlansUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => HealthPlansCreateOrConnectWithoutOrganizationInputObjectSchema),
    z.lazy(() => HealthPlansCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => HealthPlansUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => HealthPlansUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), createMany: z.lazy(() => HealthPlansCreateManyOrganizationInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => HealthPlansWhereUniqueInputObjectSchema),
    z.lazy(() => HealthPlansWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => HealthPlansWhereUniqueInputObjectSchema),
    z.lazy(() => HealthPlansWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => HealthPlansWhereUniqueInputObjectSchema),
    z.lazy(() => HealthPlansWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => HealthPlansWhereUniqueInputObjectSchema),
    z.lazy(() => HealthPlansWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => HealthPlansUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => HealthPlansUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => HealthPlansUpdateManyWithWhereWithoutOrganizationInputObjectSchema),
    z.lazy(() => HealthPlansUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => HealthPlansScalarWhereInputObjectSchema),
    z.lazy(() => HealthPlansScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
