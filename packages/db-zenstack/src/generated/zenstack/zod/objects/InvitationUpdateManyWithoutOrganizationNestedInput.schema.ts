/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { InvitationCreateWithoutOrganizationInputObjectSchema } from './InvitationCreateWithoutOrganizationInput.schema';
import { InvitationUncheckedCreateWithoutOrganizationInputObjectSchema } from './InvitationUncheckedCreateWithoutOrganizationInput.schema';
import { InvitationCreateOrConnectWithoutOrganizationInputObjectSchema } from './InvitationCreateOrConnectWithoutOrganizationInput.schema';
import { InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema } from './InvitationUpsertWithWhereUniqueWithoutOrganizationInput.schema';
import { InvitationCreateManyOrganizationInputEnvelopeObjectSchema } from './InvitationCreateManyOrganizationInputEnvelope.schema';
import { InvitationWhereUniqueInputObjectSchema } from './InvitationWhereUniqueInput.schema';
import { InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema } from './InvitationUpdateWithWhereUniqueWithoutOrganizationInput.schema';
import { InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema } from './InvitationUpdateManyWithWhereWithoutOrganizationInput.schema';
import { InvitationScalarWhereInputObjectSchema } from './InvitationScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput>;
export const InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema),
    z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema),
    z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema),
    z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema),
    z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema),
    z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema),
    z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema),
    z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
