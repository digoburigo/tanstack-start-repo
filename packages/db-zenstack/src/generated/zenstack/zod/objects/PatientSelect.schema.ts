/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { UserDefaultArgsObjectSchema } from './UserDefaultArgs.schema';
import { OrganizationDefaultArgsObjectSchema } from './OrganizationDefaultArgs.schema';
import { AppointmentInputSchema } from '../input/AppointmentInput.schema';
import { VaccinationsInputSchema } from '../input/VaccinationsInput.schema';
import { AllergiesInputSchema } from '../input/AllergiesInput.schema';
import { MedicationsInputSchema } from '../input/MedicationsInput.schema';
import { ExamResultsInputSchema } from '../input/ExamResultsInput.schema';
import { ComorbiditiesInputSchema } from '../input/ComorbiditiesInput.schema';
import { SurgeriesInputSchema } from '../input/SurgeriesInput.schema';
import { HealthPlansInputSchema } from '../input/HealthPlansInput.schema';
import { PatientCountOutputTypeDefaultArgsObjectSchema } from './PatientCountOutputTypeDefaultArgs.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.PatientSelect>;
export const PatientSelectObjectSchema: SchemaType = z.object({
    id: z.boolean().optional().optional(), type: z.boolean().optional().optional(), createdAt: z.boolean().optional().optional(), createdById: z.boolean().optional().optional(), createdByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), updatedAt: z.boolean().optional().optional(), updatedById: z.boolean().optional().optional(), updatedByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), deletedAt: z.boolean().optional().optional(), deletedById: z.boolean().optional().optional(), deletedByUser: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), deleted: z.boolean().optional().optional(), organizationId: z.boolean().optional().optional(), organization: z.union([z.boolean(),
    z.lazy(() => OrganizationDefaultArgsObjectSchema)]).optional(), name: z.boolean().optional().optional(), cpf: z.boolean().optional().optional(), cellphone: z.boolean().optional().optional(), email: z.boolean().optional().optional(), sex: z.boolean().optional().optional(), responsible: z.boolean().optional().optional(), nationality: z.boolean().optional().optional(), race: z.boolean().optional().optional(), state: z.boolean().optional().optional(), city: z.boolean().optional().optional(), zipcode: z.boolean().optional().optional(), neighborhood: z.boolean().optional().optional(), street: z.boolean().optional().optional(), number: z.boolean().optional().optional(), complement: z.boolean().optional().optional(), occupation: z.boolean().optional().optional(), sexualOrientation: z.boolean().optional().optional(), civilStatus: z.boolean().optional().optional(), bloodType: z.boolean().optional().optional(), genderIdentity: z.boolean().optional().optional(), password: z.boolean().optional().optional(), userId: z.boolean().optional().optional(), user: z.union([z.boolean(),
    z.lazy(() => UserDefaultArgsObjectSchema)]).optional(), appointments: z.union([z.boolean(),
    z.lazy(() => AppointmentInputSchema.findMany)]).optional(), vaccinations: z.union([z.boolean(),
    z.lazy(() => VaccinationsInputSchema.findMany)]).optional(), allergies: z.union([z.boolean(),
    z.lazy(() => AllergiesInputSchema.findMany)]).optional(), medications: z.union([z.boolean(),
    z.lazy(() => MedicationsInputSchema.findMany)]).optional(), examResults: z.union([z.boolean(),
    z.lazy(() => ExamResultsInputSchema.findMany)]).optional(), comorbidities: z.union([z.boolean(),
    z.lazy(() => ComorbiditiesInputSchema.findMany)]).optional(), surgeries: z.union([z.boolean(),
    z.lazy(() => SurgeriesInputSchema.findMany)]).optional(), healthPlans: z.union([z.boolean(),
    z.lazy(() => HealthPlansInputSchema.findMany)]).optional(), _count: z.union([z.boolean(),
    z.lazy(() => PatientCountOutputTypeDefaultArgsObjectSchema)]).optional()
}).strict() as SchemaType;
