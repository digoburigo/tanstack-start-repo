/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { UserWhereInputObjectSchema } from './UserWhereInput.schema';
import { StringFilterObjectSchema } from './StringFilter.schema';
import { BoolFilterObjectSchema } from './BoolFilter.schema';
import { StringNullableFilterObjectSchema } from './StringNullableFilter.schema';
import { DateTimeFilterObjectSchema } from './DateTimeFilter.schema';
import { EnumUserRoleNullableFilterObjectSchema } from './EnumUserRoleNullableFilter.schema';
import { UserRoleSchema } from '../enums/UserRole.schema';
import { BoolNullableFilterObjectSchema } from './BoolNullableFilter.schema';
import { DateTimeNullableFilterObjectSchema } from './DateTimeNullableFilter.schema';
import { SessionListRelationFilterObjectSchema } from './SessionListRelationFilter.schema';
import { AccountListRelationFilterObjectSchema } from './AccountListRelationFilter.schema';
import { MemberListRelationFilterObjectSchema } from './MemberListRelationFilter.schema';
import { InvitationListRelationFilterObjectSchema } from './InvitationListRelationFilter.schema';
import { PatientListRelationFilterObjectSchema } from './PatientListRelationFilter.schema';
import { AssetListRelationFilterObjectSchema } from './AssetListRelationFilter.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.UserWhereUniqueInput>;
export const UserWhereUniqueInputObjectSchema: SchemaType = z.object({
    id: z.string().optional().optional(), email: z.string().optional().optional(), AND: z.union([z.lazy(() => UserWhereInputObjectSchema),
    z.lazy(() => UserWhereInputObjectSchema).array()]).optional(), OR: z.lazy(() => UserWhereInputObjectSchema).array().optional().optional(), NOT: z.union([z.lazy(() => UserWhereInputObjectSchema),
    z.lazy(() => UserWhereInputObjectSchema).array()]).optional(), name: z.union([z.lazy(() => StringFilterObjectSchema),
    z.string()]).optional(), emailVerified: z.union([z.lazy(() => BoolFilterObjectSchema),
    z.boolean()]).optional(), image: z.union([z.lazy(() => StringNullableFilterObjectSchema),
    z.string(),
    z.null()]).optional().nullable(), createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema),
    z.union([z.date(), z.string().datetime().optional()])]).optional(), updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema),
    z.union([z.date(), z.string().datetime().optional()])]).optional(), username: z.union([z.lazy(() => StringNullableFilterObjectSchema),
    z.string(),
    z.null()]).optional().nullable(), displayUsername: z.union([z.lazy(() => StringNullableFilterObjectSchema),
    z.string(),
    z.null()]).optional().nullable(), role: z.union([z.lazy(() => EnumUserRoleNullableFilterObjectSchema),
    z.lazy(() => UserRoleSchema),
    z.null()]).optional().nullable(), banned: z.union([z.lazy(() => BoolNullableFilterObjectSchema),
    z.boolean(),
    z.null()]).optional().nullable(), banReason: z.union([z.lazy(() => StringNullableFilterObjectSchema),
    z.string(),
    z.null()]).optional().nullable(), banExpires: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema),
    z.union([z.date(), z.string().datetime().optional()]),
    z.null()]).optional().nullable(), changePassword: z.union([z.lazy(() => BoolNullableFilterObjectSchema),
    z.boolean(),
    z.null()]).optional().nullable(), sessions: z.lazy(() => SessionListRelationFilterObjectSchema).optional().optional(), accounts: z.lazy(() => AccountListRelationFilterObjectSchema).optional().optional(), members: z.lazy(() => MemberListRelationFilterObjectSchema).optional().optional(), invitations: z.lazy(() => InvitationListRelationFilterObjectSchema).optional().optional(), patientUser: z.lazy(() => PatientListRelationFilterObjectSchema).optional().optional(), createdAssets: z.lazy(() => AssetListRelationFilterObjectSchema).optional().optional(), updatedAssets: z.lazy(() => AssetListRelationFilterObjectSchema).optional().optional(), deletedAssets: z.lazy(() => AssetListRelationFilterObjectSchema).optional().optional()
}).strict() as SchemaType;
