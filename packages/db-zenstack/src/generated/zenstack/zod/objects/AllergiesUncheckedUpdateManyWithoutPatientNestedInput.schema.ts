/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { AllergiesCreateWithoutPatientInputObjectSchema } from './AllergiesCreateWithoutPatientInput.schema';
import { AllergiesUncheckedCreateWithoutPatientInputObjectSchema } from './AllergiesUncheckedCreateWithoutPatientInput.schema';
import { AllergiesCreateOrConnectWithoutPatientInputObjectSchema } from './AllergiesCreateOrConnectWithoutPatientInput.schema';
import { AllergiesUpsertWithWhereUniqueWithoutPatientInputObjectSchema } from './AllergiesUpsertWithWhereUniqueWithoutPatientInput.schema';
import { AllergiesCreateManyPatientInputEnvelopeObjectSchema } from './AllergiesCreateManyPatientInputEnvelope.schema';
import { AllergiesWhereUniqueInputObjectSchema } from './AllergiesWhereUniqueInput.schema';
import { AllergiesUpdateWithWhereUniqueWithoutPatientInputObjectSchema } from './AllergiesUpdateWithWhereUniqueWithoutPatientInput.schema';
import { AllergiesUpdateManyWithWhereWithoutPatientInputObjectSchema } from './AllergiesUpdateManyWithWhereWithoutPatientInput.schema';
import { AllergiesScalarWhereInputObjectSchema } from './AllergiesScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.AllergiesUncheckedUpdateManyWithoutPatientNestedInput>;
export const AllergiesUncheckedUpdateManyWithoutPatientNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => AllergiesCreateWithoutPatientInputObjectSchema), z.lazy(() => AllergiesCreateWithoutPatientInputObjectSchema).array(), z.lazy(() => AllergiesUncheckedCreateWithoutPatientInputObjectSchema), z.lazy(() => AllergiesUncheckedCreateWithoutPatientInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => AllergiesCreateOrConnectWithoutPatientInputObjectSchema),
    z.lazy(() => AllergiesCreateOrConnectWithoutPatientInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => AllergiesUpsertWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => AllergiesUpsertWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), createMany: z.lazy(() => AllergiesCreateManyPatientInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => AllergiesWhereUniqueInputObjectSchema),
    z.lazy(() => AllergiesWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => AllergiesWhereUniqueInputObjectSchema),
    z.lazy(() => AllergiesWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => AllergiesWhereUniqueInputObjectSchema),
    z.lazy(() => AllergiesWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => AllergiesWhereUniqueInputObjectSchema),
    z.lazy(() => AllergiesWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => AllergiesUpdateWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => AllergiesUpdateWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => AllergiesUpdateManyWithWhereWithoutPatientInputObjectSchema),
    z.lazy(() => AllergiesUpdateManyWithWhereWithoutPatientInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => AllergiesScalarWhereInputObjectSchema),
    z.lazy(() => AllergiesScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
