/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { AppointmentCategorySchema } from '../enums/AppointmentCategory.schema';
import { AppointmentStatusSchema } from '../enums/AppointmentStatus.schema';
import { UserCreateWithoutCreatedAssetsInputObjectSchema } from './UserCreateWithoutCreatedAssetsInput.schema';
import { UserCreateWithoutUpdatedAssetsInputObjectSchema } from './UserCreateWithoutUpdatedAssetsInput.schema';
import { UserCreateWithoutDeletedAssetsInputObjectSchema } from './UserCreateWithoutDeletedAssetsInput.schema';
import { OrganizationCreateWithoutAssetsInputObjectSchema } from './OrganizationCreateWithoutAssetsInput.schema';
import { AppointmentCreateNestedOneWithoutPredecessorFollowUpInputObjectSchema } from './AppointmentCreateNestedOneWithoutPredecessorFollowUpInput.schema';
import { AppointmentCreateNestedOneWithoutFollowUpInputObjectSchema } from './AppointmentCreateNestedOneWithoutFollowUpInput.schema';
import { AppointmentCidCreateNestedManyWithoutAppointmentInputObjectSchema } from './AppointmentCidCreateNestedManyWithoutAppointmentInput.schema';
import { AllergiesCreateNestedManyWithoutAppointmentInputObjectSchema } from './AllergiesCreateNestedManyWithoutAppointmentInput.schema';
import { MedicationsCreateNestedManyWithoutAppointmentInputObjectSchema } from './MedicationsCreateNestedManyWithoutAppointmentInput.schema';
import { ComorbiditiesCreateNestedManyWithoutAppointmentInputObjectSchema } from './ComorbiditiesCreateNestedManyWithoutAppointmentInput.schema';
import { PatientCreateNestedOneWithoutAppointmentsInputObjectSchema } from './PatientCreateNestedOneWithoutAppointmentsInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.AppointmentCreateWithoutEventCalendarInput>;
export const AppointmentCreateWithoutEventCalendarInputObjectSchema: SchemaType = z.object({
    id: z.string().optional().optional(), createdAt: z.union([z.date().optional(), z.string().datetime().optional()]).optional(), updatedAt: z.union([z.date().optional(), z.string().datetime().optional()]).optional(), deletedAt: z.union([z.union([z.date(), z.string().datetime().optional()]),
    z.null()]).optional().nullable(), deleted: z.boolean().optional().optional(), motive: z.string(), subjective: z.string(), objective: z.string(), evaluation: z.string(), plan: z.string(), startDate: z.union([z.union([z.date(), z.string().datetime().optional()]),
    z.null()]).optional().nullable(), endDate: z.union([z.union([z.date(), z.string().datetime().optional()]),
    z.null()]).optional().nullable(), sickNoteDays: z.union([z.number(),
    z.null()]).optional().nullable(), category: z.union([z.lazy(() => AppointmentCategorySchema),
    z.null()]).optional().nullable(), status: z.union([z.lazy(() => AppointmentStatusSchema),
    z.null()]).optional().nullable(), createdByUser: z.lazy(() => UserCreateWithoutCreatedAssetsInputObjectSchema).optional().optional(), updatedByUser: z.lazy(() => UserCreateWithoutUpdatedAssetsInputObjectSchema).optional().optional(), deletedByUser: z.lazy(() => UserCreateWithoutDeletedAssetsInputObjectSchema).optional().optional(), organization: z.lazy(() => OrganizationCreateWithoutAssetsInputObjectSchema).optional().optional(), followUp: z.lazy(() => AppointmentCreateNestedOneWithoutPredecessorFollowUpInputObjectSchema).optional().optional(), predecessorFollowUp: z.lazy(() => AppointmentCreateNestedOneWithoutFollowUpInputObjectSchema).optional().optional(), cids: z.lazy(() => AppointmentCidCreateNestedManyWithoutAppointmentInputObjectSchema).optional().optional(), allergies: z.lazy(() => AllergiesCreateNestedManyWithoutAppointmentInputObjectSchema).optional().optional(), medications: z.lazy(() => MedicationsCreateNestedManyWithoutAppointmentInputObjectSchema).optional().optional(), comorbidities: z.lazy(() => ComorbiditiesCreateNestedManyWithoutAppointmentInputObjectSchema).optional().optional(), patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputObjectSchema)
}).strict() as SchemaType;
