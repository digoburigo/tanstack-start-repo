/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { VaccinationsCreateWithoutPatientInputObjectSchema } from './VaccinationsCreateWithoutPatientInput.schema';
import { VaccinationsUncheckedCreateWithoutPatientInputObjectSchema } from './VaccinationsUncheckedCreateWithoutPatientInput.schema';
import { VaccinationsCreateOrConnectWithoutPatientInputObjectSchema } from './VaccinationsCreateOrConnectWithoutPatientInput.schema';
import { VaccinationsUpsertWithWhereUniqueWithoutPatientInputObjectSchema } from './VaccinationsUpsertWithWhereUniqueWithoutPatientInput.schema';
import { VaccinationsCreateManyPatientInputEnvelopeObjectSchema } from './VaccinationsCreateManyPatientInputEnvelope.schema';
import { VaccinationsWhereUniqueInputObjectSchema } from './VaccinationsWhereUniqueInput.schema';
import { VaccinationsUpdateWithWhereUniqueWithoutPatientInputObjectSchema } from './VaccinationsUpdateWithWhereUniqueWithoutPatientInput.schema';
import { VaccinationsUpdateManyWithWhereWithoutPatientInputObjectSchema } from './VaccinationsUpdateManyWithWhereWithoutPatientInput.schema';
import { VaccinationsScalarWhereInputObjectSchema } from './VaccinationsScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.VaccinationsUpdateManyWithoutPatientNestedInput>;
export const VaccinationsUpdateManyWithoutPatientNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => VaccinationsCreateWithoutPatientInputObjectSchema), z.lazy(() => VaccinationsCreateWithoutPatientInputObjectSchema).array(), z.lazy(() => VaccinationsUncheckedCreateWithoutPatientInputObjectSchema), z.lazy(() => VaccinationsUncheckedCreateWithoutPatientInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => VaccinationsCreateOrConnectWithoutPatientInputObjectSchema),
    z.lazy(() => VaccinationsCreateOrConnectWithoutPatientInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => VaccinationsUpsertWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => VaccinationsUpsertWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), createMany: z.lazy(() => VaccinationsCreateManyPatientInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => VaccinationsUpdateWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => VaccinationsUpdateWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => VaccinationsUpdateManyWithWhereWithoutPatientInputObjectSchema),
    z.lazy(() => VaccinationsUpdateManyWithWhereWithoutPatientInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => VaccinationsScalarWhereInputObjectSchema),
    z.lazy(() => VaccinationsScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
