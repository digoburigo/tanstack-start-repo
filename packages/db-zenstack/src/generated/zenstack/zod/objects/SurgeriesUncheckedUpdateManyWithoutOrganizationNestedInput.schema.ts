/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SurgeriesCreateWithoutOrganizationInputObjectSchema } from './SurgeriesCreateWithoutOrganizationInput.schema';
import { SurgeriesUncheckedCreateWithoutOrganizationInputObjectSchema } from './SurgeriesUncheckedCreateWithoutOrganizationInput.schema';
import { SurgeriesCreateOrConnectWithoutOrganizationInputObjectSchema } from './SurgeriesCreateOrConnectWithoutOrganizationInput.schema';
import { SurgeriesUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema } from './SurgeriesUpsertWithWhereUniqueWithoutOrganizationInput.schema';
import { SurgeriesCreateManyOrganizationInputEnvelopeObjectSchema } from './SurgeriesCreateManyOrganizationInputEnvelope.schema';
import { SurgeriesWhereUniqueInputObjectSchema } from './SurgeriesWhereUniqueInput.schema';
import { SurgeriesUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema } from './SurgeriesUpdateWithWhereUniqueWithoutOrganizationInput.schema';
import { SurgeriesUpdateManyWithWhereWithoutOrganizationInputObjectSchema } from './SurgeriesUpdateManyWithWhereWithoutOrganizationInput.schema';
import { SurgeriesScalarWhereInputObjectSchema } from './SurgeriesScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.SurgeriesUncheckedUpdateManyWithoutOrganizationNestedInput>;
export const SurgeriesUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => SurgeriesCreateWithoutOrganizationInputObjectSchema), z.lazy(() => SurgeriesCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => SurgeriesUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => SurgeriesUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => SurgeriesCreateOrConnectWithoutOrganizationInputObjectSchema),
    z.lazy(() => SurgeriesCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => SurgeriesUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => SurgeriesUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), createMany: z.lazy(() => SurgeriesCreateManyOrganizationInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => SurgeriesUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => SurgeriesUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => SurgeriesUpdateManyWithWhereWithoutOrganizationInputObjectSchema),
    z.lazy(() => SurgeriesUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => SurgeriesScalarWhereInputObjectSchema),
    z.lazy(() => SurgeriesScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
