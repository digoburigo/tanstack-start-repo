/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { VaccinationsCreateWithoutOrganizationInputObjectSchema } from './VaccinationsCreateWithoutOrganizationInput.schema';
import { VaccinationsUncheckedCreateWithoutOrganizationInputObjectSchema } from './VaccinationsUncheckedCreateWithoutOrganizationInput.schema';
import { VaccinationsCreateOrConnectWithoutOrganizationInputObjectSchema } from './VaccinationsCreateOrConnectWithoutOrganizationInput.schema';
import { VaccinationsUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema } from './VaccinationsUpsertWithWhereUniqueWithoutOrganizationInput.schema';
import { VaccinationsCreateManyOrganizationInputEnvelopeObjectSchema } from './VaccinationsCreateManyOrganizationInputEnvelope.schema';
import { VaccinationsWhereUniqueInputObjectSchema } from './VaccinationsWhereUniqueInput.schema';
import { VaccinationsUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema } from './VaccinationsUpdateWithWhereUniqueWithoutOrganizationInput.schema';
import { VaccinationsUpdateManyWithWhereWithoutOrganizationInputObjectSchema } from './VaccinationsUpdateManyWithWhereWithoutOrganizationInput.schema';
import { VaccinationsScalarWhereInputObjectSchema } from './VaccinationsScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.VaccinationsUncheckedUpdateManyWithoutOrganizationNestedInput>;
export const VaccinationsUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => VaccinationsCreateWithoutOrganizationInputObjectSchema), z.lazy(() => VaccinationsCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => VaccinationsUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => VaccinationsUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => VaccinationsCreateOrConnectWithoutOrganizationInputObjectSchema),
    z.lazy(() => VaccinationsCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => VaccinationsUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => VaccinationsUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), createMany: z.lazy(() => VaccinationsCreateManyOrganizationInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => VaccinationsWhereUniqueInputObjectSchema),
    z.lazy(() => VaccinationsWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => VaccinationsUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema),
    z.lazy(() => VaccinationsUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => VaccinationsUpdateManyWithWhereWithoutOrganizationInputObjectSchema),
    z.lazy(() => VaccinationsUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => VaccinationsScalarWhereInputObjectSchema),
    z.lazy(() => VaccinationsScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
