/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SurgeriesCreateWithoutDeletedByUserInputObjectSchema } from './SurgeriesCreateWithoutDeletedByUserInput.schema';
import { SurgeriesUncheckedCreateWithoutDeletedByUserInputObjectSchema } from './SurgeriesUncheckedCreateWithoutDeletedByUserInput.schema';
import { SurgeriesCreateOrConnectWithoutDeletedByUserInputObjectSchema } from './SurgeriesCreateOrConnectWithoutDeletedByUserInput.schema';
import { SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInputObjectSchema } from './SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInput.schema';
import { SurgeriesCreateManyDeletedByUserInputEnvelopeObjectSchema } from './SurgeriesCreateManyDeletedByUserInputEnvelope.schema';
import { SurgeriesWhereUniqueInputObjectSchema } from './SurgeriesWhereUniqueInput.schema';
import { SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInputObjectSchema } from './SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInput.schema';
import { SurgeriesUpdateManyWithWhereWithoutDeletedByUserInputObjectSchema } from './SurgeriesUpdateManyWithWhereWithoutDeletedByUserInput.schema';
import { SurgeriesScalarWhereInputObjectSchema } from './SurgeriesScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.SurgeriesUpdateManyWithoutDeletedByUserNestedInput>;
export const SurgeriesUpdateManyWithoutDeletedByUserNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => SurgeriesCreateWithoutDeletedByUserInputObjectSchema), z.lazy(() => SurgeriesCreateWithoutDeletedByUserInputObjectSchema).array(), z.lazy(() => SurgeriesUncheckedCreateWithoutDeletedByUserInputObjectSchema), z.lazy(() => SurgeriesUncheckedCreateWithoutDeletedByUserInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => SurgeriesCreateOrConnectWithoutDeletedByUserInputObjectSchema),
    z.lazy(() => SurgeriesCreateOrConnectWithoutDeletedByUserInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInputObjectSchema),
    z.lazy(() => SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInputObjectSchema).array()]).optional(), createMany: z.lazy(() => SurgeriesCreateManyDeletedByUserInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInputObjectSchema),
    z.lazy(() => SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => SurgeriesUpdateManyWithWhereWithoutDeletedByUserInputObjectSchema),
    z.lazy(() => SurgeriesUpdateManyWithWhereWithoutDeletedByUserInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => SurgeriesScalarWhereInputObjectSchema),
    z.lazy(() => SurgeriesScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
