/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SurgeriesCreateWithoutPatientInputObjectSchema } from './SurgeriesCreateWithoutPatientInput.schema';
import { SurgeriesUncheckedCreateWithoutPatientInputObjectSchema } from './SurgeriesUncheckedCreateWithoutPatientInput.schema';
import { SurgeriesCreateOrConnectWithoutPatientInputObjectSchema } from './SurgeriesCreateOrConnectWithoutPatientInput.schema';
import { SurgeriesUpsertWithWhereUniqueWithoutPatientInputObjectSchema } from './SurgeriesUpsertWithWhereUniqueWithoutPatientInput.schema';
import { SurgeriesCreateManyPatientInputEnvelopeObjectSchema } from './SurgeriesCreateManyPatientInputEnvelope.schema';
import { SurgeriesWhereUniqueInputObjectSchema } from './SurgeriesWhereUniqueInput.schema';
import { SurgeriesUpdateWithWhereUniqueWithoutPatientInputObjectSchema } from './SurgeriesUpdateWithWhereUniqueWithoutPatientInput.schema';
import { SurgeriesUpdateManyWithWhereWithoutPatientInputObjectSchema } from './SurgeriesUpdateManyWithWhereWithoutPatientInput.schema';
import { SurgeriesScalarWhereInputObjectSchema } from './SurgeriesScalarWhereInput.schema';

import type { Prisma } from '../../models';

type SchemaType = z.ZodType<Prisma.SurgeriesUpdateManyWithoutPatientNestedInput>;
export const SurgeriesUpdateManyWithoutPatientNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => SurgeriesCreateWithoutPatientInputObjectSchema), z.lazy(() => SurgeriesCreateWithoutPatientInputObjectSchema).array(), z.lazy(() => SurgeriesUncheckedCreateWithoutPatientInputObjectSchema), z.lazy(() => SurgeriesUncheckedCreateWithoutPatientInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => SurgeriesCreateOrConnectWithoutPatientInputObjectSchema),
    z.lazy(() => SurgeriesCreateOrConnectWithoutPatientInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => SurgeriesUpsertWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => SurgeriesUpsertWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), createMany: z.lazy(() => SurgeriesCreateManyPatientInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => SurgeriesWhereUniqueInputObjectSchema),
    z.lazy(() => SurgeriesWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => SurgeriesUpdateWithWhereUniqueWithoutPatientInputObjectSchema),
    z.lazy(() => SurgeriesUpdateWithWhereUniqueWithoutPatientInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => SurgeriesUpdateManyWithWhereWithoutPatientInputObjectSchema),
    z.lazy(() => SurgeriesUpdateManyWithWhereWithoutPatientInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => SurgeriesScalarWhereInputObjectSchema),
    z.lazy(() => SurgeriesScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
