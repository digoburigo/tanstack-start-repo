/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { SexSchema } from '../enums/Sex.schema';
import { RaceSchema } from '../enums/Race.schema';
import { CivilStatusSchema } from '../enums/CivilStatus.schema';
import { BloodTypeSchema } from '../enums/BloodType.schema';
import { GenderIdentitySchema } from '../enums/GenderIdentity.schema';
const baseSchema = z.object({
    id: z.string(),
    type: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    deletedAt: z.coerce.date().nullish(),
    deleted: z.boolean().default(false),
    name: z.string(),
    cpf: z.string(),
    cellphone: z.string(),
    email: z.string(),
    sex: SexSchema.nullish(),
    responsible: z.string().nullish(),
    nationality: z.string(),
    race: RaceSchema.nullish(),
    state: z.string(),
    city: z.string(),
    zipcode: z.string(),
    neighborhood: z.string(),
    street: z.string(),
    number: z.string(),
    complement: z.string().nullish(),
    occupation: z.string(),
    sexualOrientation: z.string().nullish(),
    civilStatus: CivilStatusSchema.nullish(),
    bloodType: BloodTypeSchema.nullish(),
    genderIdentity: GenderIdentitySchema.nullish(),
    password: z.string().nullish(),
}
).strict();
const relationSchema = z.object({
    createdByUser: z.record(z.unknown()).optional(),
    updatedByUser: z.record(z.unknown()).optional(),
    deletedByUser: z.record(z.unknown()).optional(),
    organization: z.record(z.unknown()).optional(),
    user: z.record(z.unknown()).optional(),
    appointments: z.array(z.unknown()).optional(),
    vaccinations: z.array(z.unknown()).optional(),
    allergies: z.array(z.unknown()).optional(),
    medications: z.array(z.unknown()).optional(),
    examResults: z.array(z.unknown()).optional(),
    comorbidities: z.array(z.unknown()).optional(),
    surgeries: z.array(z.unknown()).optional(),
    healthPlans: z.array(z.unknown()).optional(),
}
);
const fkSchema = z.object({
    createdById: z.string().nullish(),
    updatedById: z.string().nullish(),
    deletedById: z.string().nullish(),
    organizationId: z.string().nullish(),
    userId: z.string().nullish(),
}
);

/**
 * `Patient` schema excluding foreign keys and relations.
 */
export const PatientScalarSchema = baseSchema.omit({
    deleted: true,
});


/**
 * `Patient` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const PatientSchema = PatientScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const PatientPrismaCreateSchema = baseSchema.omit({ type: true }).partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const PatientPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    deletedAt: z.coerce.date().nullish(),
    deleted: z.boolean().default(false),
    name: z.string(),
    cpf: z.string(),
    cellphone: z.string(),
    email: z.string(),
    sex: SexSchema.nullish(),
    responsible: z.string().nullish(),
    nationality: z.string(),
    race: RaceSchema.nullish(),
    state: z.string(),
    city: z.string(),
    zipcode: z.string(),
    neighborhood: z.string(),
    street: z.string(),
    number: z.string(),
    complement: z.string().nullish(),
    occupation: z.string(),
    sexualOrientation: z.string().nullish(),
    civilStatus: CivilStatusSchema.nullish(),
    bloodType: BloodTypeSchema.nullish(),
    genderIdentity: GenderIdentitySchema.nullish(),
    password: z.string().nullish()
}).partial().passthrough();


/**
 * `Patient` schema for create operations excluding foreign keys and relations.
 */
export const PatientCreateScalarSchema = baseSchema.omit({ type: true }).partial({
    id: true, createdAt: true, updatedAt: true, deleted: true
});


/**
 * `Patient` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const PatientCreateSchema = PatientCreateScalarSchema.merge(fkSchema);


/**
 * `Patient` schema for update operations excluding foreign keys and relations.
 */
export const PatientUpdateScalarSchema = baseSchema.omit({ type: true }).partial();


/**
 * `Patient` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const PatientUpdateSchema = PatientUpdateScalarSchema.merge(fkSchema.partial());

