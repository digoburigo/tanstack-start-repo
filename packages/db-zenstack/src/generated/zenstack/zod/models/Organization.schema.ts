/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string().nullish(),
    logo: z.string().nullish(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    metadata: z.string().nullish(),
}
).strict();
const relationSchema = z.object({
    members: z.array(z.unknown()).optional(),
    invitations: z.array(z.unknown()).optional(),
    assets: z.array(z.unknown()).optional(),
}
);

/**
 * `Organization` schema excluding foreign keys and relations.
 */
export const OrganizationScalarSchema = baseSchema;


/**
 * `Organization` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const OrganizationSchema = OrganizationScalarSchema.merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const OrganizationPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const OrganizationPrismaUpdateSchema = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string().nullish(),
    logo: z.string().nullish(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    metadata: z.string().nullish()
}).partial().passthrough();


/**
 * `Organization` schema for create operations excluding foreign keys and relations.
 */
export const OrganizationCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true
});


/**
 * `Organization` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const OrganizationCreateSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true
});


/**
 * `Organization` schema for update operations excluding foreign keys and relations.
 */
export const OrganizationUpdateScalarSchema = baseSchema.partial();


/**
 * `Organization` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const OrganizationUpdateSchema = OrganizationUpdateScalarSchema;

