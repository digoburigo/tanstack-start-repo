/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    type: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    deletedAt: z.coerce.date().nullish(),
    deleted: z.boolean().default(false),
}
).strict();
const relationSchema = z.object({
    createdByUser: z.record(z.unknown()).optional(),
    updatedByUser: z.record(z.unknown()).optional(),
    deletedByUser: z.record(z.unknown()).optional(),
    organization: z.record(z.unknown()).optional(),
    patient: z.record(z.unknown()),
    vaccinationsValues: z.record(z.unknown()),
}
);
const fkSchema = z.object({
    createdById: z.string().nullish(),
    updatedById: z.string().nullish(),
    deletedById: z.string().nullish(),
    organizationId: z.string().nullish(),
    patientId: z.string(),
    vaccinationsValuesId: z.string(),
}
);

/**
 * `Vaccinations` schema excluding foreign keys and relations.
 */
export const VaccinationsScalarSchema = baseSchema.omit({
    deleted: true,
});


/**
 * `Vaccinations` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const VaccinationsSchema = VaccinationsScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const VaccinationsPrismaCreateSchema = baseSchema.omit({ type: true }).partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const VaccinationsPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    deletedAt: z.coerce.date().nullish(),
    deleted: z.boolean().default(false)
}).partial().passthrough();


/**
 * `Vaccinations` schema for create operations excluding foreign keys and relations.
 */
export const VaccinationsCreateScalarSchema = baseSchema.omit({ type: true }).partial({
    id: true, createdAt: true, updatedAt: true, deleted: true
});


/**
 * `Vaccinations` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const VaccinationsCreateSchema = VaccinationsCreateScalarSchema.merge(fkSchema);


/**
 * `Vaccinations` schema for update operations excluding foreign keys and relations.
 */
export const VaccinationsUpdateScalarSchema = baseSchema.omit({ type: true }).partial();


/**
 * `Vaccinations` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const VaccinationsUpdateSchema = VaccinationsUpdateScalarSchema.merge(fkSchema.partial());

