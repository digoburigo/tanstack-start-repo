/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { UserRole } from '../../models';
import { UserRoleSchema } from '../enums/UserRole.schema';
const baseSchema = z.object({
    id: z.string(),
    name: z.string(),
    email: z.string(),
    emailVerified: z.boolean(),
    image: z.string().nullish(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    username: z.string().nullish(),
    displayUsername: z.string().nullish(),
    role: UserRoleSchema.nullish(),
    banned: z.boolean().nullish(),
    banReason: z.string().nullish(),
    banExpires: z.coerce.date().nullish(),
    changePassword: z.boolean().default(false).nullish(),
}
).strict();
const relationSchema = z.object({
    sessions: z.array(z.unknown()).optional(),
    accounts: z.array(z.unknown()).optional(),
    members: z.array(z.unknown()).optional(),
    invitations: z.array(z.unknown()).optional(),
    patientUser: z.array(z.unknown()).optional(),
    createdAssets: z.array(z.unknown()).optional(),
    updatedAssets: z.array(z.unknown()).optional(),
    deletedAssets: z.array(z.unknown()).optional(),
}
);

/**
 * `User` schema excluding foreign keys and relations.
 */
export const UserScalarSchema = baseSchema;


/**
 * `User` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const UserSchema = UserScalarSchema.merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const UserPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const UserPrismaUpdateSchema = z.object({
    id: z.string(),
    name: z.string(),
    email: z.string(),
    emailVerified: z.boolean(),
    image: z.string().nullish(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    username: z.string().nullish(),
    displayUsername: z.string().nullish(),
    role: UserRoleSchema.nullish(),
    banned: z.boolean().nullish(),
    banReason: z.string().nullish(),
    banExpires: z.coerce.date().nullish(),
    changePassword: z.boolean().default(false).nullish()
}).partial().passthrough();


/**
 * `User` schema for create operations excluding foreign keys and relations.
 */
export const UserCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, role: true, changePassword: true
});


/**
 * `User` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const UserCreateSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, role: true, changePassword: true
});


/**
 * `User` schema for update operations excluding foreign keys and relations.
 */
export const UserUpdateScalarSchema = baseSchema.partial();


/**
 * `User` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const UserUpdateSchema = UserUpdateScalarSchema;

