/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { OrganizationSelectObjectSchema } from '../objects/OrganizationSelect.schema';
import { OrganizationIncludeObjectSchema } from '../objects/OrganizationInclude.schema';
import { OrganizationWhereUniqueInputObjectSchema } from '../objects/OrganizationWhereUniqueInput.schema';
import { OrganizationWhereInputObjectSchema } from '../objects/OrganizationWhereInput.schema';
import { OrganizationOrderByWithRelationInputObjectSchema } from '../objects/OrganizationOrderByWithRelationInput.schema';
import { OrganizationScalarFieldEnumSchema } from '../enums/OrganizationScalarFieldEnum.schema';
import { OrganizationCreateInputObjectSchema } from '../objects/OrganizationCreateInput.schema';
import { OrganizationUncheckedCreateInputObjectSchema } from '../objects/OrganizationUncheckedCreateInput.schema';
import { OrganizationCreateManyInputObjectSchema } from '../objects/OrganizationCreateManyInput.schema';
import { OrganizationUpdateInputObjectSchema } from '../objects/OrganizationUpdateInput.schema';
import { OrganizationUncheckedUpdateInputObjectSchema } from '../objects/OrganizationUncheckedUpdateInput.schema';
import { OrganizationUpdateManyMutationInputObjectSchema } from '../objects/OrganizationUpdateManyMutationInput.schema';
import { OrganizationUncheckedUpdateManyInputObjectSchema } from '../objects/OrganizationUncheckedUpdateManyInput.schema';
import { OrganizationCountAggregateInputObjectSchema } from '../objects/OrganizationCountAggregateInput.schema';
import { OrganizationMinAggregateInputObjectSchema } from '../objects/OrganizationMinAggregateInput.schema';
import { OrganizationMaxAggregateInputObjectSchema } from '../objects/OrganizationMaxAggregateInput.schema';
import { OrganizationOrderByWithAggregationInputObjectSchema } from '../objects/OrganizationOrderByWithAggregationInput.schema';
import { OrganizationScalarWhereWithAggregatesInputObjectSchema } from '../objects/OrganizationScalarWhereWithAggregatesInput.schema'

type OrganizationInputSchemaType = {
    findUnique: z.ZodType<Prisma.OrganizationFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.OrganizationFindFirstArgs>,
    findMany: z.ZodType<Prisma.OrganizationFindManyArgs>,
    create: z.ZodType<Prisma.OrganizationCreateArgs>,
    createMany: z.ZodType<Prisma.OrganizationCreateManyArgs>,
    delete: z.ZodType<Prisma.OrganizationDeleteArgs>,
    deleteMany: z.ZodType<Prisma.OrganizationDeleteManyArgs>,
    update: z.ZodType<Prisma.OrganizationUpdateArgs>,
    updateMany: z.ZodType<Prisma.OrganizationUpdateManyArgs>,
    upsert: z.ZodType<Prisma.OrganizationUpsertArgs>,
    aggregate: z.ZodType<Prisma.OrganizationAggregateArgs>,
    groupBy: z.ZodType<Prisma.OrganizationGroupByArgs>,
    count: z.ZodType<Prisma.OrganizationCountArgs>
}

export const OrganizationInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), where: OrganizationWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), where: OrganizationWhereInputObjectSchema.optional(), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(OrganizationScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), where: OrganizationWhereInputObjectSchema.optional(), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(OrganizationScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), data: z.union([OrganizationCreateInputObjectSchema, OrganizationUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([OrganizationCreateManyInputObjectSchema, z.array(OrganizationCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), where: OrganizationWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: OrganizationWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), data: z.union([OrganizationUpdateInputObjectSchema, OrganizationUncheckedUpdateInputObjectSchema]), where: OrganizationWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([OrganizationUpdateManyMutationInputObjectSchema, OrganizationUncheckedUpdateManyInputObjectSchema]), where: OrganizationWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => OrganizationSelectObjectSchema.optional()), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), where: OrganizationWhereUniqueInputObjectSchema, create: z.union([OrganizationCreateInputObjectSchema, OrganizationUncheckedCreateInputObjectSchema]), update: z.union([OrganizationUpdateInputObjectSchema, OrganizationUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: OrganizationWhereInputObjectSchema.optional(), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), OrganizationCountAggregateInputObjectSchema]).optional(), _min: OrganizationMinAggregateInputObjectSchema.optional(), _max: OrganizationMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: OrganizationWhereInputObjectSchema.optional(), orderBy: z.union([OrganizationOrderByWithAggregationInputObjectSchema, OrganizationOrderByWithAggregationInputObjectSchema.array()]).optional(), having: OrganizationScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(OrganizationScalarFieldEnumSchema), _count: z.union([z.literal(true), OrganizationCountAggregateInputObjectSchema]).optional(), _min: OrganizationMinAggregateInputObjectSchema.optional(), _max: OrganizationMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: OrganizationWhereInputObjectSchema.optional(), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(OrganizationScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), OrganizationCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as OrganizationInputSchemaType;
