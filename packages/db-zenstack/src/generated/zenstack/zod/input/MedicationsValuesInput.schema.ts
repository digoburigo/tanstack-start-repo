/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { MedicationsValuesSelectObjectSchema } from '../objects/MedicationsValuesSelect.schema';
import { MedicationsValuesIncludeObjectSchema } from '../objects/MedicationsValuesInclude.schema';
import { MedicationsValuesWhereUniqueInputObjectSchema } from '../objects/MedicationsValuesWhereUniqueInput.schema';
import { MedicationsValuesWhereInputObjectSchema } from '../objects/MedicationsValuesWhereInput.schema';
import { MedicationsValuesOrderByWithRelationInputObjectSchema } from '../objects/MedicationsValuesOrderByWithRelationInput.schema';
import { MedicationsValuesScalarFieldEnumSchema } from '../enums/MedicationsValuesScalarFieldEnum.schema';
import { MedicationsValuesCreateInputObjectSchema } from '../objects/MedicationsValuesCreateInput.schema';
import { MedicationsValuesUncheckedCreateInputObjectSchema } from '../objects/MedicationsValuesUncheckedCreateInput.schema';
import { MedicationsValuesCreateManyInputObjectSchema } from '../objects/MedicationsValuesCreateManyInput.schema';
import { MedicationsValuesUpdateInputObjectSchema } from '../objects/MedicationsValuesUpdateInput.schema';
import { MedicationsValuesUncheckedUpdateInputObjectSchema } from '../objects/MedicationsValuesUncheckedUpdateInput.schema';
import { MedicationsValuesUpdateManyMutationInputObjectSchema } from '../objects/MedicationsValuesUpdateManyMutationInput.schema';
import { MedicationsValuesUncheckedUpdateManyInputObjectSchema } from '../objects/MedicationsValuesUncheckedUpdateManyInput.schema';
import { MedicationsValuesCountAggregateInputObjectSchema } from '../objects/MedicationsValuesCountAggregateInput.schema';
import { MedicationsValuesMinAggregateInputObjectSchema } from '../objects/MedicationsValuesMinAggregateInput.schema';
import { MedicationsValuesMaxAggregateInputObjectSchema } from '../objects/MedicationsValuesMaxAggregateInput.schema';
import { MedicationsValuesOrderByWithAggregationInputObjectSchema } from '../objects/MedicationsValuesOrderByWithAggregationInput.schema';
import { MedicationsValuesScalarWhereWithAggregatesInputObjectSchema } from '../objects/MedicationsValuesScalarWhereWithAggregatesInput.schema'

type MedicationsValuesInputSchemaType = {
    findUnique: z.ZodType<Prisma.MedicationsValuesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.MedicationsValuesFindFirstArgs>,
    findMany: z.ZodType<Prisma.MedicationsValuesFindManyArgs>,
    create: z.ZodType<Prisma.MedicationsValuesCreateArgs>,
    createMany: z.ZodType<Prisma.MedicationsValuesCreateManyArgs>,
    delete: z.ZodType<Prisma.MedicationsValuesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.MedicationsValuesDeleteManyArgs>,
    update: z.ZodType<Prisma.MedicationsValuesUpdateArgs>,
    updateMany: z.ZodType<Prisma.MedicationsValuesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.MedicationsValuesUpsertArgs>,
    aggregate: z.ZodType<Prisma.MedicationsValuesAggregateArgs>,
    groupBy: z.ZodType<Prisma.MedicationsValuesGroupByArgs>,
    count: z.ZodType<Prisma.MedicationsValuesCountArgs>
}

export const MedicationsValuesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), where: MedicationsValuesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), where: MedicationsValuesWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsValuesOrderByWithRelationInputObjectSchema, MedicationsValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(MedicationsValuesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), where: MedicationsValuesWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsValuesOrderByWithRelationInputObjectSchema, MedicationsValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(MedicationsValuesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), data: z.union([MedicationsValuesCreateInputObjectSchema, MedicationsValuesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([MedicationsValuesCreateManyInputObjectSchema, z.array(MedicationsValuesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), where: MedicationsValuesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: MedicationsValuesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), data: z.union([MedicationsValuesUpdateInputObjectSchema, MedicationsValuesUncheckedUpdateInputObjectSchema]), where: MedicationsValuesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([MedicationsValuesUpdateManyMutationInputObjectSchema, MedicationsValuesUncheckedUpdateManyInputObjectSchema]), where: MedicationsValuesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => MedicationsValuesSelectObjectSchema.optional()), include: z.lazy(() => MedicationsValuesIncludeObjectSchema.optional()), where: MedicationsValuesWhereUniqueInputObjectSchema, create: z.union([MedicationsValuesCreateInputObjectSchema, MedicationsValuesUncheckedCreateInputObjectSchema]), update: z.union([MedicationsValuesUpdateInputObjectSchema, MedicationsValuesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: MedicationsValuesWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsValuesOrderByWithRelationInputObjectSchema, MedicationsValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), MedicationsValuesCountAggregateInputObjectSchema]).optional(), _min: MedicationsValuesMinAggregateInputObjectSchema.optional(), _max: MedicationsValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: MedicationsValuesWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsValuesOrderByWithAggregationInputObjectSchema, MedicationsValuesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: MedicationsValuesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(MedicationsValuesScalarFieldEnumSchema), _count: z.union([z.literal(true), MedicationsValuesCountAggregateInputObjectSchema]).optional(), _min: MedicationsValuesMinAggregateInputObjectSchema.optional(), _max: MedicationsValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: MedicationsValuesWhereInputObjectSchema.optional(), orderBy: z.union([MedicationsValuesOrderByWithRelationInputObjectSchema, MedicationsValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MedicationsValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(MedicationsValuesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), MedicationsValuesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as MedicationsValuesInputSchemaType;
