/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { CidSelectObjectSchema } from '../objects/CidSelect.schema';
import { CidIncludeObjectSchema } from '../objects/CidInclude.schema';
import { CidWhereUniqueInputObjectSchema } from '../objects/CidWhereUniqueInput.schema';
import { CidWhereInputObjectSchema } from '../objects/CidWhereInput.schema';
import { CidOrderByWithRelationInputObjectSchema } from '../objects/CidOrderByWithRelationInput.schema';
import { CidScalarFieldEnumSchema } from '../enums/CidScalarFieldEnum.schema';
import { CidCreateInputObjectSchema } from '../objects/CidCreateInput.schema';
import { CidUncheckedCreateInputObjectSchema } from '../objects/CidUncheckedCreateInput.schema';
import { CidCreateManyInputObjectSchema } from '../objects/CidCreateManyInput.schema';
import { CidUpdateInputObjectSchema } from '../objects/CidUpdateInput.schema';
import { CidUncheckedUpdateInputObjectSchema } from '../objects/CidUncheckedUpdateInput.schema';
import { CidUpdateManyMutationInputObjectSchema } from '../objects/CidUpdateManyMutationInput.schema';
import { CidUncheckedUpdateManyInputObjectSchema } from '../objects/CidUncheckedUpdateManyInput.schema';
import { CidCountAggregateInputObjectSchema } from '../objects/CidCountAggregateInput.schema';
import { CidMinAggregateInputObjectSchema } from '../objects/CidMinAggregateInput.schema';
import { CidMaxAggregateInputObjectSchema } from '../objects/CidMaxAggregateInput.schema';
import { CidOrderByWithAggregationInputObjectSchema } from '../objects/CidOrderByWithAggregationInput.schema';
import { CidScalarWhereWithAggregatesInputObjectSchema } from '../objects/CidScalarWhereWithAggregatesInput.schema'

type CidInputSchemaType = {
    findUnique: z.ZodType<Prisma.CidFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.CidFindFirstArgs>,
    findMany: z.ZodType<Prisma.CidFindManyArgs>,
    create: z.ZodType<Prisma.CidCreateArgs>,
    createMany: z.ZodType<Prisma.CidCreateManyArgs>,
    delete: z.ZodType<Prisma.CidDeleteArgs>,
    deleteMany: z.ZodType<Prisma.CidDeleteManyArgs>,
    update: z.ZodType<Prisma.CidUpdateArgs>,
    updateMany: z.ZodType<Prisma.CidUpdateManyArgs>,
    upsert: z.ZodType<Prisma.CidUpsertArgs>,
    aggregate: z.ZodType<Prisma.CidAggregateArgs>,
    groupBy: z.ZodType<Prisma.CidGroupByArgs>,
    count: z.ZodType<Prisma.CidCountArgs>
}

export const CidInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), where: CidWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), where: CidWhereInputObjectSchema.optional(), orderBy: z.union([CidOrderByWithRelationInputObjectSchema, CidOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: CidWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(CidScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), where: CidWhereInputObjectSchema.optional(), orderBy: z.union([CidOrderByWithRelationInputObjectSchema, CidOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: CidWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(CidScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), data: z.union([CidCreateInputObjectSchema, CidUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([CidCreateManyInputObjectSchema, z.array(CidCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), where: CidWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: CidWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), data: z.union([CidUpdateInputObjectSchema, CidUncheckedUpdateInputObjectSchema]), where: CidWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([CidUpdateManyMutationInputObjectSchema, CidUncheckedUpdateManyInputObjectSchema]), where: CidWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => CidSelectObjectSchema.optional()), include: z.lazy(() => CidIncludeObjectSchema.optional()), where: CidWhereUniqueInputObjectSchema, create: z.union([CidCreateInputObjectSchema, CidUncheckedCreateInputObjectSchema]), update: z.union([CidUpdateInputObjectSchema, CidUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: CidWhereInputObjectSchema.optional(), orderBy: z.union([CidOrderByWithRelationInputObjectSchema, CidOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: CidWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), CidCountAggregateInputObjectSchema]).optional(), _min: CidMinAggregateInputObjectSchema.optional(), _max: CidMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: CidWhereInputObjectSchema.optional(), orderBy: z.union([CidOrderByWithAggregationInputObjectSchema, CidOrderByWithAggregationInputObjectSchema.array()]).optional(), having: CidScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(CidScalarFieldEnumSchema), _count: z.union([z.literal(true), CidCountAggregateInputObjectSchema]).optional(), _min: CidMinAggregateInputObjectSchema.optional(), _max: CidMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: CidWhereInputObjectSchema.optional(), orderBy: z.union([CidOrderByWithRelationInputObjectSchema, CidOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: CidWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(CidScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), CidCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as CidInputSchemaType;
