/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { SurgeriesSelectObjectSchema } from '../objects/SurgeriesSelect.schema';
import { SurgeriesIncludeObjectSchema } from '../objects/SurgeriesInclude.schema';
import { SurgeriesWhereUniqueInputObjectSchema } from '../objects/SurgeriesWhereUniqueInput.schema';
import { SurgeriesWhereInputObjectSchema } from '../objects/SurgeriesWhereInput.schema';
import { SurgeriesOrderByWithRelationInputObjectSchema } from '../objects/SurgeriesOrderByWithRelationInput.schema';
import { SurgeriesScalarFieldEnumSchema } from '../enums/SurgeriesScalarFieldEnum.schema';
import { SurgeriesCreateInputObjectSchema } from '../objects/SurgeriesCreateInput.schema';
import { SurgeriesUncheckedCreateInputObjectSchema } from '../objects/SurgeriesUncheckedCreateInput.schema';
import { SurgeriesCreateManyInputObjectSchema } from '../objects/SurgeriesCreateManyInput.schema';
import { SurgeriesUpdateInputObjectSchema } from '../objects/SurgeriesUpdateInput.schema';
import { SurgeriesUncheckedUpdateInputObjectSchema } from '../objects/SurgeriesUncheckedUpdateInput.schema';
import { SurgeriesUpdateManyMutationInputObjectSchema } from '../objects/SurgeriesUpdateManyMutationInput.schema';
import { SurgeriesUncheckedUpdateManyInputObjectSchema } from '../objects/SurgeriesUncheckedUpdateManyInput.schema';
import { SurgeriesCountAggregateInputObjectSchema } from '../objects/SurgeriesCountAggregateInput.schema';
import { SurgeriesMinAggregateInputObjectSchema } from '../objects/SurgeriesMinAggregateInput.schema';
import { SurgeriesMaxAggregateInputObjectSchema } from '../objects/SurgeriesMaxAggregateInput.schema';
import { SurgeriesOrderByWithAggregationInputObjectSchema } from '../objects/SurgeriesOrderByWithAggregationInput.schema';
import { SurgeriesScalarWhereWithAggregatesInputObjectSchema } from '../objects/SurgeriesScalarWhereWithAggregatesInput.schema'

type SurgeriesInputSchemaType = {
    findUnique: z.ZodType<Prisma.SurgeriesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.SurgeriesFindFirstArgs>,
    findMany: z.ZodType<Prisma.SurgeriesFindManyArgs>,
    create: z.ZodType<Prisma.SurgeriesCreateArgs>,
    createMany: z.ZodType<Prisma.SurgeriesCreateManyArgs>,
    delete: z.ZodType<Prisma.SurgeriesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.SurgeriesDeleteManyArgs>,
    update: z.ZodType<Prisma.SurgeriesUpdateArgs>,
    updateMany: z.ZodType<Prisma.SurgeriesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.SurgeriesUpsertArgs>,
    aggregate: z.ZodType<Prisma.SurgeriesAggregateArgs>,
    groupBy: z.ZodType<Prisma.SurgeriesGroupByArgs>,
    count: z.ZodType<Prisma.SurgeriesCountArgs>
}

export const SurgeriesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), where: SurgeriesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), where: SurgeriesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesOrderByWithRelationInputObjectSchema, SurgeriesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(SurgeriesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), where: SurgeriesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesOrderByWithRelationInputObjectSchema, SurgeriesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(SurgeriesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), data: z.union([SurgeriesCreateInputObjectSchema, SurgeriesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([SurgeriesCreateManyInputObjectSchema, z.array(SurgeriesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), where: SurgeriesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: SurgeriesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), data: z.union([SurgeriesUpdateInputObjectSchema, SurgeriesUncheckedUpdateInputObjectSchema]), where: SurgeriesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([SurgeriesUpdateManyMutationInputObjectSchema, SurgeriesUncheckedUpdateManyInputObjectSchema]), where: SurgeriesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => SurgeriesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesIncludeObjectSchema.optional()), where: SurgeriesWhereUniqueInputObjectSchema, create: z.union([SurgeriesCreateInputObjectSchema, SurgeriesUncheckedCreateInputObjectSchema]), update: z.union([SurgeriesUpdateInputObjectSchema, SurgeriesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: SurgeriesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesOrderByWithRelationInputObjectSchema, SurgeriesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), SurgeriesCountAggregateInputObjectSchema]).optional(), _min: SurgeriesMinAggregateInputObjectSchema.optional(), _max: SurgeriesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: SurgeriesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesOrderByWithAggregationInputObjectSchema, SurgeriesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: SurgeriesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(SurgeriesScalarFieldEnumSchema), _count: z.union([z.literal(true), SurgeriesCountAggregateInputObjectSchema]).optional(), _min: SurgeriesMinAggregateInputObjectSchema.optional(), _max: SurgeriesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: SurgeriesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesOrderByWithRelationInputObjectSchema, SurgeriesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(SurgeriesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), SurgeriesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as SurgeriesInputSchemaType;
