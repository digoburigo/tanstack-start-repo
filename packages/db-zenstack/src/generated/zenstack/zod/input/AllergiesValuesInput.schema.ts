/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { AllergiesValuesSelectObjectSchema } from '../objects/AllergiesValuesSelect.schema';
import { AllergiesValuesIncludeObjectSchema } from '../objects/AllergiesValuesInclude.schema';
import { AllergiesValuesWhereUniqueInputObjectSchema } from '../objects/AllergiesValuesWhereUniqueInput.schema';
import { AllergiesValuesWhereInputObjectSchema } from '../objects/AllergiesValuesWhereInput.schema';
import { AllergiesValuesOrderByWithRelationInputObjectSchema } from '../objects/AllergiesValuesOrderByWithRelationInput.schema';
import { AllergiesValuesScalarFieldEnumSchema } from '../enums/AllergiesValuesScalarFieldEnum.schema';
import { AllergiesValuesCreateInputObjectSchema } from '../objects/AllergiesValuesCreateInput.schema';
import { AllergiesValuesUncheckedCreateInputObjectSchema } from '../objects/AllergiesValuesUncheckedCreateInput.schema';
import { AllergiesValuesCreateManyInputObjectSchema } from '../objects/AllergiesValuesCreateManyInput.schema';
import { AllergiesValuesUpdateInputObjectSchema } from '../objects/AllergiesValuesUpdateInput.schema';
import { AllergiesValuesUncheckedUpdateInputObjectSchema } from '../objects/AllergiesValuesUncheckedUpdateInput.schema';
import { AllergiesValuesUpdateManyMutationInputObjectSchema } from '../objects/AllergiesValuesUpdateManyMutationInput.schema';
import { AllergiesValuesUncheckedUpdateManyInputObjectSchema } from '../objects/AllergiesValuesUncheckedUpdateManyInput.schema';
import { AllergiesValuesCountAggregateInputObjectSchema } from '../objects/AllergiesValuesCountAggregateInput.schema';
import { AllergiesValuesMinAggregateInputObjectSchema } from '../objects/AllergiesValuesMinAggregateInput.schema';
import { AllergiesValuesMaxAggregateInputObjectSchema } from '../objects/AllergiesValuesMaxAggregateInput.schema';
import { AllergiesValuesOrderByWithAggregationInputObjectSchema } from '../objects/AllergiesValuesOrderByWithAggregationInput.schema';
import { AllergiesValuesScalarWhereWithAggregatesInputObjectSchema } from '../objects/AllergiesValuesScalarWhereWithAggregatesInput.schema'

type AllergiesValuesInputSchemaType = {
    findUnique: z.ZodType<Prisma.AllergiesValuesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.AllergiesValuesFindFirstArgs>,
    findMany: z.ZodType<Prisma.AllergiesValuesFindManyArgs>,
    create: z.ZodType<Prisma.AllergiesValuesCreateArgs>,
    createMany: z.ZodType<Prisma.AllergiesValuesCreateManyArgs>,
    delete: z.ZodType<Prisma.AllergiesValuesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.AllergiesValuesDeleteManyArgs>,
    update: z.ZodType<Prisma.AllergiesValuesUpdateArgs>,
    updateMany: z.ZodType<Prisma.AllergiesValuesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.AllergiesValuesUpsertArgs>,
    aggregate: z.ZodType<Prisma.AllergiesValuesAggregateArgs>,
    groupBy: z.ZodType<Prisma.AllergiesValuesGroupByArgs>,
    count: z.ZodType<Prisma.AllergiesValuesCountArgs>
}

export const AllergiesValuesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), where: AllergiesValuesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), where: AllergiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesValuesOrderByWithRelationInputObjectSchema, AllergiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AllergiesValuesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), where: AllergiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesValuesOrderByWithRelationInputObjectSchema, AllergiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AllergiesValuesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), data: z.union([AllergiesValuesCreateInputObjectSchema, AllergiesValuesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([AllergiesValuesCreateManyInputObjectSchema, z.array(AllergiesValuesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), where: AllergiesValuesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: AllergiesValuesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), data: z.union([AllergiesValuesUpdateInputObjectSchema, AllergiesValuesUncheckedUpdateInputObjectSchema]), where: AllergiesValuesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([AllergiesValuesUpdateManyMutationInputObjectSchema, AllergiesValuesUncheckedUpdateManyInputObjectSchema]), where: AllergiesValuesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => AllergiesValuesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesValuesIncludeObjectSchema.optional()), where: AllergiesValuesWhereUniqueInputObjectSchema, create: z.union([AllergiesValuesCreateInputObjectSchema, AllergiesValuesUncheckedCreateInputObjectSchema]), update: z.union([AllergiesValuesUpdateInputObjectSchema, AllergiesValuesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: AllergiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesValuesOrderByWithRelationInputObjectSchema, AllergiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), AllergiesValuesCountAggregateInputObjectSchema]).optional(), _min: AllergiesValuesMinAggregateInputObjectSchema.optional(), _max: AllergiesValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: AllergiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesValuesOrderByWithAggregationInputObjectSchema, AllergiesValuesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AllergiesValuesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AllergiesValuesScalarFieldEnumSchema), _count: z.union([z.literal(true), AllergiesValuesCountAggregateInputObjectSchema]).optional(), _min: AllergiesValuesMinAggregateInputObjectSchema.optional(), _max: AllergiesValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: AllergiesValuesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesValuesOrderByWithRelationInputObjectSchema, AllergiesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AllergiesValuesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), AllergiesValuesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as AllergiesValuesInputSchemaType;
