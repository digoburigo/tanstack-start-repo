/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { PatientSelectObjectSchema } from '../objects/PatientSelect.schema';
import { PatientIncludeObjectSchema } from '../objects/PatientInclude.schema';
import { PatientWhereUniqueInputObjectSchema } from '../objects/PatientWhereUniqueInput.schema';
import { PatientWhereInputObjectSchema } from '../objects/PatientWhereInput.schema';
import { PatientOrderByWithRelationInputObjectSchema } from '../objects/PatientOrderByWithRelationInput.schema';
import { PatientScalarFieldEnumSchema } from '../enums/PatientScalarFieldEnum.schema';
import { PatientCreateInputObjectSchema } from '../objects/PatientCreateInput.schema';
import { PatientUncheckedCreateInputObjectSchema } from '../objects/PatientUncheckedCreateInput.schema';
import { PatientCreateManyInputObjectSchema } from '../objects/PatientCreateManyInput.schema';
import { PatientUpdateInputObjectSchema } from '../objects/PatientUpdateInput.schema';
import { PatientUncheckedUpdateInputObjectSchema } from '../objects/PatientUncheckedUpdateInput.schema';
import { PatientUpdateManyMutationInputObjectSchema } from '../objects/PatientUpdateManyMutationInput.schema';
import { PatientUncheckedUpdateManyInputObjectSchema } from '../objects/PatientUncheckedUpdateManyInput.schema';
import { PatientCountAggregateInputObjectSchema } from '../objects/PatientCountAggregateInput.schema';
import { PatientMinAggregateInputObjectSchema } from '../objects/PatientMinAggregateInput.schema';
import { PatientMaxAggregateInputObjectSchema } from '../objects/PatientMaxAggregateInput.schema';
import { PatientOrderByWithAggregationInputObjectSchema } from '../objects/PatientOrderByWithAggregationInput.schema';
import { PatientScalarWhereWithAggregatesInputObjectSchema } from '../objects/PatientScalarWhereWithAggregatesInput.schema'

type PatientInputSchemaType = {
    findUnique: z.ZodType<Prisma.PatientFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.PatientFindFirstArgs>,
    findMany: z.ZodType<Prisma.PatientFindManyArgs>,
    create: z.ZodType<Prisma.PatientCreateArgs>,
    createMany: z.ZodType<Prisma.PatientCreateManyArgs>,
    delete: z.ZodType<Prisma.PatientDeleteArgs>,
    deleteMany: z.ZodType<Prisma.PatientDeleteManyArgs>,
    update: z.ZodType<Prisma.PatientUpdateArgs>,
    updateMany: z.ZodType<Prisma.PatientUpdateManyArgs>,
    upsert: z.ZodType<Prisma.PatientUpsertArgs>,
    aggregate: z.ZodType<Prisma.PatientAggregateArgs>,
    groupBy: z.ZodType<Prisma.PatientGroupByArgs>,
    count: z.ZodType<Prisma.PatientCountArgs>
}

export const PatientInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), where: PatientWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), where: PatientWhereInputObjectSchema.optional(), orderBy: z.union([PatientOrderByWithRelationInputObjectSchema, PatientOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: PatientWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(PatientScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), where: PatientWhereInputObjectSchema.optional(), orderBy: z.union([PatientOrderByWithRelationInputObjectSchema, PatientOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: PatientWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(PatientScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), data: z.union([PatientCreateInputObjectSchema, PatientUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([PatientCreateManyInputObjectSchema, z.array(PatientCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), where: PatientWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: PatientWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), data: z.union([PatientUpdateInputObjectSchema, PatientUncheckedUpdateInputObjectSchema]), where: PatientWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([PatientUpdateManyMutationInputObjectSchema, PatientUncheckedUpdateManyInputObjectSchema]), where: PatientWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => PatientSelectObjectSchema.optional()), include: z.lazy(() => PatientIncludeObjectSchema.optional()), where: PatientWhereUniqueInputObjectSchema, create: z.union([PatientCreateInputObjectSchema, PatientUncheckedCreateInputObjectSchema]), update: z.union([PatientUpdateInputObjectSchema, PatientUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: PatientWhereInputObjectSchema.optional(), orderBy: z.union([PatientOrderByWithRelationInputObjectSchema, PatientOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: PatientWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), PatientCountAggregateInputObjectSchema]).optional(), _min: PatientMinAggregateInputObjectSchema.optional(), _max: PatientMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: PatientWhereInputObjectSchema.optional(), orderBy: z.union([PatientOrderByWithAggregationInputObjectSchema, PatientOrderByWithAggregationInputObjectSchema.array()]).optional(), having: PatientScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(PatientScalarFieldEnumSchema), _count: z.union([z.literal(true), PatientCountAggregateInputObjectSchema]).optional(), _min: PatientMinAggregateInputObjectSchema.optional(), _max: PatientMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: PatientWhereInputObjectSchema.optional(), orderBy: z.union([PatientOrderByWithRelationInputObjectSchema, PatientOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: PatientWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(PatientScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), PatientCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as PatientInputSchemaType;
