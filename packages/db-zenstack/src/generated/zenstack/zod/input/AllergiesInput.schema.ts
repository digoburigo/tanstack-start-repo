/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { AllergiesSelectObjectSchema } from '../objects/AllergiesSelect.schema';
import { AllergiesIncludeObjectSchema } from '../objects/AllergiesInclude.schema';
import { AllergiesWhereUniqueInputObjectSchema } from '../objects/AllergiesWhereUniqueInput.schema';
import { AllergiesWhereInputObjectSchema } from '../objects/AllergiesWhereInput.schema';
import { AllergiesOrderByWithRelationInputObjectSchema } from '../objects/AllergiesOrderByWithRelationInput.schema';
import { AllergiesScalarFieldEnumSchema } from '../enums/AllergiesScalarFieldEnum.schema';
import { AllergiesCreateInputObjectSchema } from '../objects/AllergiesCreateInput.schema';
import { AllergiesUncheckedCreateInputObjectSchema } from '../objects/AllergiesUncheckedCreateInput.schema';
import { AllergiesCreateManyInputObjectSchema } from '../objects/AllergiesCreateManyInput.schema';
import { AllergiesUpdateInputObjectSchema } from '../objects/AllergiesUpdateInput.schema';
import { AllergiesUncheckedUpdateInputObjectSchema } from '../objects/AllergiesUncheckedUpdateInput.schema';
import { AllergiesUpdateManyMutationInputObjectSchema } from '../objects/AllergiesUpdateManyMutationInput.schema';
import { AllergiesUncheckedUpdateManyInputObjectSchema } from '../objects/AllergiesUncheckedUpdateManyInput.schema';
import { AllergiesCountAggregateInputObjectSchema } from '../objects/AllergiesCountAggregateInput.schema';
import { AllergiesMinAggregateInputObjectSchema } from '../objects/AllergiesMinAggregateInput.schema';
import { AllergiesMaxAggregateInputObjectSchema } from '../objects/AllergiesMaxAggregateInput.schema';
import { AllergiesOrderByWithAggregationInputObjectSchema } from '../objects/AllergiesOrderByWithAggregationInput.schema';
import { AllergiesScalarWhereWithAggregatesInputObjectSchema } from '../objects/AllergiesScalarWhereWithAggregatesInput.schema'

type AllergiesInputSchemaType = {
    findUnique: z.ZodType<Prisma.AllergiesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.AllergiesFindFirstArgs>,
    findMany: z.ZodType<Prisma.AllergiesFindManyArgs>,
    create: z.ZodType<Prisma.AllergiesCreateArgs>,
    createMany: z.ZodType<Prisma.AllergiesCreateManyArgs>,
    delete: z.ZodType<Prisma.AllergiesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.AllergiesDeleteManyArgs>,
    update: z.ZodType<Prisma.AllergiesUpdateArgs>,
    updateMany: z.ZodType<Prisma.AllergiesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.AllergiesUpsertArgs>,
    aggregate: z.ZodType<Prisma.AllergiesAggregateArgs>,
    groupBy: z.ZodType<Prisma.AllergiesGroupByArgs>,
    count: z.ZodType<Prisma.AllergiesCountArgs>
}

export const AllergiesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), where: AllergiesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), where: AllergiesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesOrderByWithRelationInputObjectSchema, AllergiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AllergiesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), where: AllergiesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesOrderByWithRelationInputObjectSchema, AllergiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AllergiesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), data: z.union([AllergiesCreateInputObjectSchema, AllergiesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([AllergiesCreateManyInputObjectSchema, z.array(AllergiesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), where: AllergiesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: AllergiesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), data: z.union([AllergiesUpdateInputObjectSchema, AllergiesUncheckedUpdateInputObjectSchema]), where: AllergiesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([AllergiesUpdateManyMutationInputObjectSchema, AllergiesUncheckedUpdateManyInputObjectSchema]), where: AllergiesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => AllergiesSelectObjectSchema.optional()), include: z.lazy(() => AllergiesIncludeObjectSchema.optional()), where: AllergiesWhereUniqueInputObjectSchema, create: z.union([AllergiesCreateInputObjectSchema, AllergiesUncheckedCreateInputObjectSchema]), update: z.union([AllergiesUpdateInputObjectSchema, AllergiesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: AllergiesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesOrderByWithRelationInputObjectSchema, AllergiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), AllergiesCountAggregateInputObjectSchema]).optional(), _min: AllergiesMinAggregateInputObjectSchema.optional(), _max: AllergiesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: AllergiesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesOrderByWithAggregationInputObjectSchema, AllergiesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AllergiesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AllergiesScalarFieldEnumSchema), _count: z.union([z.literal(true), AllergiesCountAggregateInputObjectSchema]).optional(), _min: AllergiesMinAggregateInputObjectSchema.optional(), _max: AllergiesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: AllergiesWhereInputObjectSchema.optional(), orderBy: z.union([AllergiesOrderByWithRelationInputObjectSchema, AllergiesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AllergiesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AllergiesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), AllergiesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as AllergiesInputSchemaType;
