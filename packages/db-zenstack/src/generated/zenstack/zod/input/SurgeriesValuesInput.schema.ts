/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '../../models';

;
import { SurgeriesValuesSelectObjectSchema } from '../objects/SurgeriesValuesSelect.schema';
import { SurgeriesValuesIncludeObjectSchema } from '../objects/SurgeriesValuesInclude.schema';
import { SurgeriesValuesWhereUniqueInputObjectSchema } from '../objects/SurgeriesValuesWhereUniqueInput.schema';
import { SurgeriesValuesWhereInputObjectSchema } from '../objects/SurgeriesValuesWhereInput.schema';
import { SurgeriesValuesOrderByWithRelationInputObjectSchema } from '../objects/SurgeriesValuesOrderByWithRelationInput.schema';
import { SurgeriesValuesScalarFieldEnumSchema } from '../enums/SurgeriesValuesScalarFieldEnum.schema';
import { SurgeriesValuesCreateInputObjectSchema } from '../objects/SurgeriesValuesCreateInput.schema';
import { SurgeriesValuesUncheckedCreateInputObjectSchema } from '../objects/SurgeriesValuesUncheckedCreateInput.schema';
import { SurgeriesValuesCreateManyInputObjectSchema } from '../objects/SurgeriesValuesCreateManyInput.schema';
import { SurgeriesValuesUpdateInputObjectSchema } from '../objects/SurgeriesValuesUpdateInput.schema';
import { SurgeriesValuesUncheckedUpdateInputObjectSchema } from '../objects/SurgeriesValuesUncheckedUpdateInput.schema';
import { SurgeriesValuesUpdateManyMutationInputObjectSchema } from '../objects/SurgeriesValuesUpdateManyMutationInput.schema';
import { SurgeriesValuesUncheckedUpdateManyInputObjectSchema } from '../objects/SurgeriesValuesUncheckedUpdateManyInput.schema';
import { SurgeriesValuesCountAggregateInputObjectSchema } from '../objects/SurgeriesValuesCountAggregateInput.schema';
import { SurgeriesValuesMinAggregateInputObjectSchema } from '../objects/SurgeriesValuesMinAggregateInput.schema';
import { SurgeriesValuesMaxAggregateInputObjectSchema } from '../objects/SurgeriesValuesMaxAggregateInput.schema';
import { SurgeriesValuesOrderByWithAggregationInputObjectSchema } from '../objects/SurgeriesValuesOrderByWithAggregationInput.schema';
import { SurgeriesValuesScalarWhereWithAggregatesInputObjectSchema } from '../objects/SurgeriesValuesScalarWhereWithAggregatesInput.schema'

type SurgeriesValuesInputSchemaType = {
    findUnique: z.ZodType<Prisma.SurgeriesValuesFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.SurgeriesValuesFindFirstArgs>,
    findMany: z.ZodType<Prisma.SurgeriesValuesFindManyArgs>,
    create: z.ZodType<Prisma.SurgeriesValuesCreateArgs>,
    createMany: z.ZodType<Prisma.SurgeriesValuesCreateManyArgs>,
    delete: z.ZodType<Prisma.SurgeriesValuesDeleteArgs>,
    deleteMany: z.ZodType<Prisma.SurgeriesValuesDeleteManyArgs>,
    update: z.ZodType<Prisma.SurgeriesValuesUpdateArgs>,
    updateMany: z.ZodType<Prisma.SurgeriesValuesUpdateManyArgs>,
    upsert: z.ZodType<Prisma.SurgeriesValuesUpsertArgs>,
    aggregate: z.ZodType<Prisma.SurgeriesValuesAggregateArgs>,
    groupBy: z.ZodType<Prisma.SurgeriesValuesGroupByArgs>,
    count: z.ZodType<Prisma.SurgeriesValuesCountArgs>
}

export const SurgeriesValuesInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), where: SurgeriesValuesWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), where: SurgeriesValuesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesValuesOrderByWithRelationInputObjectSchema, SurgeriesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(SurgeriesValuesScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), where: SurgeriesValuesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesValuesOrderByWithRelationInputObjectSchema, SurgeriesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(SurgeriesValuesScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), data: z.union([SurgeriesValuesCreateInputObjectSchema, SurgeriesValuesUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([SurgeriesValuesCreateManyInputObjectSchema, z.array(SurgeriesValuesCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), where: SurgeriesValuesWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: SurgeriesValuesWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), data: z.union([SurgeriesValuesUpdateInputObjectSchema, SurgeriesValuesUncheckedUpdateInputObjectSchema]), where: SurgeriesValuesWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([SurgeriesValuesUpdateManyMutationInputObjectSchema, SurgeriesValuesUncheckedUpdateManyInputObjectSchema]), where: SurgeriesValuesWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => SurgeriesValuesSelectObjectSchema.optional()), include: z.lazy(() => SurgeriesValuesIncludeObjectSchema.optional()), where: SurgeriesValuesWhereUniqueInputObjectSchema, create: z.union([SurgeriesValuesCreateInputObjectSchema, SurgeriesValuesUncheckedCreateInputObjectSchema]), update: z.union([SurgeriesValuesUpdateInputObjectSchema, SurgeriesValuesUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: SurgeriesValuesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesValuesOrderByWithRelationInputObjectSchema, SurgeriesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), SurgeriesValuesCountAggregateInputObjectSchema]).optional(), _min: SurgeriesValuesMinAggregateInputObjectSchema.optional(), _max: SurgeriesValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: SurgeriesValuesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesValuesOrderByWithAggregationInputObjectSchema, SurgeriesValuesOrderByWithAggregationInputObjectSchema.array()]).optional(), having: SurgeriesValuesScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(SurgeriesValuesScalarFieldEnumSchema), _count: z.union([z.literal(true), SurgeriesValuesCountAggregateInputObjectSchema]).optional(), _min: SurgeriesValuesMinAggregateInputObjectSchema.optional(), _max: SurgeriesValuesMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: SurgeriesValuesWhereInputObjectSchema.optional(), orderBy: z.union([SurgeriesValuesOrderByWithRelationInputObjectSchema, SurgeriesValuesOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: SurgeriesValuesWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(SurgeriesValuesScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), SurgeriesValuesCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as SurgeriesValuesInputSchemaType;
