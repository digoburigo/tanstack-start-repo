import * as runtime from "./runtime/library.js";

import $Types = runtime.Types
// general types
import $Public = runtime.Types.Public

import $Utils = runtime.Types.Utils

import $Extensions = runtime.Types.Extensions

import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>;
/**
 * Model User
 * @
 * @allow ('create,read', true)
 * @
 * @allow ('update,delete', auth().userId == id)
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>;
/**
 * Model Asset
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @delegate (type)
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>;
/**
 * Model Session
 *
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>;
/**
 * Model Account
 *
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>;
/**
 * Model Verification
 *
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>;
/**
 * Model Organization
 * @
 * @allow ('create,read', true)
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>;
/**
 * Model Member
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('read', auth().organizationId == organizationId)
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>;
/**
 * Model Invitation
 * @
 * @allow ('read', auth().userId == inviterId && auth().organizationId == organizationId)
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>;
/**
 * Model Cid
 * @
 * @allow ('read,create,delete', true)
 */
export type Cid = $Result.DefaultSelection<Prisma.$CidPayload>;
/**
 * Model AppointmentCid
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', appointment.patient.userId == auth().userId)
 */
export type AppointmentCid = $Result.DefaultSelection<Prisma.$AppointmentCidPayload>;
/**
 * Model Appointment
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>;
/**
 * Model Patient
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', auth().userId == userId)
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>;
/**
 * Model Vaccinations
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type Vaccinations = $Result.DefaultSelection<Prisma.$VaccinationsPayload>;
/**
 * Model VaccinationsValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update', true)
 */
export type VaccinationsValues = $Result.DefaultSelection<Prisma.$VaccinationsValuesPayload>;
/**
 * Model Allergies
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type Allergies = $Result.DefaultSelection<Prisma.$AllergiesPayload>;
/**
 * Model AllergiesValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update', true)
 */
export type AllergiesValues = $Result.DefaultSelection<Prisma.$AllergiesValuesPayload>;
/**
 * Model Medications
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type Medications = $Result.DefaultSelection<Prisma.$MedicationsPayload>;
/**
 * Model MedicationsValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update', true)
 */
export type MedicationsValues = $Result.DefaultSelection<Prisma.$MedicationsValuesPayload>;
/**
 * Model ExamResults
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type ExamResults = $Result.DefaultSelection<Prisma.$ExamResultsPayload>;
/**
 * Model ExamResultsValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update', true)
 */
export type ExamResultsValues = $Result.DefaultSelection<Prisma.$ExamResultsValuesPayload>;
/**
 * Model Comorbidities
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type Comorbidities = $Result.DefaultSelection<Prisma.$ComorbiditiesPayload>;
/**
 * Model ComorbiditiesValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update,delete', true)
 */
export type ComorbiditiesValues = $Result.DefaultSelection<Prisma.$ComorbiditiesValuesPayload>;
/**
 * Model Surgeries
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type Surgeries = $Result.DefaultSelection<Prisma.$SurgeriesPayload>;
/**
 * Model SurgeriesValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update,delete', true)
 */
export type SurgeriesValues = $Result.DefaultSelection<Prisma.$SurgeriesValuesPayload>;
/**
 * Model HealthPlans
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', patient.userId == auth().userId)
 */
export type HealthPlans = $Result.DefaultSelection<Prisma.$HealthPlansPayload>;
/**
 * Model HealthPlansValues
 * @
 * @deny ('all', auth() == null)
 * @
 * @allow ('create,read,update,delete', true)
 */
export type HealthPlansValues = $Result.DefaultSelection<Prisma.$HealthPlansValuesPayload>;
/**
 * Model DefaultObjectiveInformation
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 */
export type DefaultObjectiveInformation = $Result.DefaultSelection<Prisma.$DefaultObjectiveInformationPayload>;
/**
 * Model EventCalendar
 * @
 * @deny ('read', deleted)
 * @
 * @deny ('all', auth() == null)
 * @
 * @deny ('all', auth().organizationId != organizationId)
 * @
 * @allow ('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
 * @
 * @allow ('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
 * @
 * @allow ('read', appointment.patient.userId == auth().userId)
 */
export type EventCalendar = $Result.DefaultSelection<Prisma.$EventCalendarPayload>;
export type UserRole = $Enums.UserRole;
export type MemberRole = $Enums.MemberRole;
export type AppointmentCategory = $Enums.AppointmentCategory;
export type AppointmentStatus = $Enums.AppointmentStatus;
export type Sex = $Enums.Sex;
export type Race = $Enums.Race;
export type CivilStatus = $Enums.CivilStatus;
export type BloodType = $Enums.BloodType;
export type GenderIdentity = $Enums.GenderIdentity;
export type EventCalendarType = $Enums.EventCalendarType;

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions, U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
        extArgs: ExtArgs
    }>>;
    /**
     * ##  Prisma Client ʲˢ
     *
     * Type-safe database client for TypeScript & Node.js
     * @example
     * ```
     * const prisma = new PrismaClient()
     * // Fetch zero or more Users
     * const users = await prisma.user.findMany()
     * ```
     *
     *
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
     */
    constructor(optionsArg?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
    /**
     * `prisma.user`: Exposes CRUD operations for the **User** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Users
     * const users = await prisma.user.findMany()
     * ```
     */
    get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Assets
     * const assets = await prisma.asset.findMany()
     * ```
     */
    get asset(): Prisma.AssetDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.session`: Exposes CRUD operations for the **Session** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Sessions
     * const sessions = await prisma.session.findMany()
     * ```
     */
    get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.account`: Exposes CRUD operations for the **Account** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Accounts
     * const accounts = await prisma.account.findMany()
     * ```
     */
    get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Verifications
     * const verifications = await prisma.verification.findMany()
     * ```
     */
    get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Organizations
     * const organizations = await prisma.organization.findMany()
     * ```
     */
    get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.member`: Exposes CRUD operations for the **Member** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Members
     * const members = await prisma.member.findMany()
     * ```
     */
    get member(): Prisma.MemberDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Invitations
     * const invitations = await prisma.invitation.findMany()
     * ```
     */
    get invitation(): Prisma.InvitationDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.cid`: Exposes CRUD operations for the **Cid** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Cids
     * const cids = await prisma.cid.findMany()
     * ```
     */
    get cid(): Prisma.CidDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.appointmentCid`: Exposes CRUD operations for the **AppointmentCid** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more AppointmentCids
     * const appointmentCids = await prisma.appointmentCid.findMany()
     * ```
     */
    get appointmentCid(): Prisma.AppointmentCidDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Appointments
     * const appointments = await prisma.appointment.findMany()
     * ```
     */
    get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Patients
     * const patients = await prisma.patient.findMany()
     * ```
     */
    get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.vaccinations`: Exposes CRUD operations for the **Vaccinations** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Vaccinations
     * const vaccinations = await prisma.vaccinations.findMany()
     * ```
     */
    get vaccinations(): Prisma.VaccinationsDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.vaccinationsValues`: Exposes CRUD operations for the **VaccinationsValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more VaccinationsValues
     * const vaccinationsValues = await prisma.vaccinationsValues.findMany()
     * ```
     */
    get vaccinationsValues(): Prisma.VaccinationsValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.allergies`: Exposes CRUD operations for the **Allergies** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Allergies
     * const allergies = await prisma.allergies.findMany()
     * ```
     */
    get allergies(): Prisma.AllergiesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.allergiesValues`: Exposes CRUD operations for the **AllergiesValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more AllergiesValues
     * const allergiesValues = await prisma.allergiesValues.findMany()
     * ```
     */
    get allergiesValues(): Prisma.AllergiesValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.medications`: Exposes CRUD operations for the **Medications** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Medications
     * const medications = await prisma.medications.findMany()
     * ```
     */
    get medications(): Prisma.MedicationsDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.medicationsValues`: Exposes CRUD operations for the **MedicationsValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more MedicationsValues
     * const medicationsValues = await prisma.medicationsValues.findMany()
     * ```
     */
    get medicationsValues(): Prisma.MedicationsValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.examResults`: Exposes CRUD operations for the **ExamResults** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more ExamResults
     * const examResults = await prisma.examResults.findMany()
     * ```
     */
    get examResults(): Prisma.ExamResultsDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.examResultsValues`: Exposes CRUD operations for the **ExamResultsValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more ExamResultsValues
     * const examResultsValues = await prisma.examResultsValues.findMany()
     * ```
     */
    get examResultsValues(): Prisma.ExamResultsValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.comorbidities`: Exposes CRUD operations for the **Comorbidities** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Comorbidities
     * const comorbidities = await prisma.comorbidities.findMany()
     * ```
     */
    get comorbidities(): Prisma.ComorbiditiesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.comorbiditiesValues`: Exposes CRUD operations for the **ComorbiditiesValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more ComorbiditiesValues
     * const comorbiditiesValues = await prisma.comorbiditiesValues.findMany()
     * ```
     */
    get comorbiditiesValues(): Prisma.ComorbiditiesValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.surgeries`: Exposes CRUD operations for the **Surgeries** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more Surgeries
     * const surgeries = await prisma.surgeries.findMany()
     * ```
     */
    get surgeries(): Prisma.SurgeriesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.surgeriesValues`: Exposes CRUD operations for the **SurgeriesValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more SurgeriesValues
     * const surgeriesValues = await prisma.surgeriesValues.findMany()
     * ```
     */
    get surgeriesValues(): Prisma.SurgeriesValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.healthPlans`: Exposes CRUD operations for the **HealthPlans** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more HealthPlans
     * const healthPlans = await prisma.healthPlans.findMany()
     * ```
     */
    get healthPlans(): Prisma.HealthPlansDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.healthPlansValues`: Exposes CRUD operations for the **HealthPlansValues** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more HealthPlansValues
     * const healthPlansValues = await prisma.healthPlansValues.findMany()
     * ```
     */
    get healthPlansValues(): Prisma.HealthPlansValuesDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.defaultObjectiveInformation`: Exposes CRUD operations for the **DefaultObjectiveInformation** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more DefaultObjectiveInformations
     * const defaultObjectiveInformations = await prisma.defaultObjectiveInformation.findMany()
     * ```
     */
    get defaultObjectiveInformation(): Prisma.DefaultObjectiveInformationDelegate<ExtArgs, ClientOptions>;
    /**
     * `prisma.eventCalendar`: Exposes CRUD operations for the **EventCalendar** model.
     * Example usage:
     * ```ts
     * // Fetch zero or more EventCalendars
     * const eventCalendars = await prisma.eventCalendar.findMany()
     * ```
     */
    get eventCalendar(): Prisma.EventCalendarDelegate<ExtArgs, ClientOptions>;
    $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;
    /**
     * Connect with the database
     */
    $connect(): $Utils.JsPromise<void>;
    /**
     * Disconnect from the database
     */
    $disconnect(): $Utils.JsPromise<void>;
    /**
     * Add a middleware
     * @deprecated since 4.16.0. For new code, prefer client extensions instead.
     * @see https://pris.ly/d/extensions
     */
    $use(cb: Prisma.Middleware): void;
    /**
     * Executes a prepared raw query and returns the number of affected rows.
     * @example
     * ```
     * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
     * ```
     *
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
     */
    $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;
    /**
     * Executes a raw query and returns the number of affected rows.
     * Susceptible to SQL injections, see documentation.
     * @example
     * ```
     * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
     * ```
     *
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
     */
    $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;
    /**
     * Performs a prepared raw query and returns the `SELECT` data.
     * @example
     * ```
     * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
     * ```
     *
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
     */
    $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;
    /**
     * Performs a raw query and returns the `SELECT` data.
     * Susceptible to SQL injections, see documentation.
     * @example
     * ```
     * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
     * ```
     *
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
     */
    $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;
    /**
     * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
     * @example
     * ```
     * const [george, bob, alice] = await prisma.$transaction([
     *   prisma.user.create({ data: { name: 'George' } }),
     *   prisma.user.create({ data: { name: 'Bob' } }),
     *   prisma.user.create({ data: { name: 'Alice' } }),
     * ])
     * ```
     *
     * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
     */
    $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;
    $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>;
}

export const UserRole: typeof $Enums.UserRole;
export const MemberRole: typeof $Enums.MemberRole;
export const AppointmentCategory: typeof $Enums.AppointmentCategory;
export const AppointmentStatus: typeof $Enums.AppointmentStatus;
export const Sex: typeof $Enums.Sex;
export const Race: typeof $Enums.Race;
export const CivilStatus: typeof $Enums.CivilStatus;
export const BloodType: typeof $Enums.BloodType;
export const GenderIdentity: typeof $Enums.GenderIdentity;
export const EventCalendarType: typeof $Enums.EventCalendarType;

/**
 * Enums
 */
export namespace $Enums {
    export const UserRole: {
        admin: 'admin',
        user: 'user'
    };
    export type UserRole = (typeof UserRole)[keyof typeof UserRole];
    export const MemberRole: {
        owner: 'owner',
        admin: 'admin',
        secretary: 'secretary',
        patient: 'patient',
        member: 'member'
    };
    export type MemberRole = (typeof MemberRole)[keyof typeof MemberRole];
    export const AppointmentCategory: {
        NORMAL: 'NORMAL',
        FOLLOW_UP: 'FOLLOW_UP'
    };
    export type AppointmentCategory = (typeof AppointmentCategory)[keyof typeof AppointmentCategory];
    export const AppointmentStatus: {
        PENDING: 'PENDING',
        ONGOING: 'ONGOING',
        CONFIRMED: 'CONFIRMED',
        CANCELLED: 'CANCELLED',
        RESCHEDULED: 'RESCHEDULED',
        COMPLETED: 'COMPLETED',
        NO_SHOW: 'NO_SHOW'
    };
    export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus];
    export const Sex: {
        male: 'male',
        female: 'female'
    };
    export type Sex = (typeof Sex)[keyof typeof Sex];
    export const Race: {
        black: 'black',
        brown: 'brown',
        white: 'white',
        yellow: 'yellow',
        indigenous: 'indigenous'
    };
    export type Race = (typeof Race)[keyof typeof Race];
    export const CivilStatus: {
        single: 'single',
        married: 'married',
        separated: 'separated',
        divorced: 'divorced',
        widowed: 'widowed'
    };
    export type CivilStatus = (typeof CivilStatus)[keyof typeof CivilStatus];
    export const BloodType: {
        a_positive: 'a_positive',
        a_negative: 'a_negative',
        b_positive: 'b_positive',
        b_negative: 'b_negative',
        ab_positive: 'ab_positive',
        ab_negative: 'ab_negative',
        o_positive: 'o_positive',
        o_negative: 'o_negative'
    };
    export type BloodType = (typeof BloodType)[keyof typeof BloodType];
    export const GenderIdentity: {
        cisgender: 'cisgender',
        transgender: 'transgender',
        non_binary: 'non_binary'
    };
    export type GenderIdentity = (typeof GenderIdentity)[keyof typeof GenderIdentity];
    export const EventCalendarType: {
        APPOINTMENT: 'APPOINTMENT',
        APPOINTMENT_FOLLOW_UP: 'APPOINTMENT_FOLLOW_UP',
        CONSULTATION: 'CONSULTATION',
        SURGERY: 'SURGERY',
        EXAM: 'EXAM',
        MEETING: 'MEETING',
        OTHER: 'OTHER'
    };
    export type EventCalendarType = (typeof EventCalendarType)[keyof typeof EventCalendarType];
}

export namespace Prisma {

    export import DMMF = runtime.DMMF


    /**
     * Validator
     */
    export import validator = runtime.Public.validator


    /**
     * Prisma Errors
     */
    export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

    export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

    export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

    export import PrismaClientInitializationError = runtime.PrismaClientInitializationError

    export import PrismaClientValidationError = runtime.PrismaClientValidationError


    /**
     * Re-export of sql-template-tag
     */
    export import sql = runtime.sqltag

    export import empty = runtime.empty

    export import join = runtime.join

    export import raw = runtime.raw

    export import Sql = runtime.Sql




    /**
     * Decimal.js
     */
    export import Decimal = runtime.Decimal


    /**
    * Extensions
    */
    export import Extension = $Extensions.UserArgs

    export import getExtensionContext = runtime.Extensions.getExtensionContext

    export import Args = $Public.Args

    export import Payload = $Public.Payload

    export import Result = $Public.Result

    export import Exact = $Public.Exact


    /**
     * Utility Types
     */


    export import JsonObject = runtime.JsonObject

    export import JsonArray = runtime.JsonArray

    export import JsonValue = runtime.JsonValue

    export import InputJsonObject = runtime.InputJsonObject

    export import InputJsonArray = runtime.InputJsonArray

    export import InputJsonValue = runtime.InputJsonValue

    export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

    /**
     * Types of the values used to represent different kinds of `null` values when working with JSON fields.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    namespace NullTypes {
        /**
         * Type of `Prisma.DbNull`.
         *
         * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
         *
         * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
         */
        class DbNull {
            private DbNull: never;
            private constructor();
        }

        /**
         * Type of `Prisma.JsonNull`.
         *
         * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
         *
         * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
         */
        class JsonNull {
            private JsonNull: never;
            private constructor();
        }

        /**
         * Type of `Prisma.AnyNull`.
         *
         * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
         *
         * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
         */
        class AnyNull {
            private AnyNull: never;
            private constructor();
        }
    }

    export const prismaVersion: PrismaVersion;
    /**
     * Helper for filtering JSON entries that have `null` on the database (empty on the db)
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    export const DbNull: NullTypes.DbNull;
    /**
     * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    export const JsonNull: NullTypes.JsonNull;
    /**
     * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    export const AnyNull: NullTypes.AnyNull;
    export const type: unique symbol;
    export const ModelName: {
        User: 'User',
        Asset: 'Asset',
        Session: 'Session',
        Account: 'Account',
        Verification: 'Verification',
        Organization: 'Organization',
        Member: 'Member',
        Invitation: 'Invitation',
        Cid: 'Cid',
        AppointmentCid: 'AppointmentCid',
        Appointment: 'Appointment',
        Patient: 'Patient',
        Vaccinations: 'Vaccinations',
        VaccinationsValues: 'VaccinationsValues',
        Allergies: 'Allergies',
        AllergiesValues: 'AllergiesValues',
        Medications: 'Medications',
        MedicationsValues: 'MedicationsValues',
        ExamResults: 'ExamResults',
        ExamResultsValues: 'ExamResultsValues',
        Comorbidities: 'Comorbidities',
        ComorbiditiesValues: 'ComorbiditiesValues',
        Surgeries: 'Surgeries',
        SurgeriesValues: 'SurgeriesValues',
        HealthPlans: 'HealthPlans',
        HealthPlansValues: 'HealthPlansValues',
        DefaultObjectiveInformation: 'DefaultObjectiveInformation',
        EventCalendar: 'EventCalendar'
    };
    export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>;
    /**
     * Enums
     */
    export const TransactionIsolationLevel: {
        Serializable: 'Serializable'
    };
    export const UserScalarFieldEnum: {
        id: 'id',
        name: 'name',
        email: 'email',
        emailVerified: 'emailVerified',
        image: 'image',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt',
        username: 'username',
        displayUsername: 'displayUsername',
        role: 'role',
        banned: 'banned',
        banReason: 'banReason',
        banExpires: 'banExpires',
        changePassword: 'changePassword'
    };
    export const AssetScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId'
    };
    export const SessionScalarFieldEnum: {
        id: 'id',
        expiresAt: 'expiresAt',
        token: 'token',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt',
        ipAddress: 'ipAddress',
        userAgent: 'userAgent',
        userId: 'userId',
        impersonatedBy: 'impersonatedBy',
        activeOrganizationId: 'activeOrganizationId'
    };
    export const AccountScalarFieldEnum: {
        id: 'id',
        accountId: 'accountId',
        providerId: 'providerId',
        userId: 'userId',
        accessToken: 'accessToken',
        refreshToken: 'refreshToken',
        idToken: 'idToken',
        accessTokenExpiresAt: 'accessTokenExpiresAt',
        refreshTokenExpiresAt: 'refreshTokenExpiresAt',
        scope: 'scope',
        password: 'password',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt'
    };
    export const VerificationScalarFieldEnum: {
        id: 'id',
        identifier: 'identifier',
        value: 'value',
        expiresAt: 'expiresAt',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt'
    };
    export const OrganizationScalarFieldEnum: {
        id: 'id',
        name: 'name',
        slug: 'slug',
        logo: 'logo',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt',
        metadata: 'metadata'
    };
    export const MemberScalarFieldEnum: {
        id: 'id',
        organizationId: 'organizationId',
        userId: 'userId',
        role: 'role',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt'
    };
    export const InvitationScalarFieldEnum: {
        id: 'id',
        organizationId: 'organizationId',
        email: 'email',
        role: 'role',
        status: 'status',
        expiresAt: 'expiresAt',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt',
        inviterId: 'inviterId'
    };
    export const CidScalarFieldEnum: {
        id: 'id',
        code: 'code',
        description: 'description',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt'
    };
    export const AppointmentCidScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        appointmentId: 'appointmentId',
        cidId: 'cidId'
    };
    export const AppointmentScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        motive: 'motive',
        subjective: 'subjective',
        objective: 'objective',
        evaluation: 'evaluation',
        plan: 'plan',
        startDate: 'startDate',
        endDate: 'endDate',
        sickNoteDays: 'sickNoteDays',
        category: 'category',
        status: 'status',
        followUpId: 'followUpId',
        patientId: 'patientId'
    };
    export const PatientScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        name: 'name',
        cpf: 'cpf',
        cellphone: 'cellphone',
        email: 'email',
        sex: 'sex',
        responsible: 'responsible',
        nationality: 'nationality',
        race: 'race',
        state: 'state',
        city: 'city',
        zipcode: 'zipcode',
        neighborhood: 'neighborhood',
        street: 'street',
        number: 'number',
        complement: 'complement',
        occupation: 'occupation',
        sexualOrientation: 'sexualOrientation',
        civilStatus: 'civilStatus',
        bloodType: 'bloodType',
        genderIdentity: 'genderIdentity',
        password: 'password',
        userId: 'userId'
    };
    export const VaccinationsScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        vaccinationsValuesId: 'vaccinationsValuesId'
    };
    export const VaccinationsValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const AllergiesScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        allergiesValuesId: 'allergiesValuesId',
        appointmentId: 'appointmentId'
    };
    export const AllergiesValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const MedicationsScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        medicationsValuesId: 'medicationsValuesId',
        appointmentId: 'appointmentId'
    };
    export const MedicationsValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const ExamResultsScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        examResultsValuesId: 'examResultsValuesId',
        result: 'result',
        date: 'date'
    };
    export const ExamResultsValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const ComorbiditiesScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        comorbiditiesValuesId: 'comorbiditiesValuesId',
        appointmentId: 'appointmentId'
    };
    export const ComorbiditiesValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const SurgeriesScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        surgeriesValuesId: 'surgeriesValuesId'
    };
    export const SurgeriesValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const HealthPlansScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        patientId: 'patientId',
        healthPlansValuesId: 'healthPlansValuesId'
    };
    export const HealthPlansValuesScalarFieldEnum: {
        id: 'id',
        value: 'value',
        createdAt: 'createdAt'
    };
    export const DefaultObjectiveInformationScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        text: 'text'
    };
    export const EventCalendarScalarFieldEnum: {
        id: 'id',
        type: 'type',
        createdAt: 'createdAt',
        createdById: 'createdById',
        updatedAt: 'updatedAt',
        updatedById: 'updatedById',
        deletedAt: 'deletedAt',
        deletedById: 'deletedById',
        deleted: 'deleted',
        organizationId: 'organizationId',
        title: 'title',
        description: 'description',
        start: 'start',
        end: 'end',
        allDay: 'allDay',
        eventType: 'eventType',
        rrule: 'rrule',
        appointmentId: 'appointmentId'
    };
    export const SortOrder: {
        asc: 'asc',
        desc: 'desc'
    };
    export const NullsOrder: {
        first: 'first',
        last: 'last'
    };
    /**
     * DMMF
     */
    export const dmmf: runtime.BaseDMMF;

    interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{ extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
        returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>;
    }

    export interface PrismaClientOptions {
        /**
         * Overwrites the datasource url from your schema.prisma file
         */
        datasources?: Datasources;
        /**
         * Overwrites the datasource url from your schema.prisma file
         */
        datasourceUrl?: string;
        /** @default "colorless" */
        errorFormat?: ErrorFormat;
        /**
         * @example
         * ```
         * // Defaults to stdout
         * log: ['query', 'info', 'warn', 'error']
         *
         * // Emit as events
         * log: [
         *   { emit: 'stdout', level: 'query' },
         *   { emit: 'stdout', level: 'info' },
         *   { emit: 'stdout', level: 'warn' }
         *   { emit: 'stdout', level: 'error' }
         * ]
         * ```
         * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
         */
        log?: (LogLevel | LogDefinition)[];
        /**
         * The default values for transactionOptions
         * maxWait ?= 2000
         * timeout ?= 5000
         */
        transactionOptions?: {
            maxWait?: number
            timeout?: number
            isolationLevel?: Prisma.TransactionIsolationLevel
        };
        /**
         * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
         */
        adapter?: runtime.SqlDriverAdapterFactory | null;
        /**
         * Global configuration for omitting model fields by default.
         *
         * @example
         * ```
         * const prisma = new PrismaClient({
         *   omit: {
         *     user: {
         *       password: true
         *     }
         *   }
         * })
         * ```
         */
        omit?: Prisma.GlobalOmitConfig;
    }

    export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } };
        /**
         * Fields of the User model
         */
        readonly fields: UserFieldRefs;
        /**
         * Find zero or one User that matches the filter.
         * @param {UserFindUniqueArgs} args - Arguments to find a User
         * @example
         * // Get one User
         * const user = await prisma.user.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one User that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
         * @example
         * // Get one User
         * const user = await prisma.user.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first User that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserFindFirstArgs} args - Arguments to find a User
         * @example
         * // Get one User
         * const user = await prisma.user.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first User that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
         * @example
         * // Get one User
         * const user = await prisma.user.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Users that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Users
         * const users = await prisma.user.findMany()
         *
         * // Get first 10 Users
         * const users = await prisma.user.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
         */
        findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a User.
         * @param {UserCreateArgs} args - Arguments to create a User.
         * @example
         * // Create one User
         * const User = await prisma.user.create({
         *   data: {
         *     // ... data to create a User
         *   }
         * })
         */
        create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Users.
         * @param {UserCreateManyArgs} args - Arguments to create many Users.
         * @example
         * // Create many Users
         * const user = await prisma.user.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Users and returns the data saved in the database.
         * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
         * @example
         * // Create many Users
         * const user = await prisma.user.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Users and only return the `id`
         * const userWithIdOnly = await prisma.user.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a User.
         * @param {UserDeleteArgs} args - Arguments to delete one User.
         * @example
         * // Delete one User
         * const User = await prisma.user.delete({
         *   where: {
         *     // ... filter to delete one User
         *   }
         * })
         */
        delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one User.
         * @param {UserUpdateArgs} args - Arguments to update one User.
         * @example
         * // Update one User
         * const user = await prisma.user.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Users.
         * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
         * @example
         * // Delete a few Users
         * const { count } = await prisma.user.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Users.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Users
         * const user = await prisma.user.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Users and returns the data updated in the database.
         * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
         * @example
         * // Update many Users
         * const user = await prisma.user.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Users and only return the `id`
         * const userWithIdOnly = await prisma.user.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one User.
         * @param {UserUpsertArgs} args - Arguments to update or create a User.
         * @example
         * // Update or create a User
         * const user = await prisma.user.upsert({
         *   create: {
         *     // ... data to create a User
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the User we want to update
         *   }
         * })
         */
        upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Users.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserCountArgs} args - Arguments to filter Users to count.
         * @example
         * // Count the number of Users
         * const count = await prisma.user.count({
         *   where: {
         *     // ... the filter for the Users we want to count
         *   }
         * })
         */
        count<T extends UserCountArgs>(args?: Subset<T, UserCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], UserCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a User.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>;
        /**
         * Group by User.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {UserGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends UserGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for User.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        members<T extends User$membersArgs<ExtArgs> = {}>(args?: Subset<T, User$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        invitations<T extends User$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        patientUser<T extends User$patientUserArgs<ExtArgs> = {}>(args?: Subset<T, User$patientUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        createdAssets<T extends User$createdAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        updatedAssets<T extends User$updatedAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        deletedAssets<T extends User$deletedAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$deletedAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the User model
     */
    interface UserFieldRefs {
        readonly id: FieldRef<"User", 'String'>;
        readonly name: FieldRef<"User", 'String'>;
        readonly email: FieldRef<"User", 'String'>;
        readonly emailVerified: FieldRef<"User", 'Boolean'>;
        readonly image: FieldRef<"User", 'String'>;
        readonly createdAt: FieldRef<"User", 'DateTime'>;
        readonly updatedAt: FieldRef<"User", 'DateTime'>;
        readonly username: FieldRef<"User", 'String'>;
        readonly displayUsername: FieldRef<"User", 'String'>;
        readonly role: FieldRef<"User", 'UserRole'>;
        readonly banned: FieldRef<"User", 'Boolean'>;
        readonly banReason: FieldRef<"User", 'String'>;
        readonly banExpires: FieldRef<"User", 'DateTime'>;
        readonly changePassword: FieldRef<"User", 'Boolean'>;
    }

    export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } };
        /**
         * Fields of the Asset model
         */
        readonly fields: AssetFieldRefs;
        /**
         * Find zero or one Asset that matches the filter.
         * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
         * @example
         * // Get one Asset
         * const asset = await prisma.asset.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Asset that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
         * @example
         * // Get one Asset
         * const asset = await prisma.asset.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Asset that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetFindFirstArgs} args - Arguments to find a Asset
         * @example
         * // Get one Asset
         * const asset = await prisma.asset.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Asset that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
         * @example
         * // Get one Asset
         * const asset = await prisma.asset.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Assets that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Assets
         * const assets = await prisma.asset.findMany()
         *
         * // Get first 10 Assets
         * const assets = await prisma.asset.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
         */
        findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Delete a Asset.
         * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
         * @example
         * // Delete one Asset
         * const Asset = await prisma.asset.delete({
         *   where: {
         *     // ... filter to delete one Asset
         *   }
         * })
         */
        delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Asset.
         * @param {AssetUpdateArgs} args - Arguments to update one Asset.
         * @example
         * // Update one Asset
         * const asset = await prisma.asset.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Assets.
         * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
         * @example
         * // Delete a few Assets
         * const { count } = await prisma.asset.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Assets.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Assets
         * const asset = await prisma.asset.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Assets and returns the data updated in the database.
         * @param {AssetUpdateManyAndReturnArgs} args - Arguments to update many Assets.
         * @example
         * // Update many Assets
         * const asset = await prisma.asset.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Assets and only return the `id`
         * const assetWithIdOnly = await prisma.asset.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends AssetUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Count the number of Assets.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetCountArgs} args - Arguments to filter Assets to count.
         * @example
         * // Count the number of Assets
         * const count = await prisma.asset.count({
         *   where: {
         *     // ... the filter for the Assets we want to count
         *   }
         * })
         */
        count<T extends AssetCountArgs>(args?: Subset<T, AssetCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], AssetCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Asset.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>;
        /**
         * Group by Asset.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AssetGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends AssetGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Asset.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Asset$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Asset$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Asset$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Asset$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Asset$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Asset$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Asset$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Asset$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Asset model
     */
    interface AssetFieldRefs {
        readonly id: FieldRef<"Asset", 'String'>;
        readonly type: FieldRef<"Asset", 'String'>;
        readonly createdAt: FieldRef<"Asset", 'DateTime'>;
        readonly createdById: FieldRef<"Asset", 'String'>;
        readonly updatedAt: FieldRef<"Asset", 'DateTime'>;
        readonly updatedById: FieldRef<"Asset", 'String'>;
        readonly deletedAt: FieldRef<"Asset", 'DateTime'>;
        readonly deletedById: FieldRef<"Asset", 'String'>;
        readonly deleted: FieldRef<"Asset", 'Boolean'>;
        readonly organizationId: FieldRef<"Asset", 'String'>;
    }

    export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } };
        /**
         * Fields of the Session model
         */
        readonly fields: SessionFieldRefs;
        /**
         * Find zero or one Session that matches the filter.
         * @param {SessionFindUniqueArgs} args - Arguments to find a Session
         * @example
         * // Get one Session
         * const session = await prisma.session.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Session that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
         * @example
         * // Get one Session
         * const session = await prisma.session.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Session that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionFindFirstArgs} args - Arguments to find a Session
         * @example
         * // Get one Session
         * const session = await prisma.session.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Session that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
         * @example
         * // Get one Session
         * const session = await prisma.session.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Sessions that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Sessions
         * const sessions = await prisma.session.findMany()
         *
         * // Get first 10 Sessions
         * const sessions = await prisma.session.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
         */
        findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Session.
         * @param {SessionCreateArgs} args - Arguments to create a Session.
         * @example
         * // Create one Session
         * const Session = await prisma.session.create({
         *   data: {
         *     // ... data to create a Session
         *   }
         * })
         */
        create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Sessions.
         * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
         * @example
         * // Create many Sessions
         * const session = await prisma.session.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Sessions and returns the data saved in the database.
         * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
         * @example
         * // Create many Sessions
         * const session = await prisma.session.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Sessions and only return the `id`
         * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Session.
         * @param {SessionDeleteArgs} args - Arguments to delete one Session.
         * @example
         * // Delete one Session
         * const Session = await prisma.session.delete({
         *   where: {
         *     // ... filter to delete one Session
         *   }
         * })
         */
        delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Session.
         * @param {SessionUpdateArgs} args - Arguments to update one Session.
         * @example
         * // Update one Session
         * const session = await prisma.session.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Sessions.
         * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
         * @example
         * // Delete a few Sessions
         * const { count } = await prisma.session.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Sessions.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Sessions
         * const session = await prisma.session.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Sessions and returns the data updated in the database.
         * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
         * @example
         * // Update many Sessions
         * const session = await prisma.session.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Sessions and only return the `id`
         * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Session.
         * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
         * @example
         * // Update or create a Session
         * const session = await prisma.session.upsert({
         *   create: {
         *     // ... data to create a Session
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Session we want to update
         *   }
         * })
         */
        upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Sessions.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
         * @example
         * // Count the number of Sessions
         * const count = await prisma.session.count({
         *   where: {
         *     // ... the filter for the Sessions we want to count
         *   }
         * })
         */
        count<T extends SessionCountArgs>(args?: Subset<T, SessionCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], SessionCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Session.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>;
        /**
         * Group by Session.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SessionGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends SessionGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Session.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Session model
     */
    interface SessionFieldRefs {
        readonly id: FieldRef<"Session", 'String'>;
        readonly expiresAt: FieldRef<"Session", 'DateTime'>;
        readonly token: FieldRef<"Session", 'String'>;
        readonly createdAt: FieldRef<"Session", 'DateTime'>;
        readonly updatedAt: FieldRef<"Session", 'DateTime'>;
        readonly ipAddress: FieldRef<"Session", 'String'>;
        readonly userAgent: FieldRef<"Session", 'String'>;
        readonly userId: FieldRef<"Session", 'String'>;
        readonly impersonatedBy: FieldRef<"Session", 'String'>;
        readonly activeOrganizationId: FieldRef<"Session", 'String'>;
    }

    export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } };
        /**
         * Fields of the Account model
         */
        readonly fields: AccountFieldRefs;
        /**
         * Find zero or one Account that matches the filter.
         * @param {AccountFindUniqueArgs} args - Arguments to find a Account
         * @example
         * // Get one Account
         * const account = await prisma.account.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Account that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
         * @example
         * // Get one Account
         * const account = await prisma.account.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Account that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountFindFirstArgs} args - Arguments to find a Account
         * @example
         * // Get one Account
         * const account = await prisma.account.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Account that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
         * @example
         * // Get one Account
         * const account = await prisma.account.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Accounts that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Accounts
         * const accounts = await prisma.account.findMany()
         *
         * // Get first 10 Accounts
         * const accounts = await prisma.account.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
         */
        findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Account.
         * @param {AccountCreateArgs} args - Arguments to create a Account.
         * @example
         * // Create one Account
         * const Account = await prisma.account.create({
         *   data: {
         *     // ... data to create a Account
         *   }
         * })
         */
        create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Accounts.
         * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
         * @example
         * // Create many Accounts
         * const account = await prisma.account.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Accounts and returns the data saved in the database.
         * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
         * @example
         * // Create many Accounts
         * const account = await prisma.account.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Accounts and only return the `id`
         * const accountWithIdOnly = await prisma.account.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Account.
         * @param {AccountDeleteArgs} args - Arguments to delete one Account.
         * @example
         * // Delete one Account
         * const Account = await prisma.account.delete({
         *   where: {
         *     // ... filter to delete one Account
         *   }
         * })
         */
        delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Account.
         * @param {AccountUpdateArgs} args - Arguments to update one Account.
         * @example
         * // Update one Account
         * const account = await prisma.account.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Accounts.
         * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
         * @example
         * // Delete a few Accounts
         * const { count } = await prisma.account.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Accounts.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Accounts
         * const account = await prisma.account.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Accounts and returns the data updated in the database.
         * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
         * @example
         * // Update many Accounts
         * const account = await prisma.account.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Accounts and only return the `id`
         * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Account.
         * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
         * @example
         * // Update or create a Account
         * const account = await prisma.account.upsert({
         *   create: {
         *     // ... data to create a Account
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Account we want to update
         *   }
         * })
         */
        upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Accounts.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
         * @example
         * // Count the number of Accounts
         * const count = await prisma.account.count({
         *   where: {
         *     // ... the filter for the Accounts we want to count
         *   }
         * })
         */
        count<T extends AccountCountArgs>(args?: Subset<T, AccountCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], AccountCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Account.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>;
        /**
         * Group by Account.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AccountGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends AccountGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Account.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Account model
     */
    interface AccountFieldRefs {
        readonly id: FieldRef<"Account", 'String'>;
        readonly accountId: FieldRef<"Account", 'String'>;
        readonly providerId: FieldRef<"Account", 'String'>;
        readonly userId: FieldRef<"Account", 'String'>;
        readonly accessToken: FieldRef<"Account", 'String'>;
        readonly refreshToken: FieldRef<"Account", 'String'>;
        readonly idToken: FieldRef<"Account", 'String'>;
        readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>;
        readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>;
        readonly scope: FieldRef<"Account", 'String'>;
        readonly password: FieldRef<"Account", 'String'>;
        readonly createdAt: FieldRef<"Account", 'DateTime'>;
        readonly updatedAt: FieldRef<"Account", 'DateTime'>;
    }

    export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } };
        /**
         * Fields of the Verification model
         */
        readonly fields: VerificationFieldRefs;
        /**
         * Find zero or one Verification that matches the filter.
         * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
         * @example
         * // Get one Verification
         * const verification = await prisma.verification.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
         * @example
         * // Get one Verification
         * const verification = await prisma.verification.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Verification that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
         * @example
         * // Get one Verification
         * const verification = await prisma.verification.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Verification that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
         * @example
         * // Get one Verification
         * const verification = await prisma.verification.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Verifications that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Verifications
         * const verifications = await prisma.verification.findMany()
         *
         * // Get first 10 Verifications
         * const verifications = await prisma.verification.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
         */
        findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Verification.
         * @param {VerificationCreateArgs} args - Arguments to create a Verification.
         * @example
         * // Create one Verification
         * const Verification = await prisma.verification.create({
         *   data: {
         *     // ... data to create a Verification
         *   }
         * })
         */
        create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Verifications.
         * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
         * @example
         * // Create many Verifications
         * const verification = await prisma.verification.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Verifications and returns the data saved in the database.
         * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
         * @example
         * // Create many Verifications
         * const verification = await prisma.verification.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Verifications and only return the `id`
         * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Verification.
         * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
         * @example
         * // Delete one Verification
         * const Verification = await prisma.verification.delete({
         *   where: {
         *     // ... filter to delete one Verification
         *   }
         * })
         */
        delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Verification.
         * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
         * @example
         * // Update one Verification
         * const verification = await prisma.verification.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Verifications.
         * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
         * @example
         * // Delete a few Verifications
         * const { count } = await prisma.verification.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Verifications.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Verifications
         * const verification = await prisma.verification.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Verifications and returns the data updated in the database.
         * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
         * @example
         * // Update many Verifications
         * const verification = await prisma.verification.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Verifications and only return the `id`
         * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Verification.
         * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
         * @example
         * // Update or create a Verification
         * const verification = await prisma.verification.upsert({
         *   create: {
         *     // ... data to create a Verification
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Verification we want to update
         *   }
         * })
         */
        upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Verifications.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
         * @example
         * // Count the number of Verifications
         * const count = await prisma.verification.count({
         *   where: {
         *     // ... the filter for the Verifications we want to count
         *   }
         * })
         */
        count<T extends VerificationCountArgs>(args?: Subset<T, VerificationCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], VerificationCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Verification.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>;
        /**
         * Group by Verification.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VerificationGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends VerificationGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Verification.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Verification model
     */
    interface VerificationFieldRefs {
        readonly id: FieldRef<"Verification", 'String'>;
        readonly identifier: FieldRef<"Verification", 'String'>;
        readonly value: FieldRef<"Verification", 'String'>;
        readonly expiresAt: FieldRef<"Verification", 'DateTime'>;
        readonly createdAt: FieldRef<"Verification", 'DateTime'>;
        readonly updatedAt: FieldRef<"Verification", 'DateTime'>;
    }

    export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } };
        /**
         * Fields of the Organization model
         */
        readonly fields: OrganizationFieldRefs;
        /**
         * Find zero or one Organization that matches the filter.
         * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
         * @example
         * // Get one Organization
         * const organization = await prisma.organization.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
         * @example
         * // Get one Organization
         * const organization = await prisma.organization.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Organization that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
         * @example
         * // Get one Organization
         * const organization = await prisma.organization.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Organization that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
         * @example
         * // Get one Organization
         * const organization = await prisma.organization.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Organizations that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Organizations
         * const organizations = await prisma.organization.findMany()
         *
         * // Get first 10 Organizations
         * const organizations = await prisma.organization.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
         */
        findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Organization.
         * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
         * @example
         * // Create one Organization
         * const Organization = await prisma.organization.create({
         *   data: {
         *     // ... data to create a Organization
         *   }
         * })
         */
        create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Organizations.
         * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
         * @example
         * // Create many Organizations
         * const organization = await prisma.organization.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Organizations and returns the data saved in the database.
         * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
         * @example
         * // Create many Organizations
         * const organization = await prisma.organization.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Organizations and only return the `id`
         * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Organization.
         * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
         * @example
         * // Delete one Organization
         * const Organization = await prisma.organization.delete({
         *   where: {
         *     // ... filter to delete one Organization
         *   }
         * })
         */
        delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Organization.
         * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
         * @example
         * // Update one Organization
         * const organization = await prisma.organization.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Organizations.
         * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
         * @example
         * // Delete a few Organizations
         * const { count } = await prisma.organization.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Organizations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Organizations
         * const organization = await prisma.organization.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Organizations and returns the data updated in the database.
         * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
         * @example
         * // Update many Organizations
         * const organization = await prisma.organization.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Organizations and only return the `id`
         * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Organization.
         * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
         * @example
         * // Update or create a Organization
         * const organization = await prisma.organization.upsert({
         *   create: {
         *     // ... data to create a Organization
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Organization we want to update
         *   }
         * })
         */
        upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Organizations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
         * @example
         * // Count the number of Organizations
         * const count = await prisma.organization.count({
         *   where: {
         *     // ... the filter for the Organizations we want to count
         *   }
         * })
         */
        count<T extends OrganizationCountArgs>(args?: Subset<T, OrganizationCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Organization.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>;
        /**
         * Group by Organization.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {OrganizationGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends OrganizationGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Organization.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        members<T extends Organization$membersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        invitations<T extends Organization$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        assets<T extends Organization$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Organization model
     */
    interface OrganizationFieldRefs {
        readonly id: FieldRef<"Organization", 'String'>;
        readonly name: FieldRef<"Organization", 'String'>;
        readonly slug: FieldRef<"Organization", 'String'>;
        readonly logo: FieldRef<"Organization", 'String'>;
        readonly createdAt: FieldRef<"Organization", 'DateTime'>;
        readonly updatedAt: FieldRef<"Organization", 'DateTime'>;
        readonly metadata: FieldRef<"Organization", 'String'>;
    }

    export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } };
        /**
         * Fields of the Member model
         */
        readonly fields: MemberFieldRefs;
        /**
         * Find zero or one Member that matches the filter.
         * @param {MemberFindUniqueArgs} args - Arguments to find a Member
         * @example
         * // Get one Member
         * const member = await prisma.member.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Member that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
         * @example
         * // Get one Member
         * const member = await prisma.member.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Member that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberFindFirstArgs} args - Arguments to find a Member
         * @example
         * // Get one Member
         * const member = await prisma.member.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Member that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
         * @example
         * // Get one Member
         * const member = await prisma.member.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Members that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Members
         * const members = await prisma.member.findMany()
         *
         * // Get first 10 Members
         * const members = await prisma.member.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
         */
        findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Member.
         * @param {MemberCreateArgs} args - Arguments to create a Member.
         * @example
         * // Create one Member
         * const Member = await prisma.member.create({
         *   data: {
         *     // ... data to create a Member
         *   }
         * })
         */
        create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Members.
         * @param {MemberCreateManyArgs} args - Arguments to create many Members.
         * @example
         * // Create many Members
         * const member = await prisma.member.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Members and returns the data saved in the database.
         * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
         * @example
         * // Create many Members
         * const member = await prisma.member.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Members and only return the `id`
         * const memberWithIdOnly = await prisma.member.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Member.
         * @param {MemberDeleteArgs} args - Arguments to delete one Member.
         * @example
         * // Delete one Member
         * const Member = await prisma.member.delete({
         *   where: {
         *     // ... filter to delete one Member
         *   }
         * })
         */
        delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Member.
         * @param {MemberUpdateArgs} args - Arguments to update one Member.
         * @example
         * // Update one Member
         * const member = await prisma.member.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Members.
         * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
         * @example
         * // Delete a few Members
         * const { count } = await prisma.member.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Members.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Members
         * const member = await prisma.member.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Members and returns the data updated in the database.
         * @param {MemberUpdateManyAndReturnArgs} args - Arguments to update many Members.
         * @example
         * // Update many Members
         * const member = await prisma.member.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Members and only return the `id`
         * const memberWithIdOnly = await prisma.member.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends MemberUpdateManyAndReturnArgs>(args: SelectSubset<T, MemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Member.
         * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
         * @example
         * // Update or create a Member
         * const member = await prisma.member.upsert({
         *   create: {
         *     // ... data to create a Member
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Member we want to update
         *   }
         * })
         */
        upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Members.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberCountArgs} args - Arguments to filter Members to count.
         * @example
         * // Count the number of Members
         * const count = await prisma.member.count({
         *   where: {
         *     // ... the filter for the Members we want to count
         *   }
         * })
         */
        count<T extends MemberCountArgs>(args?: Subset<T, MemberCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], MemberCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Member.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>;
        /**
         * Group by Member.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MemberGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends MemberGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Member.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Member model
     */
    interface MemberFieldRefs {
        readonly id: FieldRef<"Member", 'String'>;
        readonly organizationId: FieldRef<"Member", 'String'>;
        readonly userId: FieldRef<"Member", 'String'>;
        readonly role: FieldRef<"Member", 'String'>;
        readonly createdAt: FieldRef<"Member", 'DateTime'>;
        readonly updatedAt: FieldRef<"Member", 'DateTime'>;
    }

    export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } };
        /**
         * Fields of the Invitation model
         */
        readonly fields: InvitationFieldRefs;
        /**
         * Find zero or one Invitation that matches the filter.
         * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
         * @example
         * // Get one Invitation
         * const invitation = await prisma.invitation.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Invitation that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
         * @example
         * // Get one Invitation
         * const invitation = await prisma.invitation.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Invitation that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
         * @example
         * // Get one Invitation
         * const invitation = await prisma.invitation.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Invitation that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
         * @example
         * // Get one Invitation
         * const invitation = await prisma.invitation.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Invitations that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Invitations
         * const invitations = await prisma.invitation.findMany()
         *
         * // Get first 10 Invitations
         * const invitations = await prisma.invitation.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
         */
        findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Invitation.
         * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
         * @example
         * // Create one Invitation
         * const Invitation = await prisma.invitation.create({
         *   data: {
         *     // ... data to create a Invitation
         *   }
         * })
         */
        create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Invitations.
         * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
         * @example
         * // Create many Invitations
         * const invitation = await prisma.invitation.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Invitations and returns the data saved in the database.
         * @param {InvitationCreateManyAndReturnArgs} args - Arguments to create many Invitations.
         * @example
         * // Create many Invitations
         * const invitation = await prisma.invitation.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Invitations and only return the `id`
         * const invitationWithIdOnly = await prisma.invitation.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends InvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Invitation.
         * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
         * @example
         * // Delete one Invitation
         * const Invitation = await prisma.invitation.delete({
         *   where: {
         *     // ... filter to delete one Invitation
         *   }
         * })
         */
        delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Invitation.
         * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
         * @example
         * // Update one Invitation
         * const invitation = await prisma.invitation.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Invitations.
         * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
         * @example
         * // Delete a few Invitations
         * const { count } = await prisma.invitation.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Invitations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Invitations
         * const invitation = await prisma.invitation.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Invitations and returns the data updated in the database.
         * @param {InvitationUpdateManyAndReturnArgs} args - Arguments to update many Invitations.
         * @example
         * // Update many Invitations
         * const invitation = await prisma.invitation.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Invitations and only return the `id`
         * const invitationWithIdOnly = await prisma.invitation.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends InvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, InvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Invitation.
         * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
         * @example
         * // Update or create a Invitation
         * const invitation = await prisma.invitation.upsert({
         *   create: {
         *     // ... data to create a Invitation
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Invitation we want to update
         *   }
         * })
         */
        upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Invitations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
         * @example
         * // Count the number of Invitations
         * const count = await prisma.invitation.count({
         *   where: {
         *     // ... the filter for the Invitations we want to count
         *   }
         * })
         */
        count<T extends InvitationCountArgs>(args?: Subset<T, InvitationCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], InvitationCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Invitation.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>;
        /**
         * Group by Invitation.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {InvitationGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends InvitationGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Invitation.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Invitation model
     */
    interface InvitationFieldRefs {
        readonly id: FieldRef<"Invitation", 'String'>;
        readonly organizationId: FieldRef<"Invitation", 'String'>;
        readonly email: FieldRef<"Invitation", 'String'>;
        readonly role: FieldRef<"Invitation", 'String'>;
        readonly status: FieldRef<"Invitation", 'String'>;
        readonly expiresAt: FieldRef<"Invitation", 'DateTime'>;
        readonly createdAt: FieldRef<"Invitation", 'DateTime'>;
        readonly updatedAt: FieldRef<"Invitation", 'DateTime'>;
        readonly inviterId: FieldRef<"Invitation", 'String'>;
    }

    export interface CidDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cid'], meta: { name: 'Cid' } };
        /**
         * Fields of the Cid model
         */
        readonly fields: CidFieldRefs;
        /**
         * Find zero or one Cid that matches the filter.
         * @param {CidFindUniqueArgs} args - Arguments to find a Cid
         * @example
         * // Get one Cid
         * const cid = await prisma.cid.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends CidFindUniqueArgs>(args: SelectSubset<T, CidFindUniqueArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Cid that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {CidFindUniqueOrThrowArgs} args - Arguments to find a Cid
         * @example
         * // Get one Cid
         * const cid = await prisma.cid.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends CidFindUniqueOrThrowArgs>(args: SelectSubset<T, CidFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Cid that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidFindFirstArgs} args - Arguments to find a Cid
         * @example
         * // Get one Cid
         * const cid = await prisma.cid.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends CidFindFirstArgs>(args?: SelectSubset<T, CidFindFirstArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Cid that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidFindFirstOrThrowArgs} args - Arguments to find a Cid
         * @example
         * // Get one Cid
         * const cid = await prisma.cid.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends CidFindFirstOrThrowArgs>(args?: SelectSubset<T, CidFindFirstOrThrowArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Cids that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Cids
         * const cids = await prisma.cid.findMany()
         *
         * // Get first 10 Cids
         * const cids = await prisma.cid.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const cidWithIdOnly = await prisma.cid.findMany({ select: { id: true } })
         */
        findMany<T extends CidFindManyArgs>(args?: SelectSubset<T, CidFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Cid.
         * @param {CidCreateArgs} args - Arguments to create a Cid.
         * @example
         * // Create one Cid
         * const Cid = await prisma.cid.create({
         *   data: {
         *     // ... data to create a Cid
         *   }
         * })
         */
        create<T extends CidCreateArgs>(args: SelectSubset<T, CidCreateArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Cids.
         * @param {CidCreateManyArgs} args - Arguments to create many Cids.
         * @example
         * // Create many Cids
         * const cid = await prisma.cid.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends CidCreateManyArgs>(args?: SelectSubset<T, CidCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Cids and returns the data saved in the database.
         * @param {CidCreateManyAndReturnArgs} args - Arguments to create many Cids.
         * @example
         * // Create many Cids
         * const cid = await prisma.cid.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Cids and only return the `id`
         * const cidWithIdOnly = await prisma.cid.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends CidCreateManyAndReturnArgs>(args?: SelectSubset<T, CidCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Cid.
         * @param {CidDeleteArgs} args - Arguments to delete one Cid.
         * @example
         * // Delete one Cid
         * const Cid = await prisma.cid.delete({
         *   where: {
         *     // ... filter to delete one Cid
         *   }
         * })
         */
        delete<T extends CidDeleteArgs>(args: SelectSubset<T, CidDeleteArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Cid.
         * @param {CidUpdateArgs} args - Arguments to update one Cid.
         * @example
         * // Update one Cid
         * const cid = await prisma.cid.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends CidUpdateArgs>(args: SelectSubset<T, CidUpdateArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Cids.
         * @param {CidDeleteManyArgs} args - Arguments to filter Cids to delete.
         * @example
         * // Delete a few Cids
         * const { count } = await prisma.cid.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends CidDeleteManyArgs>(args?: SelectSubset<T, CidDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Cids.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Cids
         * const cid = await prisma.cid.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends CidUpdateManyArgs>(args: SelectSubset<T, CidUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Cids and returns the data updated in the database.
         * @param {CidUpdateManyAndReturnArgs} args - Arguments to update many Cids.
         * @example
         * // Update many Cids
         * const cid = await prisma.cid.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Cids and only return the `id`
         * const cidWithIdOnly = await prisma.cid.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends CidUpdateManyAndReturnArgs>(args: SelectSubset<T, CidUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Cid.
         * @param {CidUpsertArgs} args - Arguments to update or create a Cid.
         * @example
         * // Update or create a Cid
         * const cid = await prisma.cid.upsert({
         *   create: {
         *     // ... data to create a Cid
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Cid we want to update
         *   }
         * })
         */
        upsert<T extends CidUpsertArgs>(args: SelectSubset<T, CidUpsertArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Cids.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidCountArgs} args - Arguments to filter Cids to count.
         * @example
         * // Count the number of Cids
         * const count = await prisma.cid.count({
         *   where: {
         *     // ... the filter for the Cids we want to count
         *   }
         * })
         */
        count<T extends CidCountArgs>(args?: Subset<T, CidCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], CidCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Cid.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends CidAggregateArgs>(args: Subset<T, CidAggregateArgs>): Prisma.PrismaPromise<GetCidAggregateType<T>>;
        /**
         * Group by Cid.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {CidGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends CidGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CidGroupByArgs['orderBy'] }
        : { orderBy?: CidGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, CidGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCidGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Cid.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__CidClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        appointmentCid<T extends Cid$appointmentCidArgs<ExtArgs> = {}>(args?: Subset<T, Cid$appointmentCidArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Cid model
     */
    interface CidFieldRefs {
        readonly id: FieldRef<"Cid", 'String'>;
        readonly code: FieldRef<"Cid", 'String'>;
        readonly description: FieldRef<"Cid", 'String'>;
        readonly createdAt: FieldRef<"Cid", 'DateTime'>;
        readonly updatedAt: FieldRef<"Cid", 'DateTime'>;
    }

    export interface AppointmentCidDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppointmentCid'], meta: { name: 'AppointmentCid' } };
        /**
         * Fields of the AppointmentCid model
         */
        readonly fields: AppointmentCidFieldRefs;
        /**
         * Find zero or one AppointmentCid that matches the filter.
         * @param {AppointmentCidFindUniqueArgs} args - Arguments to find a AppointmentCid
         * @example
         * // Get one AppointmentCid
         * const appointmentCid = await prisma.appointmentCid.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends AppointmentCidFindUniqueArgs>(args: SelectSubset<T, AppointmentCidFindUniqueArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one AppointmentCid that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {AppointmentCidFindUniqueOrThrowArgs} args - Arguments to find a AppointmentCid
         * @example
         * // Get one AppointmentCid
         * const appointmentCid = await prisma.appointmentCid.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends AppointmentCidFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentCidFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first AppointmentCid that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidFindFirstArgs} args - Arguments to find a AppointmentCid
         * @example
         * // Get one AppointmentCid
         * const appointmentCid = await prisma.appointmentCid.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends AppointmentCidFindFirstArgs>(args?: SelectSubset<T, AppointmentCidFindFirstArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first AppointmentCid that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidFindFirstOrThrowArgs} args - Arguments to find a AppointmentCid
         * @example
         * // Get one AppointmentCid
         * const appointmentCid = await prisma.appointmentCid.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends AppointmentCidFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentCidFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more AppointmentCids that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all AppointmentCids
         * const appointmentCids = await prisma.appointmentCid.findMany()
         *
         * // Get first 10 AppointmentCids
         * const appointmentCids = await prisma.appointmentCid.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const appointmentCidWithIdOnly = await prisma.appointmentCid.findMany({ select: { id: true } })
         */
        findMany<T extends AppointmentCidFindManyArgs>(args?: SelectSubset<T, AppointmentCidFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a AppointmentCid.
         * @param {AppointmentCidCreateArgs} args - Arguments to create a AppointmentCid.
         * @example
         * // Create one AppointmentCid
         * const AppointmentCid = await prisma.appointmentCid.create({
         *   data: {
         *     // ... data to create a AppointmentCid
         *   }
         * })
         */
        create<T extends AppointmentCidCreateArgs>(args: SelectSubset<T, AppointmentCidCreateArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many AppointmentCids.
         * @param {AppointmentCidCreateManyArgs} args - Arguments to create many AppointmentCids.
         * @example
         * // Create many AppointmentCids
         * const appointmentCid = await prisma.appointmentCid.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends AppointmentCidCreateManyArgs>(args?: SelectSubset<T, AppointmentCidCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many AppointmentCids and returns the data saved in the database.
         * @param {AppointmentCidCreateManyAndReturnArgs} args - Arguments to create many AppointmentCids.
         * @example
         * // Create many AppointmentCids
         * const appointmentCid = await prisma.appointmentCid.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many AppointmentCids and only return the `id`
         * const appointmentCidWithIdOnly = await prisma.appointmentCid.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends AppointmentCidCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCidCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a AppointmentCid.
         * @param {AppointmentCidDeleteArgs} args - Arguments to delete one AppointmentCid.
         * @example
         * // Delete one AppointmentCid
         * const AppointmentCid = await prisma.appointmentCid.delete({
         *   where: {
         *     // ... filter to delete one AppointmentCid
         *   }
         * })
         */
        delete<T extends AppointmentCidDeleteArgs>(args: SelectSubset<T, AppointmentCidDeleteArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one AppointmentCid.
         * @param {AppointmentCidUpdateArgs} args - Arguments to update one AppointmentCid.
         * @example
         * // Update one AppointmentCid
         * const appointmentCid = await prisma.appointmentCid.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends AppointmentCidUpdateArgs>(args: SelectSubset<T, AppointmentCidUpdateArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more AppointmentCids.
         * @param {AppointmentCidDeleteManyArgs} args - Arguments to filter AppointmentCids to delete.
         * @example
         * // Delete a few AppointmentCids
         * const { count } = await prisma.appointmentCid.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends AppointmentCidDeleteManyArgs>(args?: SelectSubset<T, AppointmentCidDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more AppointmentCids.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many AppointmentCids
         * const appointmentCid = await prisma.appointmentCid.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends AppointmentCidUpdateManyArgs>(args: SelectSubset<T, AppointmentCidUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more AppointmentCids and returns the data updated in the database.
         * @param {AppointmentCidUpdateManyAndReturnArgs} args - Arguments to update many AppointmentCids.
         * @example
         * // Update many AppointmentCids
         * const appointmentCid = await prisma.appointmentCid.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more AppointmentCids and only return the `id`
         * const appointmentCidWithIdOnly = await prisma.appointmentCid.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends AppointmentCidUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentCidUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one AppointmentCid.
         * @param {AppointmentCidUpsertArgs} args - Arguments to update or create a AppointmentCid.
         * @example
         * // Update or create a AppointmentCid
         * const appointmentCid = await prisma.appointmentCid.upsert({
         *   create: {
         *     // ... data to create a AppointmentCid
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the AppointmentCid we want to update
         *   }
         * })
         */
        upsert<T extends AppointmentCidUpsertArgs>(args: SelectSubset<T, AppointmentCidUpsertArgs<ExtArgs>>): Prisma__AppointmentCidClient<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of AppointmentCids.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidCountArgs} args - Arguments to filter AppointmentCids to count.
         * @example
         * // Count the number of AppointmentCids
         * const count = await prisma.appointmentCid.count({
         *   where: {
         *     // ... the filter for the AppointmentCids we want to count
         *   }
         * })
         */
        count<T extends AppointmentCidCountArgs>(args?: Subset<T, AppointmentCidCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], AppointmentCidCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a AppointmentCid.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends AppointmentCidAggregateArgs>(args: Subset<T, AppointmentCidAggregateArgs>): Prisma.PrismaPromise<GetAppointmentCidAggregateType<T>>;
        /**
         * Group by AppointmentCid.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCidGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends AppointmentCidGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentCidGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentCidGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, AppointmentCidGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentCidGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for AppointmentCid.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__AppointmentCidClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends AppointmentCid$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentCid$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends AppointmentCid$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentCid$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends AppointmentCid$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentCid$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends AppointmentCid$organizationArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentCid$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        cid<T extends CidDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CidDefaultArgs<ExtArgs>>): Prisma__CidClient<$Result.GetResult<Prisma.$CidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the AppointmentCid model
     */
    interface AppointmentCidFieldRefs {
        readonly id: FieldRef<"AppointmentCid", 'String'>;
        readonly type: FieldRef<"AppointmentCid", 'String'>;
        readonly createdAt: FieldRef<"AppointmentCid", 'DateTime'>;
        readonly createdById: FieldRef<"AppointmentCid", 'String'>;
        readonly updatedAt: FieldRef<"AppointmentCid", 'DateTime'>;
        readonly updatedById: FieldRef<"AppointmentCid", 'String'>;
        readonly deletedAt: FieldRef<"AppointmentCid", 'DateTime'>;
        readonly deletedById: FieldRef<"AppointmentCid", 'String'>;
        readonly deleted: FieldRef<"AppointmentCid", 'Boolean'>;
        readonly organizationId: FieldRef<"AppointmentCid", 'String'>;
        readonly appointmentId: FieldRef<"AppointmentCid", 'String'>;
        readonly cidId: FieldRef<"AppointmentCid", 'String'>;
    }

    export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } };
        /**
         * Fields of the Appointment model
         */
        readonly fields: AppointmentFieldRefs;
        /**
         * Find zero or one Appointment that matches the filter.
         * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
         * @example
         * // Get one Appointment
         * const appointment = await prisma.appointment.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
         * @example
         * // Get one Appointment
         * const appointment = await prisma.appointment.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Appointment that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
         * @example
         * // Get one Appointment
         * const appointment = await prisma.appointment.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Appointment that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
         * @example
         * // Get one Appointment
         * const appointment = await prisma.appointment.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Appointments that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Appointments
         * const appointments = await prisma.appointment.findMany()
         *
         * // Get first 10 Appointments
         * const appointments = await prisma.appointment.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
         */
        findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Appointment.
         * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
         * @example
         * // Create one Appointment
         * const Appointment = await prisma.appointment.create({
         *   data: {
         *     // ... data to create a Appointment
         *   }
         * })
         */
        create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Appointments.
         * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
         * @example
         * // Create many Appointments
         * const appointment = await prisma.appointment.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Appointments and returns the data saved in the database.
         * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
         * @example
         * // Create many Appointments
         * const appointment = await prisma.appointment.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Appointments and only return the `id`
         * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Appointment.
         * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
         * @example
         * // Delete one Appointment
         * const Appointment = await prisma.appointment.delete({
         *   where: {
         *     // ... filter to delete one Appointment
         *   }
         * })
         */
        delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Appointment.
         * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
         * @example
         * // Update one Appointment
         * const appointment = await prisma.appointment.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Appointments.
         * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
         * @example
         * // Delete a few Appointments
         * const { count } = await prisma.appointment.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Appointments.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Appointments
         * const appointment = await prisma.appointment.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Appointments and returns the data updated in the database.
         * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
         * @example
         * // Update many Appointments
         * const appointment = await prisma.appointment.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Appointments and only return the `id`
         * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Appointment.
         * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
         * @example
         * // Update or create a Appointment
         * const appointment = await prisma.appointment.upsert({
         *   create: {
         *     // ... data to create a Appointment
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Appointment we want to update
         *   }
         * })
         */
        upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Appointments.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
         * @example
         * // Count the number of Appointments
         * const count = await prisma.appointment.count({
         *   where: {
         *     // ... the filter for the Appointments we want to count
         *   }
         * })
         */
        count<T extends AppointmentCountArgs>(args?: Subset<T, AppointmentCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Appointment.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>;
        /**
         * Group by Appointment.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AppointmentGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends AppointmentGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Appointment.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Appointment$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Appointment$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Appointment$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Appointment$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        followUp<T extends Appointment$followUpArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$followUpArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        predecessorFollowUp<T extends Appointment$predecessorFollowUpArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$predecessorFollowUpArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        cids<T extends Appointment$cidsArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$cidsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentCidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        allergies<T extends Appointment$allergiesArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$allergiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        medications<T extends Appointment$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        comorbidities<T extends Appointment$comorbiditiesArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$comorbiditiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        eventCalendar<T extends Appointment$eventCalendarArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$eventCalendarArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Appointment model
     */
    interface AppointmentFieldRefs {
        readonly id: FieldRef<"Appointment", 'String'>;
        readonly type: FieldRef<"Appointment", 'String'>;
        readonly createdAt: FieldRef<"Appointment", 'DateTime'>;
        readonly createdById: FieldRef<"Appointment", 'String'>;
        readonly updatedAt: FieldRef<"Appointment", 'DateTime'>;
        readonly updatedById: FieldRef<"Appointment", 'String'>;
        readonly deletedAt: FieldRef<"Appointment", 'DateTime'>;
        readonly deletedById: FieldRef<"Appointment", 'String'>;
        readonly deleted: FieldRef<"Appointment", 'Boolean'>;
        readonly organizationId: FieldRef<"Appointment", 'String'>;
        readonly motive: FieldRef<"Appointment", 'String'>;
        readonly subjective: FieldRef<"Appointment", 'String'>;
        readonly objective: FieldRef<"Appointment", 'String'>;
        readonly evaluation: FieldRef<"Appointment", 'String'>;
        readonly plan: FieldRef<"Appointment", 'String'>;
        readonly startDate: FieldRef<"Appointment", 'DateTime'>;
        readonly endDate: FieldRef<"Appointment", 'DateTime'>;
        readonly sickNoteDays: FieldRef<"Appointment", 'Int'>;
        readonly category: FieldRef<"Appointment", 'AppointmentCategory'>;
        readonly status: FieldRef<"Appointment", 'AppointmentStatus'>;
        readonly followUpId: FieldRef<"Appointment", 'String'>;
        readonly patientId: FieldRef<"Appointment", 'String'>;
    }

    export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } };
        /**
         * Fields of the Patient model
         */
        readonly fields: PatientFieldRefs;
        /**
         * Find zero or one Patient that matches the filter.
         * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
         * @example
         * // Get one Patient
         * const patient = await prisma.patient.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
         * @example
         * // Get one Patient
         * const patient = await prisma.patient.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Patient that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientFindFirstArgs} args - Arguments to find a Patient
         * @example
         * // Get one Patient
         * const patient = await prisma.patient.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Patient that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
         * @example
         * // Get one Patient
         * const patient = await prisma.patient.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Patients that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Patients
         * const patients = await prisma.patient.findMany()
         *
         * // Get first 10 Patients
         * const patients = await prisma.patient.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
         */
        findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Patient.
         * @param {PatientCreateArgs} args - Arguments to create a Patient.
         * @example
         * // Create one Patient
         * const Patient = await prisma.patient.create({
         *   data: {
         *     // ... data to create a Patient
         *   }
         * })
         */
        create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Patients.
         * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
         * @example
         * // Create many Patients
         * const patient = await prisma.patient.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Patients and returns the data saved in the database.
         * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
         * @example
         * // Create many Patients
         * const patient = await prisma.patient.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Patients and only return the `id`
         * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Patient.
         * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
         * @example
         * // Delete one Patient
         * const Patient = await prisma.patient.delete({
         *   where: {
         *     // ... filter to delete one Patient
         *   }
         * })
         */
        delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Patient.
         * @param {PatientUpdateArgs} args - Arguments to update one Patient.
         * @example
         * // Update one Patient
         * const patient = await prisma.patient.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Patients.
         * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
         * @example
         * // Delete a few Patients
         * const { count } = await prisma.patient.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Patients.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Patients
         * const patient = await prisma.patient.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Patients and returns the data updated in the database.
         * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
         * @example
         * // Update many Patients
         * const patient = await prisma.patient.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Patients and only return the `id`
         * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Patient.
         * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
         * @example
         * // Update or create a Patient
         * const patient = await prisma.patient.upsert({
         *   create: {
         *     // ... data to create a Patient
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Patient we want to update
         *   }
         * })
         */
        upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Patients.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientCountArgs} args - Arguments to filter Patients to count.
         * @example
         * // Count the number of Patients
         * const count = await prisma.patient.count({
         *   where: {
         *     // ... the filter for the Patients we want to count
         *   }
         * })
         */
        count<T extends PatientCountArgs>(args?: Subset<T, PatientCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], PatientCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Patient.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>;
        /**
         * Group by Patient.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {PatientGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends PatientGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Patient.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Patient$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Patient$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Patient$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Patient$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Patient$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Patient$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Patient$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Patient$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        user<T extends Patient$userArgs<ExtArgs> = {}>(args?: Subset<T, Patient$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        appointments<T extends Patient$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        vaccinations<T extends Patient$vaccinationsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$vaccinationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        allergies<T extends Patient$allergiesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$allergiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        medications<T extends Patient$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        examResults<T extends Patient$examResultsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$examResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        comorbidities<T extends Patient$comorbiditiesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$comorbiditiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        surgeries<T extends Patient$surgeriesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$surgeriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        healthPlans<T extends Patient$healthPlansArgs<ExtArgs> = {}>(args?: Subset<T, Patient$healthPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Patient model
     */
    interface PatientFieldRefs {
        readonly id: FieldRef<"Patient", 'String'>;
        readonly type: FieldRef<"Patient", 'String'>;
        readonly createdAt: FieldRef<"Patient", 'DateTime'>;
        readonly createdById: FieldRef<"Patient", 'String'>;
        readonly updatedAt: FieldRef<"Patient", 'DateTime'>;
        readonly updatedById: FieldRef<"Patient", 'String'>;
        readonly deletedAt: FieldRef<"Patient", 'DateTime'>;
        readonly deletedById: FieldRef<"Patient", 'String'>;
        readonly deleted: FieldRef<"Patient", 'Boolean'>;
        readonly organizationId: FieldRef<"Patient", 'String'>;
        readonly name: FieldRef<"Patient", 'String'>;
        readonly cpf: FieldRef<"Patient", 'String'>;
        readonly cellphone: FieldRef<"Patient", 'String'>;
        readonly email: FieldRef<"Patient", 'String'>;
        readonly sex: FieldRef<"Patient", 'Sex'>;
        readonly responsible: FieldRef<"Patient", 'String'>;
        readonly nationality: FieldRef<"Patient", 'String'>;
        readonly race: FieldRef<"Patient", 'Race'>;
        readonly state: FieldRef<"Patient", 'String'>;
        readonly city: FieldRef<"Patient", 'String'>;
        readonly zipcode: FieldRef<"Patient", 'String'>;
        readonly neighborhood: FieldRef<"Patient", 'String'>;
        readonly street: FieldRef<"Patient", 'String'>;
        readonly number: FieldRef<"Patient", 'String'>;
        readonly complement: FieldRef<"Patient", 'String'>;
        readonly occupation: FieldRef<"Patient", 'String'>;
        readonly sexualOrientation: FieldRef<"Patient", 'String'>;
        readonly civilStatus: FieldRef<"Patient", 'CivilStatus'>;
        readonly bloodType: FieldRef<"Patient", 'BloodType'>;
        readonly genderIdentity: FieldRef<"Patient", 'GenderIdentity'>;
        readonly password: FieldRef<"Patient", 'String'>;
        readonly userId: FieldRef<"Patient", 'String'>;
    }

    export interface VaccinationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vaccinations'], meta: { name: 'Vaccinations' } };
        /**
         * Fields of the Vaccinations model
         */
        readonly fields: VaccinationsFieldRefs;
        /**
         * Find zero or one Vaccinations that matches the filter.
         * @param {VaccinationsFindUniqueArgs} args - Arguments to find a Vaccinations
         * @example
         * // Get one Vaccinations
         * const vaccinations = await prisma.vaccinations.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends VaccinationsFindUniqueArgs>(args: SelectSubset<T, VaccinationsFindUniqueArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Vaccinations that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {VaccinationsFindUniqueOrThrowArgs} args - Arguments to find a Vaccinations
         * @example
         * // Get one Vaccinations
         * const vaccinations = await prisma.vaccinations.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends VaccinationsFindUniqueOrThrowArgs>(args: SelectSubset<T, VaccinationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Vaccinations that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsFindFirstArgs} args - Arguments to find a Vaccinations
         * @example
         * // Get one Vaccinations
         * const vaccinations = await prisma.vaccinations.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends VaccinationsFindFirstArgs>(args?: SelectSubset<T, VaccinationsFindFirstArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Vaccinations that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsFindFirstOrThrowArgs} args - Arguments to find a Vaccinations
         * @example
         * // Get one Vaccinations
         * const vaccinations = await prisma.vaccinations.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends VaccinationsFindFirstOrThrowArgs>(args?: SelectSubset<T, VaccinationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Vaccinations that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Vaccinations
         * const vaccinations = await prisma.vaccinations.findMany()
         *
         * // Get first 10 Vaccinations
         * const vaccinations = await prisma.vaccinations.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const vaccinationsWithIdOnly = await prisma.vaccinations.findMany({ select: { id: true } })
         */
        findMany<T extends VaccinationsFindManyArgs>(args?: SelectSubset<T, VaccinationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Vaccinations.
         * @param {VaccinationsCreateArgs} args - Arguments to create a Vaccinations.
         * @example
         * // Create one Vaccinations
         * const Vaccinations = await prisma.vaccinations.create({
         *   data: {
         *     // ... data to create a Vaccinations
         *   }
         * })
         */
        create<T extends VaccinationsCreateArgs>(args: SelectSubset<T, VaccinationsCreateArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Vaccinations.
         * @param {VaccinationsCreateManyArgs} args - Arguments to create many Vaccinations.
         * @example
         * // Create many Vaccinations
         * const vaccinations = await prisma.vaccinations.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends VaccinationsCreateManyArgs>(args?: SelectSubset<T, VaccinationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Vaccinations and returns the data saved in the database.
         * @param {VaccinationsCreateManyAndReturnArgs} args - Arguments to create many Vaccinations.
         * @example
         * // Create many Vaccinations
         * const vaccinations = await prisma.vaccinations.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Vaccinations and only return the `id`
         * const vaccinationsWithIdOnly = await prisma.vaccinations.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends VaccinationsCreateManyAndReturnArgs>(args?: SelectSubset<T, VaccinationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Vaccinations.
         * @param {VaccinationsDeleteArgs} args - Arguments to delete one Vaccinations.
         * @example
         * // Delete one Vaccinations
         * const Vaccinations = await prisma.vaccinations.delete({
         *   where: {
         *     // ... filter to delete one Vaccinations
         *   }
         * })
         */
        delete<T extends VaccinationsDeleteArgs>(args: SelectSubset<T, VaccinationsDeleteArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Vaccinations.
         * @param {VaccinationsUpdateArgs} args - Arguments to update one Vaccinations.
         * @example
         * // Update one Vaccinations
         * const vaccinations = await prisma.vaccinations.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends VaccinationsUpdateArgs>(args: SelectSubset<T, VaccinationsUpdateArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Vaccinations.
         * @param {VaccinationsDeleteManyArgs} args - Arguments to filter Vaccinations to delete.
         * @example
         * // Delete a few Vaccinations
         * const { count } = await prisma.vaccinations.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends VaccinationsDeleteManyArgs>(args?: SelectSubset<T, VaccinationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Vaccinations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Vaccinations
         * const vaccinations = await prisma.vaccinations.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends VaccinationsUpdateManyArgs>(args: SelectSubset<T, VaccinationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Vaccinations and returns the data updated in the database.
         * @param {VaccinationsUpdateManyAndReturnArgs} args - Arguments to update many Vaccinations.
         * @example
         * // Update many Vaccinations
         * const vaccinations = await prisma.vaccinations.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Vaccinations and only return the `id`
         * const vaccinationsWithIdOnly = await prisma.vaccinations.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends VaccinationsUpdateManyAndReturnArgs>(args: SelectSubset<T, VaccinationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Vaccinations.
         * @param {VaccinationsUpsertArgs} args - Arguments to update or create a Vaccinations.
         * @example
         * // Update or create a Vaccinations
         * const vaccinations = await prisma.vaccinations.upsert({
         *   create: {
         *     // ... data to create a Vaccinations
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Vaccinations we want to update
         *   }
         * })
         */
        upsert<T extends VaccinationsUpsertArgs>(args: SelectSubset<T, VaccinationsUpsertArgs<ExtArgs>>): Prisma__VaccinationsClient<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Vaccinations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsCountArgs} args - Arguments to filter Vaccinations to count.
         * @example
         * // Count the number of Vaccinations
         * const count = await prisma.vaccinations.count({
         *   where: {
         *     // ... the filter for the Vaccinations we want to count
         *   }
         * })
         */
        count<T extends VaccinationsCountArgs>(args?: Subset<T, VaccinationsCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], VaccinationsCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Vaccinations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends VaccinationsAggregateArgs>(args: Subset<T, VaccinationsAggregateArgs>): Prisma.PrismaPromise<GetVaccinationsAggregateType<T>>;
        /**
         * Group by Vaccinations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends VaccinationsGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VaccinationsGroupByArgs['orderBy'] }
        : { orderBy?: VaccinationsGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, VaccinationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVaccinationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Vaccinations.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__VaccinationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Vaccinations$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Vaccinations$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Vaccinations$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Vaccinations$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Vaccinations$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Vaccinations$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Vaccinations$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Vaccinations$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        vaccinationsValues<T extends VaccinationsValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VaccinationsValuesDefaultArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Vaccinations model
     */
    interface VaccinationsFieldRefs {
        readonly id: FieldRef<"Vaccinations", 'String'>;
        readonly type: FieldRef<"Vaccinations", 'String'>;
        readonly createdAt: FieldRef<"Vaccinations", 'DateTime'>;
        readonly createdById: FieldRef<"Vaccinations", 'String'>;
        readonly updatedAt: FieldRef<"Vaccinations", 'DateTime'>;
        readonly updatedById: FieldRef<"Vaccinations", 'String'>;
        readonly deletedAt: FieldRef<"Vaccinations", 'DateTime'>;
        readonly deletedById: FieldRef<"Vaccinations", 'String'>;
        readonly deleted: FieldRef<"Vaccinations", 'Boolean'>;
        readonly organizationId: FieldRef<"Vaccinations", 'String'>;
        readonly patientId: FieldRef<"Vaccinations", 'String'>;
        readonly vaccinationsValuesId: FieldRef<"Vaccinations", 'String'>;
    }

    export interface VaccinationsValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VaccinationsValues'], meta: { name: 'VaccinationsValues' } };
        /**
         * Fields of the VaccinationsValues model
         */
        readonly fields: VaccinationsValuesFieldRefs;
        /**
         * Find zero or one VaccinationsValues that matches the filter.
         * @param {VaccinationsValuesFindUniqueArgs} args - Arguments to find a VaccinationsValues
         * @example
         * // Get one VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends VaccinationsValuesFindUniqueArgs>(args: SelectSubset<T, VaccinationsValuesFindUniqueArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one VaccinationsValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {VaccinationsValuesFindUniqueOrThrowArgs} args - Arguments to find a VaccinationsValues
         * @example
         * // Get one VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends VaccinationsValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, VaccinationsValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first VaccinationsValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesFindFirstArgs} args - Arguments to find a VaccinationsValues
         * @example
         * // Get one VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends VaccinationsValuesFindFirstArgs>(args?: SelectSubset<T, VaccinationsValuesFindFirstArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first VaccinationsValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesFindFirstOrThrowArgs} args - Arguments to find a VaccinationsValues
         * @example
         * // Get one VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends VaccinationsValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, VaccinationsValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more VaccinationsValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.findMany()
         *
         * // Get first 10 VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const vaccinationsValuesWithIdOnly = await prisma.vaccinationsValues.findMany({ select: { id: true } })
         */
        findMany<T extends VaccinationsValuesFindManyArgs>(args?: SelectSubset<T, VaccinationsValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a VaccinationsValues.
         * @param {VaccinationsValuesCreateArgs} args - Arguments to create a VaccinationsValues.
         * @example
         * // Create one VaccinationsValues
         * const VaccinationsValues = await prisma.vaccinationsValues.create({
         *   data: {
         *     // ... data to create a VaccinationsValues
         *   }
         * })
         */
        create<T extends VaccinationsValuesCreateArgs>(args: SelectSubset<T, VaccinationsValuesCreateArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many VaccinationsValues.
         * @param {VaccinationsValuesCreateManyArgs} args - Arguments to create many VaccinationsValues.
         * @example
         * // Create many VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends VaccinationsValuesCreateManyArgs>(args?: SelectSubset<T, VaccinationsValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many VaccinationsValues and returns the data saved in the database.
         * @param {VaccinationsValuesCreateManyAndReturnArgs} args - Arguments to create many VaccinationsValues.
         * @example
         * // Create many VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many VaccinationsValues and only return the `id`
         * const vaccinationsValuesWithIdOnly = await prisma.vaccinationsValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends VaccinationsValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, VaccinationsValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a VaccinationsValues.
         * @param {VaccinationsValuesDeleteArgs} args - Arguments to delete one VaccinationsValues.
         * @example
         * // Delete one VaccinationsValues
         * const VaccinationsValues = await prisma.vaccinationsValues.delete({
         *   where: {
         *     // ... filter to delete one VaccinationsValues
         *   }
         * })
         */
        delete<T extends VaccinationsValuesDeleteArgs>(args: SelectSubset<T, VaccinationsValuesDeleteArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one VaccinationsValues.
         * @param {VaccinationsValuesUpdateArgs} args - Arguments to update one VaccinationsValues.
         * @example
         * // Update one VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends VaccinationsValuesUpdateArgs>(args: SelectSubset<T, VaccinationsValuesUpdateArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more VaccinationsValues.
         * @param {VaccinationsValuesDeleteManyArgs} args - Arguments to filter VaccinationsValues to delete.
         * @example
         * // Delete a few VaccinationsValues
         * const { count } = await prisma.vaccinationsValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends VaccinationsValuesDeleteManyArgs>(args?: SelectSubset<T, VaccinationsValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more VaccinationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends VaccinationsValuesUpdateManyArgs>(args: SelectSubset<T, VaccinationsValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more VaccinationsValues and returns the data updated in the database.
         * @param {VaccinationsValuesUpdateManyAndReturnArgs} args - Arguments to update many VaccinationsValues.
         * @example
         * // Update many VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more VaccinationsValues and only return the `id`
         * const vaccinationsValuesWithIdOnly = await prisma.vaccinationsValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends VaccinationsValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, VaccinationsValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one VaccinationsValues.
         * @param {VaccinationsValuesUpsertArgs} args - Arguments to update or create a VaccinationsValues.
         * @example
         * // Update or create a VaccinationsValues
         * const vaccinationsValues = await prisma.vaccinationsValues.upsert({
         *   create: {
         *     // ... data to create a VaccinationsValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the VaccinationsValues we want to update
         *   }
         * })
         */
        upsert<T extends VaccinationsValuesUpsertArgs>(args: SelectSubset<T, VaccinationsValuesUpsertArgs<ExtArgs>>): Prisma__VaccinationsValuesClient<$Result.GetResult<Prisma.$VaccinationsValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of VaccinationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesCountArgs} args - Arguments to filter VaccinationsValues to count.
         * @example
         * // Count the number of VaccinationsValues
         * const count = await prisma.vaccinationsValues.count({
         *   where: {
         *     // ... the filter for the VaccinationsValues we want to count
         *   }
         * })
         */
        count<T extends VaccinationsValuesCountArgs>(args?: Subset<T, VaccinationsValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], VaccinationsValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a VaccinationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends VaccinationsValuesAggregateArgs>(args: Subset<T, VaccinationsValuesAggregateArgs>): Prisma.PrismaPromise<GetVaccinationsValuesAggregateType<T>>;
        /**
         * Group by VaccinationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {VaccinationsValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends VaccinationsValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VaccinationsValuesGroupByArgs['orderBy'] }
        : { orderBy?: VaccinationsValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, VaccinationsValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVaccinationsValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for VaccinationsValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__VaccinationsValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        vaccinations<T extends VaccinationsValues$vaccinationsArgs<ExtArgs> = {}>(args?: Subset<T, VaccinationsValues$vaccinationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VaccinationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the VaccinationsValues model
     */
    interface VaccinationsValuesFieldRefs {
        readonly id: FieldRef<"VaccinationsValues", 'String'>;
        readonly value: FieldRef<"VaccinationsValues", 'String'>;
        readonly createdAt: FieldRef<"VaccinationsValues", 'DateTime'>;
    }

    export interface AllergiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allergies'], meta: { name: 'Allergies' } };
        /**
         * Fields of the Allergies model
         */
        readonly fields: AllergiesFieldRefs;
        /**
         * Find zero or one Allergies that matches the filter.
         * @param {AllergiesFindUniqueArgs} args - Arguments to find a Allergies
         * @example
         * // Get one Allergies
         * const allergies = await prisma.allergies.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends AllergiesFindUniqueArgs>(args: SelectSubset<T, AllergiesFindUniqueArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Allergies that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {AllergiesFindUniqueOrThrowArgs} args - Arguments to find a Allergies
         * @example
         * // Get one Allergies
         * const allergies = await prisma.allergies.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends AllergiesFindUniqueOrThrowArgs>(args: SelectSubset<T, AllergiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Allergies that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesFindFirstArgs} args - Arguments to find a Allergies
         * @example
         * // Get one Allergies
         * const allergies = await prisma.allergies.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends AllergiesFindFirstArgs>(args?: SelectSubset<T, AllergiesFindFirstArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Allergies that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesFindFirstOrThrowArgs} args - Arguments to find a Allergies
         * @example
         * // Get one Allergies
         * const allergies = await prisma.allergies.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends AllergiesFindFirstOrThrowArgs>(args?: SelectSubset<T, AllergiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Allergies that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Allergies
         * const allergies = await prisma.allergies.findMany()
         *
         * // Get first 10 Allergies
         * const allergies = await prisma.allergies.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const allergiesWithIdOnly = await prisma.allergies.findMany({ select: { id: true } })
         */
        findMany<T extends AllergiesFindManyArgs>(args?: SelectSubset<T, AllergiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Allergies.
         * @param {AllergiesCreateArgs} args - Arguments to create a Allergies.
         * @example
         * // Create one Allergies
         * const Allergies = await prisma.allergies.create({
         *   data: {
         *     // ... data to create a Allergies
         *   }
         * })
         */
        create<T extends AllergiesCreateArgs>(args: SelectSubset<T, AllergiesCreateArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Allergies.
         * @param {AllergiesCreateManyArgs} args - Arguments to create many Allergies.
         * @example
         * // Create many Allergies
         * const allergies = await prisma.allergies.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends AllergiesCreateManyArgs>(args?: SelectSubset<T, AllergiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Allergies and returns the data saved in the database.
         * @param {AllergiesCreateManyAndReturnArgs} args - Arguments to create many Allergies.
         * @example
         * // Create many Allergies
         * const allergies = await prisma.allergies.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Allergies and only return the `id`
         * const allergiesWithIdOnly = await prisma.allergies.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends AllergiesCreateManyAndReturnArgs>(args?: SelectSubset<T, AllergiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Allergies.
         * @param {AllergiesDeleteArgs} args - Arguments to delete one Allergies.
         * @example
         * // Delete one Allergies
         * const Allergies = await prisma.allergies.delete({
         *   where: {
         *     // ... filter to delete one Allergies
         *   }
         * })
         */
        delete<T extends AllergiesDeleteArgs>(args: SelectSubset<T, AllergiesDeleteArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Allergies.
         * @param {AllergiesUpdateArgs} args - Arguments to update one Allergies.
         * @example
         * // Update one Allergies
         * const allergies = await prisma.allergies.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends AllergiesUpdateArgs>(args: SelectSubset<T, AllergiesUpdateArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Allergies.
         * @param {AllergiesDeleteManyArgs} args - Arguments to filter Allergies to delete.
         * @example
         * // Delete a few Allergies
         * const { count } = await prisma.allergies.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends AllergiesDeleteManyArgs>(args?: SelectSubset<T, AllergiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Allergies.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Allergies
         * const allergies = await prisma.allergies.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends AllergiesUpdateManyArgs>(args: SelectSubset<T, AllergiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Allergies and returns the data updated in the database.
         * @param {AllergiesUpdateManyAndReturnArgs} args - Arguments to update many Allergies.
         * @example
         * // Update many Allergies
         * const allergies = await prisma.allergies.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Allergies and only return the `id`
         * const allergiesWithIdOnly = await prisma.allergies.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends AllergiesUpdateManyAndReturnArgs>(args: SelectSubset<T, AllergiesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Allergies.
         * @param {AllergiesUpsertArgs} args - Arguments to update or create a Allergies.
         * @example
         * // Update or create a Allergies
         * const allergies = await prisma.allergies.upsert({
         *   create: {
         *     // ... data to create a Allergies
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Allergies we want to update
         *   }
         * })
         */
        upsert<T extends AllergiesUpsertArgs>(args: SelectSubset<T, AllergiesUpsertArgs<ExtArgs>>): Prisma__AllergiesClient<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Allergies.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesCountArgs} args - Arguments to filter Allergies to count.
         * @example
         * // Count the number of Allergies
         * const count = await prisma.allergies.count({
         *   where: {
         *     // ... the filter for the Allergies we want to count
         *   }
         * })
         */
        count<T extends AllergiesCountArgs>(args?: Subset<T, AllergiesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], AllergiesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Allergies.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends AllergiesAggregateArgs>(args: Subset<T, AllergiesAggregateArgs>): Prisma.PrismaPromise<GetAllergiesAggregateType<T>>;
        /**
         * Group by Allergies.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends AllergiesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergiesGroupByArgs['orderBy'] }
        : { orderBy?: AllergiesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, AllergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Allergies.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__AllergiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Allergies$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Allergies$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Allergies$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Allergies$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Allergies$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Allergies$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Allergies$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Allergies$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends Allergies$patientArgs<ExtArgs> = {}>(args?: Subset<T, Allergies$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        allergiesValues<T extends AllergiesValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AllergiesValuesDefaultArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        appointment<T extends Allergies$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, Allergies$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Allergies model
     */
    interface AllergiesFieldRefs {
        readonly id: FieldRef<"Allergies", 'String'>;
        readonly type: FieldRef<"Allergies", 'String'>;
        readonly createdAt: FieldRef<"Allergies", 'DateTime'>;
        readonly createdById: FieldRef<"Allergies", 'String'>;
        readonly updatedAt: FieldRef<"Allergies", 'DateTime'>;
        readonly updatedById: FieldRef<"Allergies", 'String'>;
        readonly deletedAt: FieldRef<"Allergies", 'DateTime'>;
        readonly deletedById: FieldRef<"Allergies", 'String'>;
        readonly deleted: FieldRef<"Allergies", 'Boolean'>;
        readonly organizationId: FieldRef<"Allergies", 'String'>;
        readonly patientId: FieldRef<"Allergies", 'String'>;
        readonly allergiesValuesId: FieldRef<"Allergies", 'String'>;
        readonly appointmentId: FieldRef<"Allergies", 'String'>;
    }

    export interface AllergiesValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AllergiesValues'], meta: { name: 'AllergiesValues' } };
        /**
         * Fields of the AllergiesValues model
         */
        readonly fields: AllergiesValuesFieldRefs;
        /**
         * Find zero or one AllergiesValues that matches the filter.
         * @param {AllergiesValuesFindUniqueArgs} args - Arguments to find a AllergiesValues
         * @example
         * // Get one AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends AllergiesValuesFindUniqueArgs>(args: SelectSubset<T, AllergiesValuesFindUniqueArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one AllergiesValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {AllergiesValuesFindUniqueOrThrowArgs} args - Arguments to find a AllergiesValues
         * @example
         * // Get one AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends AllergiesValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, AllergiesValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first AllergiesValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesFindFirstArgs} args - Arguments to find a AllergiesValues
         * @example
         * // Get one AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends AllergiesValuesFindFirstArgs>(args?: SelectSubset<T, AllergiesValuesFindFirstArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first AllergiesValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesFindFirstOrThrowArgs} args - Arguments to find a AllergiesValues
         * @example
         * // Get one AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends AllergiesValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, AllergiesValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more AllergiesValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.findMany()
         *
         * // Get first 10 AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const allergiesValuesWithIdOnly = await prisma.allergiesValues.findMany({ select: { id: true } })
         */
        findMany<T extends AllergiesValuesFindManyArgs>(args?: SelectSubset<T, AllergiesValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a AllergiesValues.
         * @param {AllergiesValuesCreateArgs} args - Arguments to create a AllergiesValues.
         * @example
         * // Create one AllergiesValues
         * const AllergiesValues = await prisma.allergiesValues.create({
         *   data: {
         *     // ... data to create a AllergiesValues
         *   }
         * })
         */
        create<T extends AllergiesValuesCreateArgs>(args: SelectSubset<T, AllergiesValuesCreateArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many AllergiesValues.
         * @param {AllergiesValuesCreateManyArgs} args - Arguments to create many AllergiesValues.
         * @example
         * // Create many AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends AllergiesValuesCreateManyArgs>(args?: SelectSubset<T, AllergiesValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many AllergiesValues and returns the data saved in the database.
         * @param {AllergiesValuesCreateManyAndReturnArgs} args - Arguments to create many AllergiesValues.
         * @example
         * // Create many AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many AllergiesValues and only return the `id`
         * const allergiesValuesWithIdOnly = await prisma.allergiesValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends AllergiesValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, AllergiesValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a AllergiesValues.
         * @param {AllergiesValuesDeleteArgs} args - Arguments to delete one AllergiesValues.
         * @example
         * // Delete one AllergiesValues
         * const AllergiesValues = await prisma.allergiesValues.delete({
         *   where: {
         *     // ... filter to delete one AllergiesValues
         *   }
         * })
         */
        delete<T extends AllergiesValuesDeleteArgs>(args: SelectSubset<T, AllergiesValuesDeleteArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one AllergiesValues.
         * @param {AllergiesValuesUpdateArgs} args - Arguments to update one AllergiesValues.
         * @example
         * // Update one AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends AllergiesValuesUpdateArgs>(args: SelectSubset<T, AllergiesValuesUpdateArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more AllergiesValues.
         * @param {AllergiesValuesDeleteManyArgs} args - Arguments to filter AllergiesValues to delete.
         * @example
         * // Delete a few AllergiesValues
         * const { count } = await prisma.allergiesValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends AllergiesValuesDeleteManyArgs>(args?: SelectSubset<T, AllergiesValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more AllergiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends AllergiesValuesUpdateManyArgs>(args: SelectSubset<T, AllergiesValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more AllergiesValues and returns the data updated in the database.
         * @param {AllergiesValuesUpdateManyAndReturnArgs} args - Arguments to update many AllergiesValues.
         * @example
         * // Update many AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more AllergiesValues and only return the `id`
         * const allergiesValuesWithIdOnly = await prisma.allergiesValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends AllergiesValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, AllergiesValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one AllergiesValues.
         * @param {AllergiesValuesUpsertArgs} args - Arguments to update or create a AllergiesValues.
         * @example
         * // Update or create a AllergiesValues
         * const allergiesValues = await prisma.allergiesValues.upsert({
         *   create: {
         *     // ... data to create a AllergiesValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the AllergiesValues we want to update
         *   }
         * })
         */
        upsert<T extends AllergiesValuesUpsertArgs>(args: SelectSubset<T, AllergiesValuesUpsertArgs<ExtArgs>>): Prisma__AllergiesValuesClient<$Result.GetResult<Prisma.$AllergiesValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of AllergiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesCountArgs} args - Arguments to filter AllergiesValues to count.
         * @example
         * // Count the number of AllergiesValues
         * const count = await prisma.allergiesValues.count({
         *   where: {
         *     // ... the filter for the AllergiesValues we want to count
         *   }
         * })
         */
        count<T extends AllergiesValuesCountArgs>(args?: Subset<T, AllergiesValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], AllergiesValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a AllergiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends AllergiesValuesAggregateArgs>(args: Subset<T, AllergiesValuesAggregateArgs>): Prisma.PrismaPromise<GetAllergiesValuesAggregateType<T>>;
        /**
         * Group by AllergiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {AllergiesValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends AllergiesValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergiesValuesGroupByArgs['orderBy'] }
        : { orderBy?: AllergiesValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, AllergiesValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergiesValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for AllergiesValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__AllergiesValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        allergies<T extends AllergiesValues$allergiesArgs<ExtArgs> = {}>(args?: Subset<T, AllergiesValues$allergiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the AllergiesValues model
     */
    interface AllergiesValuesFieldRefs {
        readonly id: FieldRef<"AllergiesValues", 'String'>;
        readonly value: FieldRef<"AllergiesValues", 'String'>;
        readonly createdAt: FieldRef<"AllergiesValues", 'DateTime'>;
    }

    export interface MedicationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medications'], meta: { name: 'Medications' } };
        /**
         * Fields of the Medications model
         */
        readonly fields: MedicationsFieldRefs;
        /**
         * Find zero or one Medications that matches the filter.
         * @param {MedicationsFindUniqueArgs} args - Arguments to find a Medications
         * @example
         * // Get one Medications
         * const medications = await prisma.medications.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends MedicationsFindUniqueArgs>(args: SelectSubset<T, MedicationsFindUniqueArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Medications that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {MedicationsFindUniqueOrThrowArgs} args - Arguments to find a Medications
         * @example
         * // Get one Medications
         * const medications = await prisma.medications.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends MedicationsFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Medications that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsFindFirstArgs} args - Arguments to find a Medications
         * @example
         * // Get one Medications
         * const medications = await prisma.medications.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends MedicationsFindFirstArgs>(args?: SelectSubset<T, MedicationsFindFirstArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Medications that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsFindFirstOrThrowArgs} args - Arguments to find a Medications
         * @example
         * // Get one Medications
         * const medications = await prisma.medications.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends MedicationsFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Medications that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Medications
         * const medications = await prisma.medications.findMany()
         *
         * // Get first 10 Medications
         * const medications = await prisma.medications.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const medicationsWithIdOnly = await prisma.medications.findMany({ select: { id: true } })
         */
        findMany<T extends MedicationsFindManyArgs>(args?: SelectSubset<T, MedicationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Medications.
         * @param {MedicationsCreateArgs} args - Arguments to create a Medications.
         * @example
         * // Create one Medications
         * const Medications = await prisma.medications.create({
         *   data: {
         *     // ... data to create a Medications
         *   }
         * })
         */
        create<T extends MedicationsCreateArgs>(args: SelectSubset<T, MedicationsCreateArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Medications.
         * @param {MedicationsCreateManyArgs} args - Arguments to create many Medications.
         * @example
         * // Create many Medications
         * const medications = await prisma.medications.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends MedicationsCreateManyArgs>(args?: SelectSubset<T, MedicationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Medications and returns the data saved in the database.
         * @param {MedicationsCreateManyAndReturnArgs} args - Arguments to create many Medications.
         * @example
         * // Create many Medications
         * const medications = await prisma.medications.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Medications and only return the `id`
         * const medicationsWithIdOnly = await prisma.medications.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends MedicationsCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Medications.
         * @param {MedicationsDeleteArgs} args - Arguments to delete one Medications.
         * @example
         * // Delete one Medications
         * const Medications = await prisma.medications.delete({
         *   where: {
         *     // ... filter to delete one Medications
         *   }
         * })
         */
        delete<T extends MedicationsDeleteArgs>(args: SelectSubset<T, MedicationsDeleteArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Medications.
         * @param {MedicationsUpdateArgs} args - Arguments to update one Medications.
         * @example
         * // Update one Medications
         * const medications = await prisma.medications.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends MedicationsUpdateArgs>(args: SelectSubset<T, MedicationsUpdateArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Medications.
         * @param {MedicationsDeleteManyArgs} args - Arguments to filter Medications to delete.
         * @example
         * // Delete a few Medications
         * const { count } = await prisma.medications.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends MedicationsDeleteManyArgs>(args?: SelectSubset<T, MedicationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Medications.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Medications
         * const medications = await prisma.medications.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends MedicationsUpdateManyArgs>(args: SelectSubset<T, MedicationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Medications and returns the data updated in the database.
         * @param {MedicationsUpdateManyAndReturnArgs} args - Arguments to update many Medications.
         * @example
         * // Update many Medications
         * const medications = await prisma.medications.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Medications and only return the `id`
         * const medicationsWithIdOnly = await prisma.medications.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends MedicationsUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Medications.
         * @param {MedicationsUpsertArgs} args - Arguments to update or create a Medications.
         * @example
         * // Update or create a Medications
         * const medications = await prisma.medications.upsert({
         *   create: {
         *     // ... data to create a Medications
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Medications we want to update
         *   }
         * })
         */
        upsert<T extends MedicationsUpsertArgs>(args: SelectSubset<T, MedicationsUpsertArgs<ExtArgs>>): Prisma__MedicationsClient<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Medications.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsCountArgs} args - Arguments to filter Medications to count.
         * @example
         * // Count the number of Medications
         * const count = await prisma.medications.count({
         *   where: {
         *     // ... the filter for the Medications we want to count
         *   }
         * })
         */
        count<T extends MedicationsCountArgs>(args?: Subset<T, MedicationsCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], MedicationsCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Medications.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends MedicationsAggregateArgs>(args: Subset<T, MedicationsAggregateArgs>): Prisma.PrismaPromise<GetMedicationsAggregateType<T>>;
        /**
         * Group by Medications.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends MedicationsGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationsGroupByArgs['orderBy'] }
        : { orderBy?: MedicationsGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, MedicationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Medications.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__MedicationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Medications$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Medications$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Medications$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Medications$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Medications$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Medications$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Medications$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Medications$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends Medications$patientArgs<ExtArgs> = {}>(args?: Subset<T, Medications$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        medicationsValues<T extends MedicationsValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationsValuesDefaultArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        appointment<T extends Medications$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, Medications$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Medications model
     */
    interface MedicationsFieldRefs {
        readonly id: FieldRef<"Medications", 'String'>;
        readonly type: FieldRef<"Medications", 'String'>;
        readonly createdAt: FieldRef<"Medications", 'DateTime'>;
        readonly createdById: FieldRef<"Medications", 'String'>;
        readonly updatedAt: FieldRef<"Medications", 'DateTime'>;
        readonly updatedById: FieldRef<"Medications", 'String'>;
        readonly deletedAt: FieldRef<"Medications", 'DateTime'>;
        readonly deletedById: FieldRef<"Medications", 'String'>;
        readonly deleted: FieldRef<"Medications", 'Boolean'>;
        readonly organizationId: FieldRef<"Medications", 'String'>;
        readonly patientId: FieldRef<"Medications", 'String'>;
        readonly medicationsValuesId: FieldRef<"Medications", 'String'>;
        readonly appointmentId: FieldRef<"Medications", 'String'>;
    }

    export interface MedicationsValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicationsValues'], meta: { name: 'MedicationsValues' } };
        /**
         * Fields of the MedicationsValues model
         */
        readonly fields: MedicationsValuesFieldRefs;
        /**
         * Find zero or one MedicationsValues that matches the filter.
         * @param {MedicationsValuesFindUniqueArgs} args - Arguments to find a MedicationsValues
         * @example
         * // Get one MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends MedicationsValuesFindUniqueArgs>(args: SelectSubset<T, MedicationsValuesFindUniqueArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one MedicationsValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {MedicationsValuesFindUniqueOrThrowArgs} args - Arguments to find a MedicationsValues
         * @example
         * // Get one MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends MedicationsValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationsValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first MedicationsValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesFindFirstArgs} args - Arguments to find a MedicationsValues
         * @example
         * // Get one MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends MedicationsValuesFindFirstArgs>(args?: SelectSubset<T, MedicationsValuesFindFirstArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first MedicationsValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesFindFirstOrThrowArgs} args - Arguments to find a MedicationsValues
         * @example
         * // Get one MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends MedicationsValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationsValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more MedicationsValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.findMany()
         *
         * // Get first 10 MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const medicationsValuesWithIdOnly = await prisma.medicationsValues.findMany({ select: { id: true } })
         */
        findMany<T extends MedicationsValuesFindManyArgs>(args?: SelectSubset<T, MedicationsValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a MedicationsValues.
         * @param {MedicationsValuesCreateArgs} args - Arguments to create a MedicationsValues.
         * @example
         * // Create one MedicationsValues
         * const MedicationsValues = await prisma.medicationsValues.create({
         *   data: {
         *     // ... data to create a MedicationsValues
         *   }
         * })
         */
        create<T extends MedicationsValuesCreateArgs>(args: SelectSubset<T, MedicationsValuesCreateArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many MedicationsValues.
         * @param {MedicationsValuesCreateManyArgs} args - Arguments to create many MedicationsValues.
         * @example
         * // Create many MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends MedicationsValuesCreateManyArgs>(args?: SelectSubset<T, MedicationsValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many MedicationsValues and returns the data saved in the database.
         * @param {MedicationsValuesCreateManyAndReturnArgs} args - Arguments to create many MedicationsValues.
         * @example
         * // Create many MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many MedicationsValues and only return the `id`
         * const medicationsValuesWithIdOnly = await prisma.medicationsValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends MedicationsValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationsValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a MedicationsValues.
         * @param {MedicationsValuesDeleteArgs} args - Arguments to delete one MedicationsValues.
         * @example
         * // Delete one MedicationsValues
         * const MedicationsValues = await prisma.medicationsValues.delete({
         *   where: {
         *     // ... filter to delete one MedicationsValues
         *   }
         * })
         */
        delete<T extends MedicationsValuesDeleteArgs>(args: SelectSubset<T, MedicationsValuesDeleteArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one MedicationsValues.
         * @param {MedicationsValuesUpdateArgs} args - Arguments to update one MedicationsValues.
         * @example
         * // Update one MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends MedicationsValuesUpdateArgs>(args: SelectSubset<T, MedicationsValuesUpdateArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more MedicationsValues.
         * @param {MedicationsValuesDeleteManyArgs} args - Arguments to filter MedicationsValues to delete.
         * @example
         * // Delete a few MedicationsValues
         * const { count } = await prisma.medicationsValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends MedicationsValuesDeleteManyArgs>(args?: SelectSubset<T, MedicationsValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more MedicationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends MedicationsValuesUpdateManyArgs>(args: SelectSubset<T, MedicationsValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more MedicationsValues and returns the data updated in the database.
         * @param {MedicationsValuesUpdateManyAndReturnArgs} args - Arguments to update many MedicationsValues.
         * @example
         * // Update many MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more MedicationsValues and only return the `id`
         * const medicationsValuesWithIdOnly = await prisma.medicationsValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends MedicationsValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicationsValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one MedicationsValues.
         * @param {MedicationsValuesUpsertArgs} args - Arguments to update or create a MedicationsValues.
         * @example
         * // Update or create a MedicationsValues
         * const medicationsValues = await prisma.medicationsValues.upsert({
         *   create: {
         *     // ... data to create a MedicationsValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the MedicationsValues we want to update
         *   }
         * })
         */
        upsert<T extends MedicationsValuesUpsertArgs>(args: SelectSubset<T, MedicationsValuesUpsertArgs<ExtArgs>>): Prisma__MedicationsValuesClient<$Result.GetResult<Prisma.$MedicationsValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of MedicationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesCountArgs} args - Arguments to filter MedicationsValues to count.
         * @example
         * // Count the number of MedicationsValues
         * const count = await prisma.medicationsValues.count({
         *   where: {
         *     // ... the filter for the MedicationsValues we want to count
         *   }
         * })
         */
        count<T extends MedicationsValuesCountArgs>(args?: Subset<T, MedicationsValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], MedicationsValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a MedicationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends MedicationsValuesAggregateArgs>(args: Subset<T, MedicationsValuesAggregateArgs>): Prisma.PrismaPromise<GetMedicationsValuesAggregateType<T>>;
        /**
         * Group by MedicationsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {MedicationsValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends MedicationsValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationsValuesGroupByArgs['orderBy'] }
        : { orderBy?: MedicationsValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, MedicationsValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationsValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for MedicationsValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__MedicationsValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        medications<T extends MedicationsValues$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, MedicationsValues$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the MedicationsValues model
     */
    interface MedicationsValuesFieldRefs {
        readonly id: FieldRef<"MedicationsValues", 'String'>;
        readonly value: FieldRef<"MedicationsValues", 'String'>;
        readonly createdAt: FieldRef<"MedicationsValues", 'DateTime'>;
    }

    export interface ExamResultsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamResults'], meta: { name: 'ExamResults' } };
        /**
         * Fields of the ExamResults model
         */
        readonly fields: ExamResultsFieldRefs;
        /**
         * Find zero or one ExamResults that matches the filter.
         * @param {ExamResultsFindUniqueArgs} args - Arguments to find a ExamResults
         * @example
         * // Get one ExamResults
         * const examResults = await prisma.examResults.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends ExamResultsFindUniqueArgs>(args: SelectSubset<T, ExamResultsFindUniqueArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one ExamResults that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {ExamResultsFindUniqueOrThrowArgs} args - Arguments to find a ExamResults
         * @example
         * // Get one ExamResults
         * const examResults = await prisma.examResults.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends ExamResultsFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamResultsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first ExamResults that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsFindFirstArgs} args - Arguments to find a ExamResults
         * @example
         * // Get one ExamResults
         * const examResults = await prisma.examResults.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends ExamResultsFindFirstArgs>(args?: SelectSubset<T, ExamResultsFindFirstArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first ExamResults that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsFindFirstOrThrowArgs} args - Arguments to find a ExamResults
         * @example
         * // Get one ExamResults
         * const examResults = await prisma.examResults.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends ExamResultsFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamResultsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more ExamResults that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all ExamResults
         * const examResults = await prisma.examResults.findMany()
         *
         * // Get first 10 ExamResults
         * const examResults = await prisma.examResults.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const examResultsWithIdOnly = await prisma.examResults.findMany({ select: { id: true } })
         */
        findMany<T extends ExamResultsFindManyArgs>(args?: SelectSubset<T, ExamResultsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a ExamResults.
         * @param {ExamResultsCreateArgs} args - Arguments to create a ExamResults.
         * @example
         * // Create one ExamResults
         * const ExamResults = await prisma.examResults.create({
         *   data: {
         *     // ... data to create a ExamResults
         *   }
         * })
         */
        create<T extends ExamResultsCreateArgs>(args: SelectSubset<T, ExamResultsCreateArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many ExamResults.
         * @param {ExamResultsCreateManyArgs} args - Arguments to create many ExamResults.
         * @example
         * // Create many ExamResults
         * const examResults = await prisma.examResults.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends ExamResultsCreateManyArgs>(args?: SelectSubset<T, ExamResultsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many ExamResults and returns the data saved in the database.
         * @param {ExamResultsCreateManyAndReturnArgs} args - Arguments to create many ExamResults.
         * @example
         * // Create many ExamResults
         * const examResults = await prisma.examResults.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many ExamResults and only return the `id`
         * const examResultsWithIdOnly = await prisma.examResults.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends ExamResultsCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamResultsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a ExamResults.
         * @param {ExamResultsDeleteArgs} args - Arguments to delete one ExamResults.
         * @example
         * // Delete one ExamResults
         * const ExamResults = await prisma.examResults.delete({
         *   where: {
         *     // ... filter to delete one ExamResults
         *   }
         * })
         */
        delete<T extends ExamResultsDeleteArgs>(args: SelectSubset<T, ExamResultsDeleteArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one ExamResults.
         * @param {ExamResultsUpdateArgs} args - Arguments to update one ExamResults.
         * @example
         * // Update one ExamResults
         * const examResults = await prisma.examResults.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends ExamResultsUpdateArgs>(args: SelectSubset<T, ExamResultsUpdateArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more ExamResults.
         * @param {ExamResultsDeleteManyArgs} args - Arguments to filter ExamResults to delete.
         * @example
         * // Delete a few ExamResults
         * const { count } = await prisma.examResults.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends ExamResultsDeleteManyArgs>(args?: SelectSubset<T, ExamResultsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more ExamResults.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many ExamResults
         * const examResults = await prisma.examResults.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends ExamResultsUpdateManyArgs>(args: SelectSubset<T, ExamResultsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more ExamResults and returns the data updated in the database.
         * @param {ExamResultsUpdateManyAndReturnArgs} args - Arguments to update many ExamResults.
         * @example
         * // Update many ExamResults
         * const examResults = await prisma.examResults.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more ExamResults and only return the `id`
         * const examResultsWithIdOnly = await prisma.examResults.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends ExamResultsUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamResultsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one ExamResults.
         * @param {ExamResultsUpsertArgs} args - Arguments to update or create a ExamResults.
         * @example
         * // Update or create a ExamResults
         * const examResults = await prisma.examResults.upsert({
         *   create: {
         *     // ... data to create a ExamResults
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the ExamResults we want to update
         *   }
         * })
         */
        upsert<T extends ExamResultsUpsertArgs>(args: SelectSubset<T, ExamResultsUpsertArgs<ExtArgs>>): Prisma__ExamResultsClient<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of ExamResults.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsCountArgs} args - Arguments to filter ExamResults to count.
         * @example
         * // Count the number of ExamResults
         * const count = await prisma.examResults.count({
         *   where: {
         *     // ... the filter for the ExamResults we want to count
         *   }
         * })
         */
        count<T extends ExamResultsCountArgs>(args?: Subset<T, ExamResultsCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], ExamResultsCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a ExamResults.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends ExamResultsAggregateArgs>(args: Subset<T, ExamResultsAggregateArgs>): Prisma.PrismaPromise<GetExamResultsAggregateType<T>>;
        /**
         * Group by ExamResults.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends ExamResultsGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamResultsGroupByArgs['orderBy'] }
        : { orderBy?: ExamResultsGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, ExamResultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamResultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for ExamResults.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__ExamResultsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends ExamResults$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, ExamResults$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends ExamResults$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, ExamResults$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends ExamResults$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, ExamResults$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends ExamResults$organizationArgs<ExtArgs> = {}>(args?: Subset<T, ExamResults$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        examResultsValues<T extends ExamResultsValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamResultsValuesDefaultArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the ExamResults model
     */
    interface ExamResultsFieldRefs {
        readonly id: FieldRef<"ExamResults", 'String'>;
        readonly type: FieldRef<"ExamResults", 'String'>;
        readonly createdAt: FieldRef<"ExamResults", 'DateTime'>;
        readonly createdById: FieldRef<"ExamResults", 'String'>;
        readonly updatedAt: FieldRef<"ExamResults", 'DateTime'>;
        readonly updatedById: FieldRef<"ExamResults", 'String'>;
        readonly deletedAt: FieldRef<"ExamResults", 'DateTime'>;
        readonly deletedById: FieldRef<"ExamResults", 'String'>;
        readonly deleted: FieldRef<"ExamResults", 'Boolean'>;
        readonly organizationId: FieldRef<"ExamResults", 'String'>;
        readonly patientId: FieldRef<"ExamResults", 'String'>;
        readonly examResultsValuesId: FieldRef<"ExamResults", 'String'>;
        readonly result: FieldRef<"ExamResults", 'String'>;
        readonly date: FieldRef<"ExamResults", 'DateTime'>;
    }

    export interface ExamResultsValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamResultsValues'], meta: { name: 'ExamResultsValues' } };
        /**
         * Fields of the ExamResultsValues model
         */
        readonly fields: ExamResultsValuesFieldRefs;
        /**
         * Find zero or one ExamResultsValues that matches the filter.
         * @param {ExamResultsValuesFindUniqueArgs} args - Arguments to find a ExamResultsValues
         * @example
         * // Get one ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends ExamResultsValuesFindUniqueArgs>(args: SelectSubset<T, ExamResultsValuesFindUniqueArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one ExamResultsValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {ExamResultsValuesFindUniqueOrThrowArgs} args - Arguments to find a ExamResultsValues
         * @example
         * // Get one ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends ExamResultsValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamResultsValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first ExamResultsValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesFindFirstArgs} args - Arguments to find a ExamResultsValues
         * @example
         * // Get one ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends ExamResultsValuesFindFirstArgs>(args?: SelectSubset<T, ExamResultsValuesFindFirstArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first ExamResultsValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesFindFirstOrThrowArgs} args - Arguments to find a ExamResultsValues
         * @example
         * // Get one ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends ExamResultsValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamResultsValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more ExamResultsValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.findMany()
         *
         * // Get first 10 ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const examResultsValuesWithIdOnly = await prisma.examResultsValues.findMany({ select: { id: true } })
         */
        findMany<T extends ExamResultsValuesFindManyArgs>(args?: SelectSubset<T, ExamResultsValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a ExamResultsValues.
         * @param {ExamResultsValuesCreateArgs} args - Arguments to create a ExamResultsValues.
         * @example
         * // Create one ExamResultsValues
         * const ExamResultsValues = await prisma.examResultsValues.create({
         *   data: {
         *     // ... data to create a ExamResultsValues
         *   }
         * })
         */
        create<T extends ExamResultsValuesCreateArgs>(args: SelectSubset<T, ExamResultsValuesCreateArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many ExamResultsValues.
         * @param {ExamResultsValuesCreateManyArgs} args - Arguments to create many ExamResultsValues.
         * @example
         * // Create many ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends ExamResultsValuesCreateManyArgs>(args?: SelectSubset<T, ExamResultsValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many ExamResultsValues and returns the data saved in the database.
         * @param {ExamResultsValuesCreateManyAndReturnArgs} args - Arguments to create many ExamResultsValues.
         * @example
         * // Create many ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many ExamResultsValues and only return the `id`
         * const examResultsValuesWithIdOnly = await prisma.examResultsValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends ExamResultsValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamResultsValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a ExamResultsValues.
         * @param {ExamResultsValuesDeleteArgs} args - Arguments to delete one ExamResultsValues.
         * @example
         * // Delete one ExamResultsValues
         * const ExamResultsValues = await prisma.examResultsValues.delete({
         *   where: {
         *     // ... filter to delete one ExamResultsValues
         *   }
         * })
         */
        delete<T extends ExamResultsValuesDeleteArgs>(args: SelectSubset<T, ExamResultsValuesDeleteArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one ExamResultsValues.
         * @param {ExamResultsValuesUpdateArgs} args - Arguments to update one ExamResultsValues.
         * @example
         * // Update one ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends ExamResultsValuesUpdateArgs>(args: SelectSubset<T, ExamResultsValuesUpdateArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more ExamResultsValues.
         * @param {ExamResultsValuesDeleteManyArgs} args - Arguments to filter ExamResultsValues to delete.
         * @example
         * // Delete a few ExamResultsValues
         * const { count } = await prisma.examResultsValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends ExamResultsValuesDeleteManyArgs>(args?: SelectSubset<T, ExamResultsValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more ExamResultsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends ExamResultsValuesUpdateManyArgs>(args: SelectSubset<T, ExamResultsValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more ExamResultsValues and returns the data updated in the database.
         * @param {ExamResultsValuesUpdateManyAndReturnArgs} args - Arguments to update many ExamResultsValues.
         * @example
         * // Update many ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more ExamResultsValues and only return the `id`
         * const examResultsValuesWithIdOnly = await prisma.examResultsValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends ExamResultsValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamResultsValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one ExamResultsValues.
         * @param {ExamResultsValuesUpsertArgs} args - Arguments to update or create a ExamResultsValues.
         * @example
         * // Update or create a ExamResultsValues
         * const examResultsValues = await prisma.examResultsValues.upsert({
         *   create: {
         *     // ... data to create a ExamResultsValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the ExamResultsValues we want to update
         *   }
         * })
         */
        upsert<T extends ExamResultsValuesUpsertArgs>(args: SelectSubset<T, ExamResultsValuesUpsertArgs<ExtArgs>>): Prisma__ExamResultsValuesClient<$Result.GetResult<Prisma.$ExamResultsValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of ExamResultsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesCountArgs} args - Arguments to filter ExamResultsValues to count.
         * @example
         * // Count the number of ExamResultsValues
         * const count = await prisma.examResultsValues.count({
         *   where: {
         *     // ... the filter for the ExamResultsValues we want to count
         *   }
         * })
         */
        count<T extends ExamResultsValuesCountArgs>(args?: Subset<T, ExamResultsValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], ExamResultsValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a ExamResultsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends ExamResultsValuesAggregateArgs>(args: Subset<T, ExamResultsValuesAggregateArgs>): Prisma.PrismaPromise<GetExamResultsValuesAggregateType<T>>;
        /**
         * Group by ExamResultsValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ExamResultsValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends ExamResultsValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamResultsValuesGroupByArgs['orderBy'] }
        : { orderBy?: ExamResultsValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, ExamResultsValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamResultsValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for ExamResultsValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__ExamResultsValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        examResults<T extends ExamResultsValues$examResultsArgs<ExtArgs> = {}>(args?: Subset<T, ExamResultsValues$examResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamResultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the ExamResultsValues model
     */
    interface ExamResultsValuesFieldRefs {
        readonly id: FieldRef<"ExamResultsValues", 'String'>;
        readonly value: FieldRef<"ExamResultsValues", 'String'>;
        readonly createdAt: FieldRef<"ExamResultsValues", 'DateTime'>;
    }

    export interface ComorbiditiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comorbidities'], meta: { name: 'Comorbidities' } };
        /**
         * Fields of the Comorbidities model
         */
        readonly fields: ComorbiditiesFieldRefs;
        /**
         * Find zero or one Comorbidities that matches the filter.
         * @param {ComorbiditiesFindUniqueArgs} args - Arguments to find a Comorbidities
         * @example
         * // Get one Comorbidities
         * const comorbidities = await prisma.comorbidities.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends ComorbiditiesFindUniqueArgs>(args: SelectSubset<T, ComorbiditiesFindUniqueArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Comorbidities that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {ComorbiditiesFindUniqueOrThrowArgs} args - Arguments to find a Comorbidities
         * @example
         * // Get one Comorbidities
         * const comorbidities = await prisma.comorbidities.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends ComorbiditiesFindUniqueOrThrowArgs>(args: SelectSubset<T, ComorbiditiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Comorbidities that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesFindFirstArgs} args - Arguments to find a Comorbidities
         * @example
         * // Get one Comorbidities
         * const comorbidities = await prisma.comorbidities.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends ComorbiditiesFindFirstArgs>(args?: SelectSubset<T, ComorbiditiesFindFirstArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Comorbidities that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesFindFirstOrThrowArgs} args - Arguments to find a Comorbidities
         * @example
         * // Get one Comorbidities
         * const comorbidities = await prisma.comorbidities.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends ComorbiditiesFindFirstOrThrowArgs>(args?: SelectSubset<T, ComorbiditiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Comorbidities that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Comorbidities
         * const comorbidities = await prisma.comorbidities.findMany()
         *
         * // Get first 10 Comorbidities
         * const comorbidities = await prisma.comorbidities.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const comorbiditiesWithIdOnly = await prisma.comorbidities.findMany({ select: { id: true } })
         */
        findMany<T extends ComorbiditiesFindManyArgs>(args?: SelectSubset<T, ComorbiditiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Comorbidities.
         * @param {ComorbiditiesCreateArgs} args - Arguments to create a Comorbidities.
         * @example
         * // Create one Comorbidities
         * const Comorbidities = await prisma.comorbidities.create({
         *   data: {
         *     // ... data to create a Comorbidities
         *   }
         * })
         */
        create<T extends ComorbiditiesCreateArgs>(args: SelectSubset<T, ComorbiditiesCreateArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Comorbidities.
         * @param {ComorbiditiesCreateManyArgs} args - Arguments to create many Comorbidities.
         * @example
         * // Create many Comorbidities
         * const comorbidities = await prisma.comorbidities.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends ComorbiditiesCreateManyArgs>(args?: SelectSubset<T, ComorbiditiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Comorbidities and returns the data saved in the database.
         * @param {ComorbiditiesCreateManyAndReturnArgs} args - Arguments to create many Comorbidities.
         * @example
         * // Create many Comorbidities
         * const comorbidities = await prisma.comorbidities.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Comorbidities and only return the `id`
         * const comorbiditiesWithIdOnly = await prisma.comorbidities.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends ComorbiditiesCreateManyAndReturnArgs>(args?: SelectSubset<T, ComorbiditiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Comorbidities.
         * @param {ComorbiditiesDeleteArgs} args - Arguments to delete one Comorbidities.
         * @example
         * // Delete one Comorbidities
         * const Comorbidities = await prisma.comorbidities.delete({
         *   where: {
         *     // ... filter to delete one Comorbidities
         *   }
         * })
         */
        delete<T extends ComorbiditiesDeleteArgs>(args: SelectSubset<T, ComorbiditiesDeleteArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Comorbidities.
         * @param {ComorbiditiesUpdateArgs} args - Arguments to update one Comorbidities.
         * @example
         * // Update one Comorbidities
         * const comorbidities = await prisma.comorbidities.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends ComorbiditiesUpdateArgs>(args: SelectSubset<T, ComorbiditiesUpdateArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Comorbidities.
         * @param {ComorbiditiesDeleteManyArgs} args - Arguments to filter Comorbidities to delete.
         * @example
         * // Delete a few Comorbidities
         * const { count } = await prisma.comorbidities.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends ComorbiditiesDeleteManyArgs>(args?: SelectSubset<T, ComorbiditiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Comorbidities.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Comorbidities
         * const comorbidities = await prisma.comorbidities.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends ComorbiditiesUpdateManyArgs>(args: SelectSubset<T, ComorbiditiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Comorbidities and returns the data updated in the database.
         * @param {ComorbiditiesUpdateManyAndReturnArgs} args - Arguments to update many Comorbidities.
         * @example
         * // Update many Comorbidities
         * const comorbidities = await prisma.comorbidities.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Comorbidities and only return the `id`
         * const comorbiditiesWithIdOnly = await prisma.comorbidities.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends ComorbiditiesUpdateManyAndReturnArgs>(args: SelectSubset<T, ComorbiditiesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Comorbidities.
         * @param {ComorbiditiesUpsertArgs} args - Arguments to update or create a Comorbidities.
         * @example
         * // Update or create a Comorbidities
         * const comorbidities = await prisma.comorbidities.upsert({
         *   create: {
         *     // ... data to create a Comorbidities
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Comorbidities we want to update
         *   }
         * })
         */
        upsert<T extends ComorbiditiesUpsertArgs>(args: SelectSubset<T, ComorbiditiesUpsertArgs<ExtArgs>>): Prisma__ComorbiditiesClient<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Comorbidities.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesCountArgs} args - Arguments to filter Comorbidities to count.
         * @example
         * // Count the number of Comorbidities
         * const count = await prisma.comorbidities.count({
         *   where: {
         *     // ... the filter for the Comorbidities we want to count
         *   }
         * })
         */
        count<T extends ComorbiditiesCountArgs>(args?: Subset<T, ComorbiditiesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], ComorbiditiesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Comorbidities.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends ComorbiditiesAggregateArgs>(args: Subset<T, ComorbiditiesAggregateArgs>): Prisma.PrismaPromise<GetComorbiditiesAggregateType<T>>;
        /**
         * Group by Comorbidities.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends ComorbiditiesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComorbiditiesGroupByArgs['orderBy'] }
        : { orderBy?: ComorbiditiesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, ComorbiditiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComorbiditiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Comorbidities.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__ComorbiditiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Comorbidities$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Comorbidities$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Comorbidities$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Comorbidities$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Comorbidities$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Comorbidities$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Comorbidities$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Comorbidities$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends Comorbidities$patientArgs<ExtArgs> = {}>(args?: Subset<T, Comorbidities$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        comorbiditiesValues<T extends ComorbiditiesValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComorbiditiesValuesDefaultArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        appointment<T extends Comorbidities$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, Comorbidities$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Comorbidities model
     */
    interface ComorbiditiesFieldRefs {
        readonly id: FieldRef<"Comorbidities", 'String'>;
        readonly type: FieldRef<"Comorbidities", 'String'>;
        readonly createdAt: FieldRef<"Comorbidities", 'DateTime'>;
        readonly createdById: FieldRef<"Comorbidities", 'String'>;
        readonly updatedAt: FieldRef<"Comorbidities", 'DateTime'>;
        readonly updatedById: FieldRef<"Comorbidities", 'String'>;
        readonly deletedAt: FieldRef<"Comorbidities", 'DateTime'>;
        readonly deletedById: FieldRef<"Comorbidities", 'String'>;
        readonly deleted: FieldRef<"Comorbidities", 'Boolean'>;
        readonly organizationId: FieldRef<"Comorbidities", 'String'>;
        readonly patientId: FieldRef<"Comorbidities", 'String'>;
        readonly comorbiditiesValuesId: FieldRef<"Comorbidities", 'String'>;
        readonly appointmentId: FieldRef<"Comorbidities", 'String'>;
    }

    export interface ComorbiditiesValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComorbiditiesValues'], meta: { name: 'ComorbiditiesValues' } };
        /**
         * Fields of the ComorbiditiesValues model
         */
        readonly fields: ComorbiditiesValuesFieldRefs;
        /**
         * Find zero or one ComorbiditiesValues that matches the filter.
         * @param {ComorbiditiesValuesFindUniqueArgs} args - Arguments to find a ComorbiditiesValues
         * @example
         * // Get one ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends ComorbiditiesValuesFindUniqueArgs>(args: SelectSubset<T, ComorbiditiesValuesFindUniqueArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one ComorbiditiesValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {ComorbiditiesValuesFindUniqueOrThrowArgs} args - Arguments to find a ComorbiditiesValues
         * @example
         * // Get one ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends ComorbiditiesValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, ComorbiditiesValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first ComorbiditiesValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesFindFirstArgs} args - Arguments to find a ComorbiditiesValues
         * @example
         * // Get one ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends ComorbiditiesValuesFindFirstArgs>(args?: SelectSubset<T, ComorbiditiesValuesFindFirstArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first ComorbiditiesValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesFindFirstOrThrowArgs} args - Arguments to find a ComorbiditiesValues
         * @example
         * // Get one ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends ComorbiditiesValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, ComorbiditiesValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more ComorbiditiesValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.findMany()
         *
         * // Get first 10 ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const comorbiditiesValuesWithIdOnly = await prisma.comorbiditiesValues.findMany({ select: { id: true } })
         */
        findMany<T extends ComorbiditiesValuesFindManyArgs>(args?: SelectSubset<T, ComorbiditiesValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a ComorbiditiesValues.
         * @param {ComorbiditiesValuesCreateArgs} args - Arguments to create a ComorbiditiesValues.
         * @example
         * // Create one ComorbiditiesValues
         * const ComorbiditiesValues = await prisma.comorbiditiesValues.create({
         *   data: {
         *     // ... data to create a ComorbiditiesValues
         *   }
         * })
         */
        create<T extends ComorbiditiesValuesCreateArgs>(args: SelectSubset<T, ComorbiditiesValuesCreateArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many ComorbiditiesValues.
         * @param {ComorbiditiesValuesCreateManyArgs} args - Arguments to create many ComorbiditiesValues.
         * @example
         * // Create many ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends ComorbiditiesValuesCreateManyArgs>(args?: SelectSubset<T, ComorbiditiesValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many ComorbiditiesValues and returns the data saved in the database.
         * @param {ComorbiditiesValuesCreateManyAndReturnArgs} args - Arguments to create many ComorbiditiesValues.
         * @example
         * // Create many ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many ComorbiditiesValues and only return the `id`
         * const comorbiditiesValuesWithIdOnly = await prisma.comorbiditiesValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends ComorbiditiesValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, ComorbiditiesValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a ComorbiditiesValues.
         * @param {ComorbiditiesValuesDeleteArgs} args - Arguments to delete one ComorbiditiesValues.
         * @example
         * // Delete one ComorbiditiesValues
         * const ComorbiditiesValues = await prisma.comorbiditiesValues.delete({
         *   where: {
         *     // ... filter to delete one ComorbiditiesValues
         *   }
         * })
         */
        delete<T extends ComorbiditiesValuesDeleteArgs>(args: SelectSubset<T, ComorbiditiesValuesDeleteArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one ComorbiditiesValues.
         * @param {ComorbiditiesValuesUpdateArgs} args - Arguments to update one ComorbiditiesValues.
         * @example
         * // Update one ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends ComorbiditiesValuesUpdateArgs>(args: SelectSubset<T, ComorbiditiesValuesUpdateArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more ComorbiditiesValues.
         * @param {ComorbiditiesValuesDeleteManyArgs} args - Arguments to filter ComorbiditiesValues to delete.
         * @example
         * // Delete a few ComorbiditiesValues
         * const { count } = await prisma.comorbiditiesValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends ComorbiditiesValuesDeleteManyArgs>(args?: SelectSubset<T, ComorbiditiesValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more ComorbiditiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends ComorbiditiesValuesUpdateManyArgs>(args: SelectSubset<T, ComorbiditiesValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more ComorbiditiesValues and returns the data updated in the database.
         * @param {ComorbiditiesValuesUpdateManyAndReturnArgs} args - Arguments to update many ComorbiditiesValues.
         * @example
         * // Update many ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more ComorbiditiesValues and only return the `id`
         * const comorbiditiesValuesWithIdOnly = await prisma.comorbiditiesValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends ComorbiditiesValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, ComorbiditiesValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one ComorbiditiesValues.
         * @param {ComorbiditiesValuesUpsertArgs} args - Arguments to update or create a ComorbiditiesValues.
         * @example
         * // Update or create a ComorbiditiesValues
         * const comorbiditiesValues = await prisma.comorbiditiesValues.upsert({
         *   create: {
         *     // ... data to create a ComorbiditiesValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the ComorbiditiesValues we want to update
         *   }
         * })
         */
        upsert<T extends ComorbiditiesValuesUpsertArgs>(args: SelectSubset<T, ComorbiditiesValuesUpsertArgs<ExtArgs>>): Prisma__ComorbiditiesValuesClient<$Result.GetResult<Prisma.$ComorbiditiesValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of ComorbiditiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesCountArgs} args - Arguments to filter ComorbiditiesValues to count.
         * @example
         * // Count the number of ComorbiditiesValues
         * const count = await prisma.comorbiditiesValues.count({
         *   where: {
         *     // ... the filter for the ComorbiditiesValues we want to count
         *   }
         * })
         */
        count<T extends ComorbiditiesValuesCountArgs>(args?: Subset<T, ComorbiditiesValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], ComorbiditiesValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a ComorbiditiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends ComorbiditiesValuesAggregateArgs>(args: Subset<T, ComorbiditiesValuesAggregateArgs>): Prisma.PrismaPromise<GetComorbiditiesValuesAggregateType<T>>;
        /**
         * Group by ComorbiditiesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {ComorbiditiesValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends ComorbiditiesValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComorbiditiesValuesGroupByArgs['orderBy'] }
        : { orderBy?: ComorbiditiesValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, ComorbiditiesValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComorbiditiesValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for ComorbiditiesValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__ComorbiditiesValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        comorbidities<T extends ComorbiditiesValues$comorbiditiesArgs<ExtArgs> = {}>(args?: Subset<T, ComorbiditiesValues$comorbiditiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComorbiditiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the ComorbiditiesValues model
     */
    interface ComorbiditiesValuesFieldRefs {
        readonly id: FieldRef<"ComorbiditiesValues", 'String'>;
        readonly value: FieldRef<"ComorbiditiesValues", 'String'>;
        readonly createdAt: FieldRef<"ComorbiditiesValues", 'DateTime'>;
    }

    export interface SurgeriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Surgeries'], meta: { name: 'Surgeries' } };
        /**
         * Fields of the Surgeries model
         */
        readonly fields: SurgeriesFieldRefs;
        /**
         * Find zero or one Surgeries that matches the filter.
         * @param {SurgeriesFindUniqueArgs} args - Arguments to find a Surgeries
         * @example
         * // Get one Surgeries
         * const surgeries = await prisma.surgeries.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends SurgeriesFindUniqueArgs>(args: SelectSubset<T, SurgeriesFindUniqueArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one Surgeries that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {SurgeriesFindUniqueOrThrowArgs} args - Arguments to find a Surgeries
         * @example
         * // Get one Surgeries
         * const surgeries = await prisma.surgeries.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends SurgeriesFindUniqueOrThrowArgs>(args: SelectSubset<T, SurgeriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Surgeries that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesFindFirstArgs} args - Arguments to find a Surgeries
         * @example
         * // Get one Surgeries
         * const surgeries = await prisma.surgeries.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends SurgeriesFindFirstArgs>(args?: SelectSubset<T, SurgeriesFindFirstArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first Surgeries that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesFindFirstOrThrowArgs} args - Arguments to find a Surgeries
         * @example
         * // Get one Surgeries
         * const surgeries = await prisma.surgeries.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends SurgeriesFindFirstOrThrowArgs>(args?: SelectSubset<T, SurgeriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more Surgeries that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all Surgeries
         * const surgeries = await prisma.surgeries.findMany()
         *
         * // Get first 10 Surgeries
         * const surgeries = await prisma.surgeries.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const surgeriesWithIdOnly = await prisma.surgeries.findMany({ select: { id: true } })
         */
        findMany<T extends SurgeriesFindManyArgs>(args?: SelectSubset<T, SurgeriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a Surgeries.
         * @param {SurgeriesCreateArgs} args - Arguments to create a Surgeries.
         * @example
         * // Create one Surgeries
         * const Surgeries = await prisma.surgeries.create({
         *   data: {
         *     // ... data to create a Surgeries
         *   }
         * })
         */
        create<T extends SurgeriesCreateArgs>(args: SelectSubset<T, SurgeriesCreateArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many Surgeries.
         * @param {SurgeriesCreateManyArgs} args - Arguments to create many Surgeries.
         * @example
         * // Create many Surgeries
         * const surgeries = await prisma.surgeries.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends SurgeriesCreateManyArgs>(args?: SelectSubset<T, SurgeriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many Surgeries and returns the data saved in the database.
         * @param {SurgeriesCreateManyAndReturnArgs} args - Arguments to create many Surgeries.
         * @example
         * // Create many Surgeries
         * const surgeries = await prisma.surgeries.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many Surgeries and only return the `id`
         * const surgeriesWithIdOnly = await prisma.surgeries.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends SurgeriesCreateManyAndReturnArgs>(args?: SelectSubset<T, SurgeriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a Surgeries.
         * @param {SurgeriesDeleteArgs} args - Arguments to delete one Surgeries.
         * @example
         * // Delete one Surgeries
         * const Surgeries = await prisma.surgeries.delete({
         *   where: {
         *     // ... filter to delete one Surgeries
         *   }
         * })
         */
        delete<T extends SurgeriesDeleteArgs>(args: SelectSubset<T, SurgeriesDeleteArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one Surgeries.
         * @param {SurgeriesUpdateArgs} args - Arguments to update one Surgeries.
         * @example
         * // Update one Surgeries
         * const surgeries = await prisma.surgeries.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends SurgeriesUpdateArgs>(args: SelectSubset<T, SurgeriesUpdateArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more Surgeries.
         * @param {SurgeriesDeleteManyArgs} args - Arguments to filter Surgeries to delete.
         * @example
         * // Delete a few Surgeries
         * const { count } = await prisma.surgeries.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends SurgeriesDeleteManyArgs>(args?: SelectSubset<T, SurgeriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Surgeries.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many Surgeries
         * const surgeries = await prisma.surgeries.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends SurgeriesUpdateManyArgs>(args: SelectSubset<T, SurgeriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more Surgeries and returns the data updated in the database.
         * @param {SurgeriesUpdateManyAndReturnArgs} args - Arguments to update many Surgeries.
         * @example
         * // Update many Surgeries
         * const surgeries = await prisma.surgeries.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more Surgeries and only return the `id`
         * const surgeriesWithIdOnly = await prisma.surgeries.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends SurgeriesUpdateManyAndReturnArgs>(args: SelectSubset<T, SurgeriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one Surgeries.
         * @param {SurgeriesUpsertArgs} args - Arguments to update or create a Surgeries.
         * @example
         * // Update or create a Surgeries
         * const surgeries = await prisma.surgeries.upsert({
         *   create: {
         *     // ... data to create a Surgeries
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the Surgeries we want to update
         *   }
         * })
         */
        upsert<T extends SurgeriesUpsertArgs>(args: SelectSubset<T, SurgeriesUpsertArgs<ExtArgs>>): Prisma__SurgeriesClient<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of Surgeries.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesCountArgs} args - Arguments to filter Surgeries to count.
         * @example
         * // Count the number of Surgeries
         * const count = await prisma.surgeries.count({
         *   where: {
         *     // ... the filter for the Surgeries we want to count
         *   }
         * })
         */
        count<T extends SurgeriesCountArgs>(args?: Subset<T, SurgeriesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], SurgeriesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a Surgeries.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends SurgeriesAggregateArgs>(args: Subset<T, SurgeriesAggregateArgs>): Prisma.PrismaPromise<GetSurgeriesAggregateType<T>>;
        /**
         * Group by Surgeries.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends SurgeriesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurgeriesGroupByArgs['orderBy'] }
        : { orderBy?: SurgeriesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, SurgeriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurgeriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for Surgeries.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__SurgeriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends Surgeries$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, Surgeries$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends Surgeries$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Surgeries$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends Surgeries$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Surgeries$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends Surgeries$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Surgeries$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        surgeriesValues<T extends SurgeriesValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurgeriesValuesDefaultArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the Surgeries model
     */
    interface SurgeriesFieldRefs {
        readonly id: FieldRef<"Surgeries", 'String'>;
        readonly type: FieldRef<"Surgeries", 'String'>;
        readonly createdAt: FieldRef<"Surgeries", 'DateTime'>;
        readonly createdById: FieldRef<"Surgeries", 'String'>;
        readonly updatedAt: FieldRef<"Surgeries", 'DateTime'>;
        readonly updatedById: FieldRef<"Surgeries", 'String'>;
        readonly deletedAt: FieldRef<"Surgeries", 'DateTime'>;
        readonly deletedById: FieldRef<"Surgeries", 'String'>;
        readonly deleted: FieldRef<"Surgeries", 'Boolean'>;
        readonly organizationId: FieldRef<"Surgeries", 'String'>;
        readonly patientId: FieldRef<"Surgeries", 'String'>;
        readonly surgeriesValuesId: FieldRef<"Surgeries", 'String'>;
    }

    export interface SurgeriesValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SurgeriesValues'], meta: { name: 'SurgeriesValues' } };
        /**
         * Fields of the SurgeriesValues model
         */
        readonly fields: SurgeriesValuesFieldRefs;
        /**
         * Find zero or one SurgeriesValues that matches the filter.
         * @param {SurgeriesValuesFindUniqueArgs} args - Arguments to find a SurgeriesValues
         * @example
         * // Get one SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends SurgeriesValuesFindUniqueArgs>(args: SelectSubset<T, SurgeriesValuesFindUniqueArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one SurgeriesValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {SurgeriesValuesFindUniqueOrThrowArgs} args - Arguments to find a SurgeriesValues
         * @example
         * // Get one SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends SurgeriesValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, SurgeriesValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first SurgeriesValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesFindFirstArgs} args - Arguments to find a SurgeriesValues
         * @example
         * // Get one SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends SurgeriesValuesFindFirstArgs>(args?: SelectSubset<T, SurgeriesValuesFindFirstArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first SurgeriesValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesFindFirstOrThrowArgs} args - Arguments to find a SurgeriesValues
         * @example
         * // Get one SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends SurgeriesValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, SurgeriesValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more SurgeriesValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.findMany()
         *
         * // Get first 10 SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const surgeriesValuesWithIdOnly = await prisma.surgeriesValues.findMany({ select: { id: true } })
         */
        findMany<T extends SurgeriesValuesFindManyArgs>(args?: SelectSubset<T, SurgeriesValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a SurgeriesValues.
         * @param {SurgeriesValuesCreateArgs} args - Arguments to create a SurgeriesValues.
         * @example
         * // Create one SurgeriesValues
         * const SurgeriesValues = await prisma.surgeriesValues.create({
         *   data: {
         *     // ... data to create a SurgeriesValues
         *   }
         * })
         */
        create<T extends SurgeriesValuesCreateArgs>(args: SelectSubset<T, SurgeriesValuesCreateArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many SurgeriesValues.
         * @param {SurgeriesValuesCreateManyArgs} args - Arguments to create many SurgeriesValues.
         * @example
         * // Create many SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends SurgeriesValuesCreateManyArgs>(args?: SelectSubset<T, SurgeriesValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many SurgeriesValues and returns the data saved in the database.
         * @param {SurgeriesValuesCreateManyAndReturnArgs} args - Arguments to create many SurgeriesValues.
         * @example
         * // Create many SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many SurgeriesValues and only return the `id`
         * const surgeriesValuesWithIdOnly = await prisma.surgeriesValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends SurgeriesValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, SurgeriesValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a SurgeriesValues.
         * @param {SurgeriesValuesDeleteArgs} args - Arguments to delete one SurgeriesValues.
         * @example
         * // Delete one SurgeriesValues
         * const SurgeriesValues = await prisma.surgeriesValues.delete({
         *   where: {
         *     // ... filter to delete one SurgeriesValues
         *   }
         * })
         */
        delete<T extends SurgeriesValuesDeleteArgs>(args: SelectSubset<T, SurgeriesValuesDeleteArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one SurgeriesValues.
         * @param {SurgeriesValuesUpdateArgs} args - Arguments to update one SurgeriesValues.
         * @example
         * // Update one SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends SurgeriesValuesUpdateArgs>(args: SelectSubset<T, SurgeriesValuesUpdateArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more SurgeriesValues.
         * @param {SurgeriesValuesDeleteManyArgs} args - Arguments to filter SurgeriesValues to delete.
         * @example
         * // Delete a few SurgeriesValues
         * const { count } = await prisma.surgeriesValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends SurgeriesValuesDeleteManyArgs>(args?: SelectSubset<T, SurgeriesValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more SurgeriesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends SurgeriesValuesUpdateManyArgs>(args: SelectSubset<T, SurgeriesValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more SurgeriesValues and returns the data updated in the database.
         * @param {SurgeriesValuesUpdateManyAndReturnArgs} args - Arguments to update many SurgeriesValues.
         * @example
         * // Update many SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more SurgeriesValues and only return the `id`
         * const surgeriesValuesWithIdOnly = await prisma.surgeriesValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends SurgeriesValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, SurgeriesValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one SurgeriesValues.
         * @param {SurgeriesValuesUpsertArgs} args - Arguments to update or create a SurgeriesValues.
         * @example
         * // Update or create a SurgeriesValues
         * const surgeriesValues = await prisma.surgeriesValues.upsert({
         *   create: {
         *     // ... data to create a SurgeriesValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the SurgeriesValues we want to update
         *   }
         * })
         */
        upsert<T extends SurgeriesValuesUpsertArgs>(args: SelectSubset<T, SurgeriesValuesUpsertArgs<ExtArgs>>): Prisma__SurgeriesValuesClient<$Result.GetResult<Prisma.$SurgeriesValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of SurgeriesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesCountArgs} args - Arguments to filter SurgeriesValues to count.
         * @example
         * // Count the number of SurgeriesValues
         * const count = await prisma.surgeriesValues.count({
         *   where: {
         *     // ... the filter for the SurgeriesValues we want to count
         *   }
         * })
         */
        count<T extends SurgeriesValuesCountArgs>(args?: Subset<T, SurgeriesValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], SurgeriesValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a SurgeriesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends SurgeriesValuesAggregateArgs>(args: Subset<T, SurgeriesValuesAggregateArgs>): Prisma.PrismaPromise<GetSurgeriesValuesAggregateType<T>>;
        /**
         * Group by SurgeriesValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {SurgeriesValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends SurgeriesValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurgeriesValuesGroupByArgs['orderBy'] }
        : { orderBy?: SurgeriesValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, SurgeriesValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurgeriesValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for SurgeriesValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__SurgeriesValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        surgeries<T extends SurgeriesValues$surgeriesArgs<ExtArgs> = {}>(args?: Subset<T, SurgeriesValues$surgeriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurgeriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the SurgeriesValues model
     */
    interface SurgeriesValuesFieldRefs {
        readonly id: FieldRef<"SurgeriesValues", 'String'>;
        readonly value: FieldRef<"SurgeriesValues", 'String'>;
        readonly createdAt: FieldRef<"SurgeriesValues", 'DateTime'>;
    }

    export interface HealthPlansDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthPlans'], meta: { name: 'HealthPlans' } };
        /**
         * Fields of the HealthPlans model
         */
        readonly fields: HealthPlansFieldRefs;
        /**
         * Find zero or one HealthPlans that matches the filter.
         * @param {HealthPlansFindUniqueArgs} args - Arguments to find a HealthPlans
         * @example
         * // Get one HealthPlans
         * const healthPlans = await prisma.healthPlans.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends HealthPlansFindUniqueArgs>(args: SelectSubset<T, HealthPlansFindUniqueArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one HealthPlans that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {HealthPlansFindUniqueOrThrowArgs} args - Arguments to find a HealthPlans
         * @example
         * // Get one HealthPlans
         * const healthPlans = await prisma.healthPlans.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends HealthPlansFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthPlansFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first HealthPlans that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansFindFirstArgs} args - Arguments to find a HealthPlans
         * @example
         * // Get one HealthPlans
         * const healthPlans = await prisma.healthPlans.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends HealthPlansFindFirstArgs>(args?: SelectSubset<T, HealthPlansFindFirstArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first HealthPlans that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansFindFirstOrThrowArgs} args - Arguments to find a HealthPlans
         * @example
         * // Get one HealthPlans
         * const healthPlans = await prisma.healthPlans.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends HealthPlansFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthPlansFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more HealthPlans that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all HealthPlans
         * const healthPlans = await prisma.healthPlans.findMany()
         *
         * // Get first 10 HealthPlans
         * const healthPlans = await prisma.healthPlans.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const healthPlansWithIdOnly = await prisma.healthPlans.findMany({ select: { id: true } })
         */
        findMany<T extends HealthPlansFindManyArgs>(args?: SelectSubset<T, HealthPlansFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a HealthPlans.
         * @param {HealthPlansCreateArgs} args - Arguments to create a HealthPlans.
         * @example
         * // Create one HealthPlans
         * const HealthPlans = await prisma.healthPlans.create({
         *   data: {
         *     // ... data to create a HealthPlans
         *   }
         * })
         */
        create<T extends HealthPlansCreateArgs>(args: SelectSubset<T, HealthPlansCreateArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many HealthPlans.
         * @param {HealthPlansCreateManyArgs} args - Arguments to create many HealthPlans.
         * @example
         * // Create many HealthPlans
         * const healthPlans = await prisma.healthPlans.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends HealthPlansCreateManyArgs>(args?: SelectSubset<T, HealthPlansCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many HealthPlans and returns the data saved in the database.
         * @param {HealthPlansCreateManyAndReturnArgs} args - Arguments to create many HealthPlans.
         * @example
         * // Create many HealthPlans
         * const healthPlans = await prisma.healthPlans.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many HealthPlans and only return the `id`
         * const healthPlansWithIdOnly = await prisma.healthPlans.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends HealthPlansCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthPlansCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a HealthPlans.
         * @param {HealthPlansDeleteArgs} args - Arguments to delete one HealthPlans.
         * @example
         * // Delete one HealthPlans
         * const HealthPlans = await prisma.healthPlans.delete({
         *   where: {
         *     // ... filter to delete one HealthPlans
         *   }
         * })
         */
        delete<T extends HealthPlansDeleteArgs>(args: SelectSubset<T, HealthPlansDeleteArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one HealthPlans.
         * @param {HealthPlansUpdateArgs} args - Arguments to update one HealthPlans.
         * @example
         * // Update one HealthPlans
         * const healthPlans = await prisma.healthPlans.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends HealthPlansUpdateArgs>(args: SelectSubset<T, HealthPlansUpdateArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more HealthPlans.
         * @param {HealthPlansDeleteManyArgs} args - Arguments to filter HealthPlans to delete.
         * @example
         * // Delete a few HealthPlans
         * const { count } = await prisma.healthPlans.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends HealthPlansDeleteManyArgs>(args?: SelectSubset<T, HealthPlansDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more HealthPlans.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many HealthPlans
         * const healthPlans = await prisma.healthPlans.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends HealthPlansUpdateManyArgs>(args: SelectSubset<T, HealthPlansUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more HealthPlans and returns the data updated in the database.
         * @param {HealthPlansUpdateManyAndReturnArgs} args - Arguments to update many HealthPlans.
         * @example
         * // Update many HealthPlans
         * const healthPlans = await prisma.healthPlans.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more HealthPlans and only return the `id`
         * const healthPlansWithIdOnly = await prisma.healthPlans.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends HealthPlansUpdateManyAndReturnArgs>(args: SelectSubset<T, HealthPlansUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one HealthPlans.
         * @param {HealthPlansUpsertArgs} args - Arguments to update or create a HealthPlans.
         * @example
         * // Update or create a HealthPlans
         * const healthPlans = await prisma.healthPlans.upsert({
         *   create: {
         *     // ... data to create a HealthPlans
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the HealthPlans we want to update
         *   }
         * })
         */
        upsert<T extends HealthPlansUpsertArgs>(args: SelectSubset<T, HealthPlansUpsertArgs<ExtArgs>>): Prisma__HealthPlansClient<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of HealthPlans.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansCountArgs} args - Arguments to filter HealthPlans to count.
         * @example
         * // Count the number of HealthPlans
         * const count = await prisma.healthPlans.count({
         *   where: {
         *     // ... the filter for the HealthPlans we want to count
         *   }
         * })
         */
        count<T extends HealthPlansCountArgs>(args?: Subset<T, HealthPlansCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], HealthPlansCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a HealthPlans.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends HealthPlansAggregateArgs>(args: Subset<T, HealthPlansAggregateArgs>): Prisma.PrismaPromise<GetHealthPlansAggregateType<T>>;
        /**
         * Group by HealthPlans.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends HealthPlansGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthPlansGroupByArgs['orderBy'] }
        : { orderBy?: HealthPlansGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, HealthPlansGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthPlansGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for HealthPlans.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__HealthPlansClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends HealthPlans$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, HealthPlans$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends HealthPlans$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, HealthPlans$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends HealthPlans$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, HealthPlans$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends HealthPlans$organizationArgs<ExtArgs> = {}>(args?: Subset<T, HealthPlans$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        healthPlansValues<T extends HealthPlansValuesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HealthPlansValuesDefaultArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the HealthPlans model
     */
    interface HealthPlansFieldRefs {
        readonly id: FieldRef<"HealthPlans", 'String'>;
        readonly type: FieldRef<"HealthPlans", 'String'>;
        readonly createdAt: FieldRef<"HealthPlans", 'DateTime'>;
        readonly createdById: FieldRef<"HealthPlans", 'String'>;
        readonly updatedAt: FieldRef<"HealthPlans", 'DateTime'>;
        readonly updatedById: FieldRef<"HealthPlans", 'String'>;
        readonly deletedAt: FieldRef<"HealthPlans", 'DateTime'>;
        readonly deletedById: FieldRef<"HealthPlans", 'String'>;
        readonly deleted: FieldRef<"HealthPlans", 'Boolean'>;
        readonly organizationId: FieldRef<"HealthPlans", 'String'>;
        readonly patientId: FieldRef<"HealthPlans", 'String'>;
        readonly healthPlansValuesId: FieldRef<"HealthPlans", 'String'>;
    }

    export interface HealthPlansValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthPlansValues'], meta: { name: 'HealthPlansValues' } };
        /**
         * Fields of the HealthPlansValues model
         */
        readonly fields: HealthPlansValuesFieldRefs;
        /**
         * Find zero or one HealthPlansValues that matches the filter.
         * @param {HealthPlansValuesFindUniqueArgs} args - Arguments to find a HealthPlansValues
         * @example
         * // Get one HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends HealthPlansValuesFindUniqueArgs>(args: SelectSubset<T, HealthPlansValuesFindUniqueArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one HealthPlansValues that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {HealthPlansValuesFindUniqueOrThrowArgs} args - Arguments to find a HealthPlansValues
         * @example
         * // Get one HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends HealthPlansValuesFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthPlansValuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first HealthPlansValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesFindFirstArgs} args - Arguments to find a HealthPlansValues
         * @example
         * // Get one HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends HealthPlansValuesFindFirstArgs>(args?: SelectSubset<T, HealthPlansValuesFindFirstArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first HealthPlansValues that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesFindFirstOrThrowArgs} args - Arguments to find a HealthPlansValues
         * @example
         * // Get one HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends HealthPlansValuesFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthPlansValuesFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more HealthPlansValues that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.findMany()
         *
         * // Get first 10 HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const healthPlansValuesWithIdOnly = await prisma.healthPlansValues.findMany({ select: { id: true } })
         */
        findMany<T extends HealthPlansValuesFindManyArgs>(args?: SelectSubset<T, HealthPlansValuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a HealthPlansValues.
         * @param {HealthPlansValuesCreateArgs} args - Arguments to create a HealthPlansValues.
         * @example
         * // Create one HealthPlansValues
         * const HealthPlansValues = await prisma.healthPlansValues.create({
         *   data: {
         *     // ... data to create a HealthPlansValues
         *   }
         * })
         */
        create<T extends HealthPlansValuesCreateArgs>(args: SelectSubset<T, HealthPlansValuesCreateArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many HealthPlansValues.
         * @param {HealthPlansValuesCreateManyArgs} args - Arguments to create many HealthPlansValues.
         * @example
         * // Create many HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends HealthPlansValuesCreateManyArgs>(args?: SelectSubset<T, HealthPlansValuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many HealthPlansValues and returns the data saved in the database.
         * @param {HealthPlansValuesCreateManyAndReturnArgs} args - Arguments to create many HealthPlansValues.
         * @example
         * // Create many HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many HealthPlansValues and only return the `id`
         * const healthPlansValuesWithIdOnly = await prisma.healthPlansValues.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends HealthPlansValuesCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthPlansValuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a HealthPlansValues.
         * @param {HealthPlansValuesDeleteArgs} args - Arguments to delete one HealthPlansValues.
         * @example
         * // Delete one HealthPlansValues
         * const HealthPlansValues = await prisma.healthPlansValues.delete({
         *   where: {
         *     // ... filter to delete one HealthPlansValues
         *   }
         * })
         */
        delete<T extends HealthPlansValuesDeleteArgs>(args: SelectSubset<T, HealthPlansValuesDeleteArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one HealthPlansValues.
         * @param {HealthPlansValuesUpdateArgs} args - Arguments to update one HealthPlansValues.
         * @example
         * // Update one HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends HealthPlansValuesUpdateArgs>(args: SelectSubset<T, HealthPlansValuesUpdateArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more HealthPlansValues.
         * @param {HealthPlansValuesDeleteManyArgs} args - Arguments to filter HealthPlansValues to delete.
         * @example
         * // Delete a few HealthPlansValues
         * const { count } = await prisma.healthPlansValues.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends HealthPlansValuesDeleteManyArgs>(args?: SelectSubset<T, HealthPlansValuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more HealthPlansValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends HealthPlansValuesUpdateManyArgs>(args: SelectSubset<T, HealthPlansValuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more HealthPlansValues and returns the data updated in the database.
         * @param {HealthPlansValuesUpdateManyAndReturnArgs} args - Arguments to update many HealthPlansValues.
         * @example
         * // Update many HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more HealthPlansValues and only return the `id`
         * const healthPlansValuesWithIdOnly = await prisma.healthPlansValues.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends HealthPlansValuesUpdateManyAndReturnArgs>(args: SelectSubset<T, HealthPlansValuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one HealthPlansValues.
         * @param {HealthPlansValuesUpsertArgs} args - Arguments to update or create a HealthPlansValues.
         * @example
         * // Update or create a HealthPlansValues
         * const healthPlansValues = await prisma.healthPlansValues.upsert({
         *   create: {
         *     // ... data to create a HealthPlansValues
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the HealthPlansValues we want to update
         *   }
         * })
         */
        upsert<T extends HealthPlansValuesUpsertArgs>(args: SelectSubset<T, HealthPlansValuesUpsertArgs<ExtArgs>>): Prisma__HealthPlansValuesClient<$Result.GetResult<Prisma.$HealthPlansValuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of HealthPlansValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesCountArgs} args - Arguments to filter HealthPlansValues to count.
         * @example
         * // Count the number of HealthPlansValues
         * const count = await prisma.healthPlansValues.count({
         *   where: {
         *     // ... the filter for the HealthPlansValues we want to count
         *   }
         * })
         */
        count<T extends HealthPlansValuesCountArgs>(args?: Subset<T, HealthPlansValuesCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], HealthPlansValuesCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a HealthPlansValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends HealthPlansValuesAggregateArgs>(args: Subset<T, HealthPlansValuesAggregateArgs>): Prisma.PrismaPromise<GetHealthPlansValuesAggregateType<T>>;
        /**
         * Group by HealthPlansValues.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {HealthPlansValuesGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends HealthPlansValuesGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthPlansValuesGroupByArgs['orderBy'] }
        : { orderBy?: HealthPlansValuesGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, HealthPlansValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthPlansValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for HealthPlansValues.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__HealthPlansValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        healthPlans<T extends HealthPlansValues$healthPlansArgs<ExtArgs> = {}>(args?: Subset<T, HealthPlansValues$healthPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthPlansPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the HealthPlansValues model
     */
    interface HealthPlansValuesFieldRefs {
        readonly id: FieldRef<"HealthPlansValues", 'String'>;
        readonly value: FieldRef<"HealthPlansValues", 'String'>;
        readonly createdAt: FieldRef<"HealthPlansValues", 'DateTime'>;
    }

    export interface DefaultObjectiveInformationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DefaultObjectiveInformation'], meta: { name: 'DefaultObjectiveInformation' } };
        /**
         * Fields of the DefaultObjectiveInformation model
         */
        readonly fields: DefaultObjectiveInformationFieldRefs;
        /**
         * Find zero or one DefaultObjectiveInformation that matches the filter.
         * @param {DefaultObjectiveInformationFindUniqueArgs} args - Arguments to find a DefaultObjectiveInformation
         * @example
         * // Get one DefaultObjectiveInformation
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends DefaultObjectiveInformationFindUniqueArgs>(args: SelectSubset<T, DefaultObjectiveInformationFindUniqueArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one DefaultObjectiveInformation that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {DefaultObjectiveInformationFindUniqueOrThrowArgs} args - Arguments to find a DefaultObjectiveInformation
         * @example
         * // Get one DefaultObjectiveInformation
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends DefaultObjectiveInformationFindUniqueOrThrowArgs>(args: SelectSubset<T, DefaultObjectiveInformationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first DefaultObjectiveInformation that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationFindFirstArgs} args - Arguments to find a DefaultObjectiveInformation
         * @example
         * // Get one DefaultObjectiveInformation
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends DefaultObjectiveInformationFindFirstArgs>(args?: SelectSubset<T, DefaultObjectiveInformationFindFirstArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first DefaultObjectiveInformation that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationFindFirstOrThrowArgs} args - Arguments to find a DefaultObjectiveInformation
         * @example
         * // Get one DefaultObjectiveInformation
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends DefaultObjectiveInformationFindFirstOrThrowArgs>(args?: SelectSubset<T, DefaultObjectiveInformationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more DefaultObjectiveInformations that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all DefaultObjectiveInformations
         * const defaultObjectiveInformations = await prisma.defaultObjectiveInformation.findMany()
         *
         * // Get first 10 DefaultObjectiveInformations
         * const defaultObjectiveInformations = await prisma.defaultObjectiveInformation.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const defaultObjectiveInformationWithIdOnly = await prisma.defaultObjectiveInformation.findMany({ select: { id: true } })
         */
        findMany<T extends DefaultObjectiveInformationFindManyArgs>(args?: SelectSubset<T, DefaultObjectiveInformationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a DefaultObjectiveInformation.
         * @param {DefaultObjectiveInformationCreateArgs} args - Arguments to create a DefaultObjectiveInformation.
         * @example
         * // Create one DefaultObjectiveInformation
         * const DefaultObjectiveInformation = await prisma.defaultObjectiveInformation.create({
         *   data: {
         *     // ... data to create a DefaultObjectiveInformation
         *   }
         * })
         */
        create<T extends DefaultObjectiveInformationCreateArgs>(args: SelectSubset<T, DefaultObjectiveInformationCreateArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many DefaultObjectiveInformations.
         * @param {DefaultObjectiveInformationCreateManyArgs} args - Arguments to create many DefaultObjectiveInformations.
         * @example
         * // Create many DefaultObjectiveInformations
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends DefaultObjectiveInformationCreateManyArgs>(args?: SelectSubset<T, DefaultObjectiveInformationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many DefaultObjectiveInformations and returns the data saved in the database.
         * @param {DefaultObjectiveInformationCreateManyAndReturnArgs} args - Arguments to create many DefaultObjectiveInformations.
         * @example
         * // Create many DefaultObjectiveInformations
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many DefaultObjectiveInformations and only return the `id`
         * const defaultObjectiveInformationWithIdOnly = await prisma.defaultObjectiveInformation.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends DefaultObjectiveInformationCreateManyAndReturnArgs>(args?: SelectSubset<T, DefaultObjectiveInformationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a DefaultObjectiveInformation.
         * @param {DefaultObjectiveInformationDeleteArgs} args - Arguments to delete one DefaultObjectiveInformation.
         * @example
         * // Delete one DefaultObjectiveInformation
         * const DefaultObjectiveInformation = await prisma.defaultObjectiveInformation.delete({
         *   where: {
         *     // ... filter to delete one DefaultObjectiveInformation
         *   }
         * })
         */
        delete<T extends DefaultObjectiveInformationDeleteArgs>(args: SelectSubset<T, DefaultObjectiveInformationDeleteArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one DefaultObjectiveInformation.
         * @param {DefaultObjectiveInformationUpdateArgs} args - Arguments to update one DefaultObjectiveInformation.
         * @example
         * // Update one DefaultObjectiveInformation
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends DefaultObjectiveInformationUpdateArgs>(args: SelectSubset<T, DefaultObjectiveInformationUpdateArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more DefaultObjectiveInformations.
         * @param {DefaultObjectiveInformationDeleteManyArgs} args - Arguments to filter DefaultObjectiveInformations to delete.
         * @example
         * // Delete a few DefaultObjectiveInformations
         * const { count } = await prisma.defaultObjectiveInformation.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends DefaultObjectiveInformationDeleteManyArgs>(args?: SelectSubset<T, DefaultObjectiveInformationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more DefaultObjectiveInformations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many DefaultObjectiveInformations
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends DefaultObjectiveInformationUpdateManyArgs>(args: SelectSubset<T, DefaultObjectiveInformationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more DefaultObjectiveInformations and returns the data updated in the database.
         * @param {DefaultObjectiveInformationUpdateManyAndReturnArgs} args - Arguments to update many DefaultObjectiveInformations.
         * @example
         * // Update many DefaultObjectiveInformations
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more DefaultObjectiveInformations and only return the `id`
         * const defaultObjectiveInformationWithIdOnly = await prisma.defaultObjectiveInformation.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends DefaultObjectiveInformationUpdateManyAndReturnArgs>(args: SelectSubset<T, DefaultObjectiveInformationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one DefaultObjectiveInformation.
         * @param {DefaultObjectiveInformationUpsertArgs} args - Arguments to update or create a DefaultObjectiveInformation.
         * @example
         * // Update or create a DefaultObjectiveInformation
         * const defaultObjectiveInformation = await prisma.defaultObjectiveInformation.upsert({
         *   create: {
         *     // ... data to create a DefaultObjectiveInformation
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the DefaultObjectiveInformation we want to update
         *   }
         * })
         */
        upsert<T extends DefaultObjectiveInformationUpsertArgs>(args: SelectSubset<T, DefaultObjectiveInformationUpsertArgs<ExtArgs>>): Prisma__DefaultObjectiveInformationClient<$Result.GetResult<Prisma.$DefaultObjectiveInformationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of DefaultObjectiveInformations.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationCountArgs} args - Arguments to filter DefaultObjectiveInformations to count.
         * @example
         * // Count the number of DefaultObjectiveInformations
         * const count = await prisma.defaultObjectiveInformation.count({
         *   where: {
         *     // ... the filter for the DefaultObjectiveInformations we want to count
         *   }
         * })
         */
        count<T extends DefaultObjectiveInformationCountArgs>(args?: Subset<T, DefaultObjectiveInformationCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], DefaultObjectiveInformationCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a DefaultObjectiveInformation.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends DefaultObjectiveInformationAggregateArgs>(args: Subset<T, DefaultObjectiveInformationAggregateArgs>): Prisma.PrismaPromise<GetDefaultObjectiveInformationAggregateType<T>>;
        /**
         * Group by DefaultObjectiveInformation.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {DefaultObjectiveInformationGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends DefaultObjectiveInformationGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DefaultObjectiveInformationGroupByArgs['orderBy'] }
        : { orderBy?: DefaultObjectiveInformationGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, DefaultObjectiveInformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDefaultObjectiveInformationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for DefaultObjectiveInformation.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__DefaultObjectiveInformationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends DefaultObjectiveInformation$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, DefaultObjectiveInformation$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends DefaultObjectiveInformation$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends DefaultObjectiveInformation$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends DefaultObjectiveInformation$organizationArgs<ExtArgs> = {}>(args?: Subset<T, DefaultObjectiveInformation$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the DefaultObjectiveInformation model
     */
    interface DefaultObjectiveInformationFieldRefs {
        readonly id: FieldRef<"DefaultObjectiveInformation", 'String'>;
        readonly type: FieldRef<"DefaultObjectiveInformation", 'String'>;
        readonly createdAt: FieldRef<"DefaultObjectiveInformation", 'DateTime'>;
        readonly createdById: FieldRef<"DefaultObjectiveInformation", 'String'>;
        readonly updatedAt: FieldRef<"DefaultObjectiveInformation", 'DateTime'>;
        readonly updatedById: FieldRef<"DefaultObjectiveInformation", 'String'>;
        readonly deletedAt: FieldRef<"DefaultObjectiveInformation", 'DateTime'>;
        readonly deletedById: FieldRef<"DefaultObjectiveInformation", 'String'>;
        readonly deleted: FieldRef<"DefaultObjectiveInformation", 'Boolean'>;
        readonly organizationId: FieldRef<"DefaultObjectiveInformation", 'String'>;
        readonly text: FieldRef<"DefaultObjectiveInformation", 'String'>;
    }

    export interface EventCalendarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
        [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventCalendar'], meta: { name: 'EventCalendar' } };
        /**
         * Fields of the EventCalendar model
         */
        readonly fields: EventCalendarFieldRefs;
        /**
         * Find zero or one EventCalendar that matches the filter.
         * @param {EventCalendarFindUniqueArgs} args - Arguments to find a EventCalendar
         * @example
         * // Get one EventCalendar
         * const eventCalendar = await prisma.eventCalendar.findUnique({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUnique<T extends EventCalendarFindUniqueArgs>(args: SelectSubset<T, EventCalendarFindUniqueArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find one EventCalendar that matches the filter or throw an error with `error.code='P2025'`
         * if no matches were found.
         * @param {EventCalendarFindUniqueOrThrowArgs} args - Arguments to find a EventCalendar
         * @example
         * // Get one EventCalendar
         * const eventCalendar = await prisma.eventCalendar.findUniqueOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findUniqueOrThrow<T extends EventCalendarFindUniqueOrThrowArgs>(args: SelectSubset<T, EventCalendarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first EventCalendar that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarFindFirstArgs} args - Arguments to find a EventCalendar
         * @example
         * // Get one EventCalendar
         * const eventCalendar = await prisma.eventCalendar.findFirst({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirst<T extends EventCalendarFindFirstArgs>(args?: SelectSubset<T, EventCalendarFindFirstArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Find the first EventCalendar that matches the filter or
         * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarFindFirstOrThrowArgs} args - Arguments to find a EventCalendar
         * @example
         * // Get one EventCalendar
         * const eventCalendar = await prisma.eventCalendar.findFirstOrThrow({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        findFirstOrThrow<T extends EventCalendarFindFirstOrThrowArgs>(args?: SelectSubset<T, EventCalendarFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Find zero or more EventCalendars that matches the filter.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarFindManyArgs} args - Arguments to filter and select certain fields only.
         * @example
         * // Get all EventCalendars
         * const eventCalendars = await prisma.eventCalendar.findMany()
         *
         * // Get first 10 EventCalendars
         * const eventCalendars = await prisma.eventCalendar.findMany({ take: 10 })
         *
         * // Only select the `id`
         * const eventCalendarWithIdOnly = await prisma.eventCalendar.findMany({ select: { id: true } })
         */
        findMany<T extends EventCalendarFindManyArgs>(args?: SelectSubset<T, EventCalendarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>;
        /**
         * Create a EventCalendar.
         * @param {EventCalendarCreateArgs} args - Arguments to create a EventCalendar.
         * @example
         * // Create one EventCalendar
         * const EventCalendar = await prisma.eventCalendar.create({
         *   data: {
         *     // ... data to create a EventCalendar
         *   }
         * })
         */
        create<T extends EventCalendarCreateArgs>(args: SelectSubset<T, EventCalendarCreateArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Create many EventCalendars.
         * @param {EventCalendarCreateManyArgs} args - Arguments to create many EventCalendars.
         * @example
         * // Create many EventCalendars
         * const eventCalendar = await prisma.eventCalendar.createMany({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         */
        createMany<T extends EventCalendarCreateManyArgs>(args?: SelectSubset<T, EventCalendarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Create many EventCalendars and returns the data saved in the database.
         * @param {EventCalendarCreateManyAndReturnArgs} args - Arguments to create many EventCalendars.
         * @example
         * // Create many EventCalendars
         * const eventCalendar = await prisma.eventCalendar.createManyAndReturn({
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Create many EventCalendars and only return the `id`
         * const eventCalendarWithIdOnly = await prisma.eventCalendar.createManyAndReturn({
         *   select: { id: true },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        createManyAndReturn<T extends EventCalendarCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCalendarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>;
        /**
         * Delete a EventCalendar.
         * @param {EventCalendarDeleteArgs} args - Arguments to delete one EventCalendar.
         * @example
         * // Delete one EventCalendar
         * const EventCalendar = await prisma.eventCalendar.delete({
         *   where: {
         *     // ... filter to delete one EventCalendar
         *   }
         * })
         */
        delete<T extends EventCalendarDeleteArgs>(args: SelectSubset<T, EventCalendarDeleteArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Update one EventCalendar.
         * @param {EventCalendarUpdateArgs} args - Arguments to update one EventCalendar.
         * @example
         * // Update one EventCalendar
         * const eventCalendar = await prisma.eventCalendar.update({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        update<T extends EventCalendarUpdateArgs>(args: SelectSubset<T, EventCalendarUpdateArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Delete zero or more EventCalendars.
         * @param {EventCalendarDeleteManyArgs} args - Arguments to filter EventCalendars to delete.
         * @example
         * // Delete a few EventCalendars
         * const { count } = await prisma.eventCalendar.deleteMany({
         *   where: {
         *     // ... provide filter here
         *   }
         * })
         */
        deleteMany<T extends EventCalendarDeleteManyArgs>(args?: SelectSubset<T, EventCalendarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more EventCalendars.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarUpdateManyArgs} args - Arguments to update one or more rows.
         * @example
         * // Update many EventCalendars
         * const eventCalendar = await prisma.eventCalendar.updateMany({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: {
         *     // ... provide data here
         *   }
         * })
         */
        updateMany<T extends EventCalendarUpdateManyArgs>(args: SelectSubset<T, EventCalendarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>;
        /**
         * Update zero or more EventCalendars and returns the data updated in the database.
         * @param {EventCalendarUpdateManyAndReturnArgs} args - Arguments to update many EventCalendars.
         * @example
         * // Update many EventCalendars
         * const eventCalendar = await prisma.eventCalendar.updateManyAndReturn({
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         *
         * // Update zero or more EventCalendars and only return the `id`
         * const eventCalendarWithIdOnly = await prisma.eventCalendar.updateManyAndReturn({
         *   select: { id: true },
         *   where: {
         *     // ... provide filter here
         *   },
         *   data: [
         *     // ... provide data here
         *   ]
         * })
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         */
        updateManyAndReturn<T extends EventCalendarUpdateManyAndReturnArgs>(args: SelectSubset<T, EventCalendarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>;
        /**
         * Create or update one EventCalendar.
         * @param {EventCalendarUpsertArgs} args - Arguments to update or create a EventCalendar.
         * @example
         * // Update or create a EventCalendar
         * const eventCalendar = await prisma.eventCalendar.upsert({
         *   create: {
         *     // ... data to create a EventCalendar
         *   },
         *   update: {
         *     // ... in case it already exists, update
         *   },
         *   where: {
         *     // ... the filter for the EventCalendar we want to update
         *   }
         * })
         */
        upsert<T extends EventCalendarUpsertArgs>(args: SelectSubset<T, EventCalendarUpsertArgs<ExtArgs>>): Prisma__EventCalendarClient<$Result.GetResult<Prisma.$EventCalendarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>;
        /**
         * Count the number of EventCalendars.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarCountArgs} args - Arguments to filter EventCalendars to count.
         * @example
         * // Count the number of EventCalendars
         * const count = await prisma.eventCalendar.count({
         *   where: {
         *     // ... the filter for the EventCalendars we want to count
         *   }
         * })
         */
        count<T extends EventCalendarCountArgs>(args?: Subset<T, EventCalendarCountArgs>): Prisma.PrismaPromise<
            T extends $Utils.Record<'select', any>
            ? T['select'] extends true
            ? number
            : GetScalarType<T['select'], EventCalendarCountAggregateOutputType>
            : number
        >;
        /**
         * Allows you to perform aggregations operations on a EventCalendar.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
         * @example
         * // Ordered by age ascending
         * // Where email contains prisma.io
         * // Limited to the 10 users
         * const aggregations = await prisma.user.aggregate({
         *   _avg: {
         *     age: true,
         *   },
         *   where: {
         *     email: {
         *       contains: "prisma.io",
         *     },
         *   },
         *   orderBy: {
         *     age: "asc",
         *   },
         *   take: 10,
         * })
         */
        aggregate<T extends EventCalendarAggregateArgs>(args: Subset<T, EventCalendarAggregateArgs>): Prisma.PrismaPromise<GetEventCalendarAggregateType<T>>;
        /**
         * Group by EventCalendar.
         * Note, that providing `undefined` is treated as the value not being there.
         * Read more here: https://pris.ly/d/null-undefined
         * @param {EventCalendarGroupByArgs} args - Group by arguments.
         * @example
         * // Group by city, order by createdAt, get count
         * const result = await prisma.user.groupBy({
         *   by: ['city', 'createdAt'],
         *   orderBy: {
         *     createdAt: true
         *   },
         *   _count: {
         *     _all: true
         *   },
         * })
         */
        groupBy<T extends EventCalendarGroupByArgs, HasSelectOrTake extends Or<
            Extends<'skip', Keys<T>>,
            Extends<'take', Keys<T>>
        >, OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventCalendarGroupByArgs['orderBy'] }
        : { orderBy?: EventCalendarGroupByArgs['orderBy'] }, OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>, ByFields extends MaybeTupleToUnion<T['by']>, ByValid extends Has<ByFields, OrderFields>, HavingFields extends GetHavingFields<T['having']>, HavingValid extends Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? True : False, InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
            ]
        }[HavingFields]
        : 'take' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Keys<T>
        ? 'orderBy' extends Keys<T>
        ? ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]>(args: SubsetIntersection<T, EventCalendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventCalendarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    }

    /**
     * The delegate class that acts as a "Promise-like" for EventCalendar.
     * Why is this prefixed with `Prisma__`?
     * Because we want to prevent naming conflicts as mentioned in
     * https://github.com/prisma/prisma-client-js/issues/707
     */
    export interface Prisma__EventCalendarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
        readonly [Symbol.toStringTag]: "PrismaPromise";
        createdByUser<T extends EventCalendar$createdByUserArgs<ExtArgs> = {}>(args?: Subset<T, EventCalendar$createdByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        updatedByUser<T extends EventCalendar$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, EventCalendar$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        deletedByUser<T extends EventCalendar$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, EventCalendar$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        organization<T extends EventCalendar$organizationArgs<ExtArgs> = {}>(args?: Subset<T, EventCalendar$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        appointment<T extends EventCalendar$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, EventCalendar$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>;
        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of which ever callback is executed.
         */
        then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
        /**
         * Attaches a callback for only the rejection of the Promise.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns A Promise for the completion of the callback.
         */
        catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
        /**
         * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
         * resolved value cannot be modified from the callback.
         * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
         * @returns A Promise for the completion of the callback.
         */
        finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
    }

    /**
     * Fields of the EventCalendar model
     */
    interface EventCalendarFieldRefs {
        readonly id: FieldRef<"EventCalendar", 'String'>;
        readonly type: FieldRef<"EventCalendar", 'String'>;
        readonly createdAt: FieldRef<"EventCalendar", 'DateTime'>;
        readonly createdById: FieldRef<"EventCalendar", 'String'>;
        readonly updatedAt: FieldRef<"EventCalendar", 'DateTime'>;
        readonly updatedById: FieldRef<"EventCalendar", 'String'>;
        readonly deletedAt: FieldRef<"EventCalendar", 'DateTime'>;
        readonly deletedById: FieldRef<"EventCalendar", 'String'>;
        readonly deleted: FieldRef<"EventCalendar", 'Boolean'>;
        readonly organizationId: FieldRef<"EventCalendar", 'String'>;
        readonly title: FieldRef<"EventCalendar", 'String'>;
        readonly description: FieldRef<"EventCalendar", 'String'>;
        readonly start: FieldRef<"EventCalendar", 'DateTime'>;
        readonly end: FieldRef<"EventCalendar", 'DateTime'>;
        readonly allDay: FieldRef<"EventCalendar", 'Boolean'>;
        readonly eventType: FieldRef<"EventCalendar", 'EventCalendarType'>;
        readonly rrule: FieldRef<"EventCalendar", 'String'>;
        readonly appointmentId: FieldRef<"EventCalendar", 'String'>;
    }

    export type PrismaPromise<T> = $Public.PrismaPromise<T>;
    export type DecimalJsLike = runtime.DecimalJsLike;
    /**
     * Metrics
     */
    export type Metrics = runtime.Metrics;
    export type Metric<T> = runtime.Metric<T>;
    export type MetricHistogram = runtime.MetricHistogram;
    export type MetricHistogramBucket = runtime.MetricHistogramBucket;
    /**
     * Prisma Client JS version: 6.11.1
     * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
     */
    export type PrismaVersion = {
        client: string
    };
    type SelectAndInclude = {
        select: any
        include: any
    };
    type SelectAndOmit = {
        select: any
        omit: any
    };
    /**
     * Get the type of the value, that the Promise holds.
     */
    export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;
    /**
     * Get the return type of a function which returns a Promise.
     */
    export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>;
    /**
     * From T, pick a set of properties whose keys are in the union K
     */
    type Prisma__Pick<T, K extends keyof T> = {
        [P in K]: T[P];
    };
    export type Enumerable<T> = T | Array<T>;
    export type RequiredKeys<T> = {
        [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
    }[keyof T];
    export type TruthyKeys<T> = keyof {
        [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
    };
    export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>;
    /**
     * Subset
     * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
     */
    export type Subset<T, U> = {
        [key in keyof T]: key extends keyof U ? T[key] : never;
    };
    /**
     * SelectSubset
     * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
     * Additionally, it validates, if both select and include are present. If the case, it errors.
     */
    export type SelectSubset<T, U> = {
        [key in keyof T]: key extends keyof U ? T[key] : never
    } &
        (T extends SelectAndInclude
            ? 'Please either choose `select` or `include`.'
            : T extends SelectAndOmit
            ? 'Please either choose `select` or `omit`.'
            : {});
    /**
     * Subset + Intersection
     * @desc From `T` pick properties that exist in `U` and intersect `K`
     */
    export type SubsetIntersection<T, U, K> = {
        [key in keyof T]: key extends keyof U ? T[key] : never
    } &
        K;
    type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
    /**
     * XOR is needed to have a real mutually exclusive union type
     * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
     */
    type XOR<T, U> = T extends object ?
        U extends object ?
        (Without<T, U> & U) | (Without<U, T> & T)
        : U : T;
    /**
     * Is T a Record?
     */
    type IsObject<T extends any> = T extends Array<any>
        ? False
        : T extends Date
        ? False
        : T extends Uint8Array
        ? False
        : T extends BigInt
        ? False
        : T extends object
        ? True
        : False;
    /**
     * If it's T[], return T
     */
    export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;
    /**
     * From ts-toolbelt
     */
    type __Either<O extends object, K extends Key> = Omit<O, K> &
        {
            // Merge all but K
            [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
        }[K];
    type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;
    type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;
    type _Either<O extends object, K extends Key, strict extends Boolean> = {
        1: EitherStrict<O, K>
        0: EitherLoose<O, K>
    }[strict];
    type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown ? _Either<O, K, strict> : never;
    export type Union = any;
    type PatchUndefined<O extends object, O1 extends object> = {
        [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
    } & {};
    /** Helper Types for "Merge" */
    export type IntersectOf<U extends Union> = (
        U extends unknown ? (k: U) => void : never
    ) extends (k: infer I) => void
        ? I
        : never;
    export type Overwrite<O extends object, O1 extends object> = {
        [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
    } & {};
    type _Merge<U extends object> = IntersectOf<Overwrite<U, {
        [K in keyof U]-?: At<U, K>;
    }>>;
    type Key = string | number | symbol;
    type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
    type AtStrict<O extends object, K extends Key> = O[K & keyof O];
    type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
    export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
        1: AtStrict<O, K>;
        0: AtLoose<O, K>;
    }[strict];
    export type ComputeRaw<A extends any> = A extends Function ? A : {
        [K in keyof A]: A[K];
    } & {};
    export type OptionalFlat<O> = {
        [K in keyof O]?: O[K];
    } & {};
    type _Record<K extends keyof any, T> = {
        [P in K]: T;
    };
    type NoExpand<T> = T extends unknown ? T : never;
    type AtLeast<O extends object, K extends string> = NoExpand<
        O extends unknown
        ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | { [P in keyof O as P extends K ? P : never]-?: O[P] } & O
        : never>;
    type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;
    export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
    /** End Helper Types for "Merge" */
    export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;
    /**
     *   A [[Boolean]]
     */
    export type Boolean = True | False;
    export type True = 1;
    /**
     *   0
     */
    export type False = 0;
    export type Not<B extends Boolean> = {
        0: 1
        1: 0
    }[B];
    export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
        ? 0 // anything `never` is false
        : A1 extends A2
        ? 1
        : 0;
    export type Has<U extends Union, U1 extends Union> = Not<
        Extends<Exclude<U1, U>, U1>
    >;
    export type Or<B1 extends Boolean, B2 extends Boolean> = {
        0: {
            0: 0
            1: 1
        }
        1: {
            0: 1
            1: 1
        }
    }[B1][B2];
    export type Keys<U extends Union> = U extends unknown ? keyof U : never;
    type Cast<A, B> = A extends B ? A : B;
    /**
     * Used by group by
     */
    export type GetScalarType<T, O> = O extends object ? {
        [P in keyof T]: P extends keyof O
        ? O[P]
        : never
    } : never;
    type FieldPaths<T, U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>> = IsObject<T> extends True ? U : T;
    type GetHavingFields<T> = {
        [K in keyof T]: Or<
            Or<Extends<'OR', K>, Extends<'AND', K>>,
            Extends<'NOT', K>
        > extends True
        ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
        : {} extends FieldPaths<T[K]>
        ? never
        : K
    }[keyof T];
    /**
     * Convert tuple to union
     */
    type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
    type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
    type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;
    /**
     * Like `Pick`, but additionally can also accept an array of keys
     */
    type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>;
    /**
     * Exclude all keys with underscores
     */
    type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;
    export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;
    type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>;
    export type ModelName = (typeof ModelName)[keyof typeof ModelName];
    export type Datasources = {
        db?: Datasource
    };
    export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
        globalOmitOptions: {
            omit: GlobalOmitOptions
        }
        meta: {
            modelProps: "user" | "asset" | "session" | "account" | "verification" | "organization" | "member" | "invitation" | "cid" | "appointmentCid" | "appointment" | "patient" | "vaccinations" | "vaccinationsValues" | "allergies" | "allergiesValues" | "medications" | "medicationsValues" | "examResults" | "examResultsValues" | "comorbidities" | "comorbiditiesValues" | "surgeries" | "surgeriesValues" | "healthPlans" | "healthPlansValues" | "defaultObjectiveInformation" | "eventCalendar"
            txIsolationLevel: Prisma.TransactionIsolationLevel
        }
        model: {
            User: {
                payload: Prisma.$UserPayload<ExtArgs>
                fields: Prisma.UserFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.UserFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>
                    }
                    findFirst: {
                        args: Prisma.UserFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>
                    }
                    findMany: {
                        args: Prisma.UserFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
                    }
                    create: {
                        args: Prisma.UserCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>
                    }
                    createMany: {
                        args: Prisma.UserCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
                    }
                    delete: {
                        args: Prisma.UserDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>
                    }
                    update: {
                        args: Prisma.UserUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>
                    }
                    deleteMany: {
                        args: Prisma.UserDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.UserUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
                    }
                    upsert: {
                        args: Prisma.UserUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$UserPayload>
                    }
                    aggregate: {
                        args: Prisma.UserAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateUser>
                    }
                    groupBy: {
                        args: Prisma.UserGroupByArgs<ExtArgs>
                        result: $Utils.Optional<UserGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.UserCountArgs<ExtArgs>
                        result: $Utils.Optional<UserCountAggregateOutputType> | number
                    }
                }
            }
            Asset: {
                payload: Prisma.$AssetPayload<ExtArgs>
                fields: Prisma.AssetFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.AssetFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>
                    }
                    findFirst: {
                        args: Prisma.AssetFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>
                    }
                    findMany: {
                        args: Prisma.AssetFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
                    }
                    create: {
                        args: Prisma.AssetCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>
                    }
                    createMany: {
                        args: Prisma.AssetCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
                    }
                    delete: {
                        args: Prisma.AssetDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>
                    }
                    update: {
                        args: Prisma.AssetUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>
                    }
                    deleteMany: {
                        args: Prisma.AssetDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.AssetUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.AssetUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
                    }
                    upsert: {
                        args: Prisma.AssetUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AssetPayload>
                    }
                    aggregate: {
                        args: Prisma.AssetAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateAsset>
                    }
                    groupBy: {
                        args: Prisma.AssetGroupByArgs<ExtArgs>
                        result: $Utils.Optional<AssetGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.AssetCountArgs<ExtArgs>
                        result: $Utils.Optional<AssetCountAggregateOutputType> | number
                    }
                }
            }
            Session: {
                payload: Prisma.$SessionPayload<ExtArgs>
                fields: Prisma.SessionFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.SessionFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>
                    }
                    findFirst: {
                        args: Prisma.SessionFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>
                    }
                    findMany: {
                        args: Prisma.SessionFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
                    }
                    create: {
                        args: Prisma.SessionCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>
                    }
                    createMany: {
                        args: Prisma.SessionCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
                    }
                    delete: {
                        args: Prisma.SessionDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>
                    }
                    update: {
                        args: Prisma.SessionUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>
                    }
                    deleteMany: {
                        args: Prisma.SessionDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.SessionUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
                    }
                    upsert: {
                        args: Prisma.SessionUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SessionPayload>
                    }
                    aggregate: {
                        args: Prisma.SessionAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateSession>
                    }
                    groupBy: {
                        args: Prisma.SessionGroupByArgs<ExtArgs>
                        result: $Utils.Optional<SessionGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.SessionCountArgs<ExtArgs>
                        result: $Utils.Optional<SessionCountAggregateOutputType> | number
                    }
                }
            }
            Account: {
                payload: Prisma.$AccountPayload<ExtArgs>
                fields: Prisma.AccountFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.AccountFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>
                    }
                    findFirst: {
                        args: Prisma.AccountFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>
                    }
                    findMany: {
                        args: Prisma.AccountFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
                    }
                    create: {
                        args: Prisma.AccountCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>
                    }
                    createMany: {
                        args: Prisma.AccountCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
                    }
                    delete: {
                        args: Prisma.AccountDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>
                    }
                    update: {
                        args: Prisma.AccountUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>
                    }
                    deleteMany: {
                        args: Prisma.AccountDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.AccountUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
                    }
                    upsert: {
                        args: Prisma.AccountUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AccountPayload>
                    }
                    aggregate: {
                        args: Prisma.AccountAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateAccount>
                    }
                    groupBy: {
                        args: Prisma.AccountGroupByArgs<ExtArgs>
                        result: $Utils.Optional<AccountGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.AccountCountArgs<ExtArgs>
                        result: $Utils.Optional<AccountCountAggregateOutputType> | number
                    }
                }
            }
            Verification: {
                payload: Prisma.$VerificationPayload<ExtArgs>
                fields: Prisma.VerificationFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.VerificationFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
                    }
                    findFirst: {
                        args: Prisma.VerificationFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
                    }
                    findMany: {
                        args: Prisma.VerificationFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
                    }
                    create: {
                        args: Prisma.VerificationCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
                    }
                    createMany: {
                        args: Prisma.VerificationCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
                    }
                    delete: {
                        args: Prisma.VerificationDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
                    }
                    update: {
                        args: Prisma.VerificationUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
                    }
                    deleteMany: {
                        args: Prisma.VerificationDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.VerificationUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
                    }
                    upsert: {
                        args: Prisma.VerificationUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
                    }
                    aggregate: {
                        args: Prisma.VerificationAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateVerification>
                    }
                    groupBy: {
                        args: Prisma.VerificationGroupByArgs<ExtArgs>
                        result: $Utils.Optional<VerificationGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.VerificationCountArgs<ExtArgs>
                        result: $Utils.Optional<VerificationCountAggregateOutputType> | number
                    }
                }
            }
            Organization: {
                payload: Prisma.$OrganizationPayload<ExtArgs>
                fields: Prisma.OrganizationFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
                    }
                    findFirst: {
                        args: Prisma.OrganizationFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
                    }
                    findMany: {
                        args: Prisma.OrganizationFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
                    }
                    create: {
                        args: Prisma.OrganizationCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
                    }
                    createMany: {
                        args: Prisma.OrganizationCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
                    }
                    delete: {
                        args: Prisma.OrganizationDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
                    }
                    update: {
                        args: Prisma.OrganizationUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
                    }
                    deleteMany: {
                        args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
                    }
                    upsert: {
                        args: Prisma.OrganizationUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
                    }
                    aggregate: {
                        args: Prisma.OrganizationAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateOrganization>
                    }
                    groupBy: {
                        args: Prisma.OrganizationGroupByArgs<ExtArgs>
                        result: $Utils.Optional<OrganizationGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.OrganizationCountArgs<ExtArgs>
                        result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
                    }
                }
            }
            Member: {
                payload: Prisma.$MemberPayload<ExtArgs>
                fields: Prisma.MemberFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.MemberFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>
                    }
                    findFirst: {
                        args: Prisma.MemberFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>
                    }
                    findMany: {
                        args: Prisma.MemberFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
                    }
                    create: {
                        args: Prisma.MemberCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>
                    }
                    createMany: {
                        args: Prisma.MemberCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
                    }
                    delete: {
                        args: Prisma.MemberDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>
                    }
                    update: {
                        args: Prisma.MemberUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>
                    }
                    deleteMany: {
                        args: Prisma.MemberDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.MemberUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
                    }
                    upsert: {
                        args: Prisma.MemberUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MemberPayload>
                    }
                    aggregate: {
                        args: Prisma.MemberAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateMember>
                    }
                    groupBy: {
                        args: Prisma.MemberGroupByArgs<ExtArgs>
                        result: $Utils.Optional<MemberGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.MemberCountArgs<ExtArgs>
                        result: $Utils.Optional<MemberCountAggregateOutputType> | number
                    }
                }
            }
            Invitation: {
                payload: Prisma.$InvitationPayload<ExtArgs>
                fields: Prisma.InvitationFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.InvitationFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
                    }
                    findFirst: {
                        args: Prisma.InvitationFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
                    }
                    findMany: {
                        args: Prisma.InvitationFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
                    }
                    create: {
                        args: Prisma.InvitationCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
                    }
                    createMany: {
                        args: Prisma.InvitationCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
                    }
                    delete: {
                        args: Prisma.InvitationDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
                    }
                    update: {
                        args: Prisma.InvitationUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
                    }
                    deleteMany: {
                        args: Prisma.InvitationDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.InvitationUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
                    }
                    upsert: {
                        args: Prisma.InvitationUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
                    }
                    aggregate: {
                        args: Prisma.InvitationAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateInvitation>
                    }
                    groupBy: {
                        args: Prisma.InvitationGroupByArgs<ExtArgs>
                        result: $Utils.Optional<InvitationGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.InvitationCountArgs<ExtArgs>
                        result: $Utils.Optional<InvitationCountAggregateOutputType> | number
                    }
                }
            }
            Cid: {
                payload: Prisma.$CidPayload<ExtArgs>
                fields: Prisma.CidFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.CidFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.CidFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>
                    }
                    findFirst: {
                        args: Prisma.CidFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.CidFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>
                    }
                    findMany: {
                        args: Prisma.CidFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>[]
                    }
                    create: {
                        args: Prisma.CidCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>
                    }
                    createMany: {
                        args: Prisma.CidCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.CidCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>[]
                    }
                    delete: {
                        args: Prisma.CidDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>
                    }
                    update: {
                        args: Prisma.CidUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>
                    }
                    deleteMany: {
                        args: Prisma.CidDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.CidUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.CidUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>[]
                    }
                    upsert: {
                        args: Prisma.CidUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$CidPayload>
                    }
                    aggregate: {
                        args: Prisma.CidAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateCid>
                    }
                    groupBy: {
                        args: Prisma.CidGroupByArgs<ExtArgs>
                        result: $Utils.Optional<CidGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.CidCountArgs<ExtArgs>
                        result: $Utils.Optional<CidCountAggregateOutputType> | number
                    }
                }
            }
            AppointmentCid: {
                payload: Prisma.$AppointmentCidPayload<ExtArgs>
                fields: Prisma.AppointmentCidFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.AppointmentCidFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.AppointmentCidFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>
                    }
                    findFirst: {
                        args: Prisma.AppointmentCidFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.AppointmentCidFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>
                    }
                    findMany: {
                        args: Prisma.AppointmentCidFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>[]
                    }
                    create: {
                        args: Prisma.AppointmentCidCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>
                    }
                    createMany: {
                        args: Prisma.AppointmentCidCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.AppointmentCidCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>[]
                    }
                    delete: {
                        args: Prisma.AppointmentCidDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>
                    }
                    update: {
                        args: Prisma.AppointmentCidUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>
                    }
                    deleteMany: {
                        args: Prisma.AppointmentCidDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.AppointmentCidUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.AppointmentCidUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>[]
                    }
                    upsert: {
                        args: Prisma.AppointmentCidUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentCidPayload>
                    }
                    aggregate: {
                        args: Prisma.AppointmentCidAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateAppointmentCid>
                    }
                    groupBy: {
                        args: Prisma.AppointmentCidGroupByArgs<ExtArgs>
                        result: $Utils.Optional<AppointmentCidGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.AppointmentCidCountArgs<ExtArgs>
                        result: $Utils.Optional<AppointmentCidCountAggregateOutputType> | number
                    }
                }
            }
            Appointment: {
                payload: Prisma.$AppointmentPayload<ExtArgs>
                fields: Prisma.AppointmentFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
                    }
                    findFirst: {
                        args: Prisma.AppointmentFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
                    }
                    findMany: {
                        args: Prisma.AppointmentFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
                    }
                    create: {
                        args: Prisma.AppointmentCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
                    }
                    createMany: {
                        args: Prisma.AppointmentCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
                    }
                    delete: {
                        args: Prisma.AppointmentDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
                    }
                    update: {
                        args: Prisma.AppointmentUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
                    }
                    deleteMany: {
                        args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
                    }
                    upsert: {
                        args: Prisma.AppointmentUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
                    }
                    aggregate: {
                        args: Prisma.AppointmentAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateAppointment>
                    }
                    groupBy: {
                        args: Prisma.AppointmentGroupByArgs<ExtArgs>
                        result: $Utils.Optional<AppointmentGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.AppointmentCountArgs<ExtArgs>
                        result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
                    }
                }
            }
            Patient: {
                payload: Prisma.$PatientPayload<ExtArgs>
                fields: Prisma.PatientFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.PatientFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>
                    }
                    findFirst: {
                        args: Prisma.PatientFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>
                    }
                    findMany: {
                        args: Prisma.PatientFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
                    }
                    create: {
                        args: Prisma.PatientCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>
                    }
                    createMany: {
                        args: Prisma.PatientCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
                    }
                    delete: {
                        args: Prisma.PatientDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>
                    }
                    update: {
                        args: Prisma.PatientUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>
                    }
                    deleteMany: {
                        args: Prisma.PatientDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.PatientUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
                    }
                    upsert: {
                        args: Prisma.PatientUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$PatientPayload>
                    }
                    aggregate: {
                        args: Prisma.PatientAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregatePatient>
                    }
                    groupBy: {
                        args: Prisma.PatientGroupByArgs<ExtArgs>
                        result: $Utils.Optional<PatientGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.PatientCountArgs<ExtArgs>
                        result: $Utils.Optional<PatientCountAggregateOutputType> | number
                    }
                }
            }
            Vaccinations: {
                payload: Prisma.$VaccinationsPayload<ExtArgs>
                fields: Prisma.VaccinationsFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.VaccinationsFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.VaccinationsFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>
                    }
                    findFirst: {
                        args: Prisma.VaccinationsFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.VaccinationsFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>
                    }
                    findMany: {
                        args: Prisma.VaccinationsFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>[]
                    }
                    create: {
                        args: Prisma.VaccinationsCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>
                    }
                    createMany: {
                        args: Prisma.VaccinationsCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.VaccinationsCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>[]
                    }
                    delete: {
                        args: Prisma.VaccinationsDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>
                    }
                    update: {
                        args: Prisma.VaccinationsUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>
                    }
                    deleteMany: {
                        args: Prisma.VaccinationsDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.VaccinationsUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.VaccinationsUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>[]
                    }
                    upsert: {
                        args: Prisma.VaccinationsUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsPayload>
                    }
                    aggregate: {
                        args: Prisma.VaccinationsAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateVaccinations>
                    }
                    groupBy: {
                        args: Prisma.VaccinationsGroupByArgs<ExtArgs>
                        result: $Utils.Optional<VaccinationsGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.VaccinationsCountArgs<ExtArgs>
                        result: $Utils.Optional<VaccinationsCountAggregateOutputType> | number
                    }
                }
            }
            VaccinationsValues: {
                payload: Prisma.$VaccinationsValuesPayload<ExtArgs>
                fields: Prisma.VaccinationsValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.VaccinationsValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.VaccinationsValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.VaccinationsValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.VaccinationsValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>
                    }
                    findMany: {
                        args: Prisma.VaccinationsValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>[]
                    }
                    create: {
                        args: Prisma.VaccinationsValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>
                    }
                    createMany: {
                        args: Prisma.VaccinationsValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.VaccinationsValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.VaccinationsValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>
                    }
                    update: {
                        args: Prisma.VaccinationsValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.VaccinationsValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.VaccinationsValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.VaccinationsValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.VaccinationsValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$VaccinationsValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.VaccinationsValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateVaccinationsValues>
                    }
                    groupBy: {
                        args: Prisma.VaccinationsValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<VaccinationsValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.VaccinationsValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<VaccinationsValuesCountAggregateOutputType> | number
                    }
                }
            }
            Allergies: {
                payload: Prisma.$AllergiesPayload<ExtArgs>
                fields: Prisma.AllergiesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.AllergiesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.AllergiesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>
                    }
                    findFirst: {
                        args: Prisma.AllergiesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.AllergiesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>
                    }
                    findMany: {
                        args: Prisma.AllergiesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>[]
                    }
                    create: {
                        args: Prisma.AllergiesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>
                    }
                    createMany: {
                        args: Prisma.AllergiesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.AllergiesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>[]
                    }
                    delete: {
                        args: Prisma.AllergiesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>
                    }
                    update: {
                        args: Prisma.AllergiesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>
                    }
                    deleteMany: {
                        args: Prisma.AllergiesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.AllergiesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.AllergiesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>[]
                    }
                    upsert: {
                        args: Prisma.AllergiesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesPayload>
                    }
                    aggregate: {
                        args: Prisma.AllergiesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateAllergies>
                    }
                    groupBy: {
                        args: Prisma.AllergiesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<AllergiesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.AllergiesCountArgs<ExtArgs>
                        result: $Utils.Optional<AllergiesCountAggregateOutputType> | number
                    }
                }
            }
            AllergiesValues: {
                payload: Prisma.$AllergiesValuesPayload<ExtArgs>
                fields: Prisma.AllergiesValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.AllergiesValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.AllergiesValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.AllergiesValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.AllergiesValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>
                    }
                    findMany: {
                        args: Prisma.AllergiesValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>[]
                    }
                    create: {
                        args: Prisma.AllergiesValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>
                    }
                    createMany: {
                        args: Prisma.AllergiesValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.AllergiesValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.AllergiesValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>
                    }
                    update: {
                        args: Prisma.AllergiesValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.AllergiesValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.AllergiesValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.AllergiesValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.AllergiesValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$AllergiesValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.AllergiesValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateAllergiesValues>
                    }
                    groupBy: {
                        args: Prisma.AllergiesValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<AllergiesValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.AllergiesValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<AllergiesValuesCountAggregateOutputType> | number
                    }
                }
            }
            Medications: {
                payload: Prisma.$MedicationsPayload<ExtArgs>
                fields: Prisma.MedicationsFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.MedicationsFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.MedicationsFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>
                    }
                    findFirst: {
                        args: Prisma.MedicationsFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.MedicationsFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>
                    }
                    findMany: {
                        args: Prisma.MedicationsFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>[]
                    }
                    create: {
                        args: Prisma.MedicationsCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>
                    }
                    createMany: {
                        args: Prisma.MedicationsCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.MedicationsCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>[]
                    }
                    delete: {
                        args: Prisma.MedicationsDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>
                    }
                    update: {
                        args: Prisma.MedicationsUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>
                    }
                    deleteMany: {
                        args: Prisma.MedicationsDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.MedicationsUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.MedicationsUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>[]
                    }
                    upsert: {
                        args: Prisma.MedicationsUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsPayload>
                    }
                    aggregate: {
                        args: Prisma.MedicationsAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateMedications>
                    }
                    groupBy: {
                        args: Prisma.MedicationsGroupByArgs<ExtArgs>
                        result: $Utils.Optional<MedicationsGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.MedicationsCountArgs<ExtArgs>
                        result: $Utils.Optional<MedicationsCountAggregateOutputType> | number
                    }
                }
            }
            MedicationsValues: {
                payload: Prisma.$MedicationsValuesPayload<ExtArgs>
                fields: Prisma.MedicationsValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.MedicationsValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.MedicationsValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.MedicationsValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.MedicationsValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>
                    }
                    findMany: {
                        args: Prisma.MedicationsValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>[]
                    }
                    create: {
                        args: Prisma.MedicationsValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>
                    }
                    createMany: {
                        args: Prisma.MedicationsValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.MedicationsValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.MedicationsValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>
                    }
                    update: {
                        args: Prisma.MedicationsValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.MedicationsValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.MedicationsValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.MedicationsValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.MedicationsValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$MedicationsValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.MedicationsValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateMedicationsValues>
                    }
                    groupBy: {
                        args: Prisma.MedicationsValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<MedicationsValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.MedicationsValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<MedicationsValuesCountAggregateOutputType> | number
                    }
                }
            }
            ExamResults: {
                payload: Prisma.$ExamResultsPayload<ExtArgs>
                fields: Prisma.ExamResultsFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.ExamResultsFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.ExamResultsFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>
                    }
                    findFirst: {
                        args: Prisma.ExamResultsFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.ExamResultsFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>
                    }
                    findMany: {
                        args: Prisma.ExamResultsFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>[]
                    }
                    create: {
                        args: Prisma.ExamResultsCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>
                    }
                    createMany: {
                        args: Prisma.ExamResultsCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.ExamResultsCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>[]
                    }
                    delete: {
                        args: Prisma.ExamResultsDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>
                    }
                    update: {
                        args: Prisma.ExamResultsUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>
                    }
                    deleteMany: {
                        args: Prisma.ExamResultsDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.ExamResultsUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.ExamResultsUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>[]
                    }
                    upsert: {
                        args: Prisma.ExamResultsUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsPayload>
                    }
                    aggregate: {
                        args: Prisma.ExamResultsAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateExamResults>
                    }
                    groupBy: {
                        args: Prisma.ExamResultsGroupByArgs<ExtArgs>
                        result: $Utils.Optional<ExamResultsGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.ExamResultsCountArgs<ExtArgs>
                        result: $Utils.Optional<ExamResultsCountAggregateOutputType> | number
                    }
                }
            }
            ExamResultsValues: {
                payload: Prisma.$ExamResultsValuesPayload<ExtArgs>
                fields: Prisma.ExamResultsValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.ExamResultsValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.ExamResultsValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.ExamResultsValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.ExamResultsValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>
                    }
                    findMany: {
                        args: Prisma.ExamResultsValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>[]
                    }
                    create: {
                        args: Prisma.ExamResultsValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>
                    }
                    createMany: {
                        args: Prisma.ExamResultsValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.ExamResultsValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.ExamResultsValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>
                    }
                    update: {
                        args: Prisma.ExamResultsValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.ExamResultsValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.ExamResultsValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.ExamResultsValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.ExamResultsValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ExamResultsValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.ExamResultsValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateExamResultsValues>
                    }
                    groupBy: {
                        args: Prisma.ExamResultsValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<ExamResultsValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.ExamResultsValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<ExamResultsValuesCountAggregateOutputType> | number
                    }
                }
            }
            Comorbidities: {
                payload: Prisma.$ComorbiditiesPayload<ExtArgs>
                fields: Prisma.ComorbiditiesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.ComorbiditiesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.ComorbiditiesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>
                    }
                    findFirst: {
                        args: Prisma.ComorbiditiesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.ComorbiditiesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>
                    }
                    findMany: {
                        args: Prisma.ComorbiditiesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>[]
                    }
                    create: {
                        args: Prisma.ComorbiditiesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>
                    }
                    createMany: {
                        args: Prisma.ComorbiditiesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.ComorbiditiesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>[]
                    }
                    delete: {
                        args: Prisma.ComorbiditiesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>
                    }
                    update: {
                        args: Prisma.ComorbiditiesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>
                    }
                    deleteMany: {
                        args: Prisma.ComorbiditiesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.ComorbiditiesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.ComorbiditiesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>[]
                    }
                    upsert: {
                        args: Prisma.ComorbiditiesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesPayload>
                    }
                    aggregate: {
                        args: Prisma.ComorbiditiesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateComorbidities>
                    }
                    groupBy: {
                        args: Prisma.ComorbiditiesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<ComorbiditiesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.ComorbiditiesCountArgs<ExtArgs>
                        result: $Utils.Optional<ComorbiditiesCountAggregateOutputType> | number
                    }
                }
            }
            ComorbiditiesValues: {
                payload: Prisma.$ComorbiditiesValuesPayload<ExtArgs>
                fields: Prisma.ComorbiditiesValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.ComorbiditiesValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.ComorbiditiesValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.ComorbiditiesValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.ComorbiditiesValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>
                    }
                    findMany: {
                        args: Prisma.ComorbiditiesValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>[]
                    }
                    create: {
                        args: Prisma.ComorbiditiesValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>
                    }
                    createMany: {
                        args: Prisma.ComorbiditiesValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.ComorbiditiesValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.ComorbiditiesValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>
                    }
                    update: {
                        args: Prisma.ComorbiditiesValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.ComorbiditiesValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.ComorbiditiesValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.ComorbiditiesValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.ComorbiditiesValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$ComorbiditiesValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.ComorbiditiesValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateComorbiditiesValues>
                    }
                    groupBy: {
                        args: Prisma.ComorbiditiesValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<ComorbiditiesValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.ComorbiditiesValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<ComorbiditiesValuesCountAggregateOutputType> | number
                    }
                }
            }
            Surgeries: {
                payload: Prisma.$SurgeriesPayload<ExtArgs>
                fields: Prisma.SurgeriesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.SurgeriesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.SurgeriesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>
                    }
                    findFirst: {
                        args: Prisma.SurgeriesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.SurgeriesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>
                    }
                    findMany: {
                        args: Prisma.SurgeriesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>[]
                    }
                    create: {
                        args: Prisma.SurgeriesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>
                    }
                    createMany: {
                        args: Prisma.SurgeriesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.SurgeriesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>[]
                    }
                    delete: {
                        args: Prisma.SurgeriesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>
                    }
                    update: {
                        args: Prisma.SurgeriesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>
                    }
                    deleteMany: {
                        args: Prisma.SurgeriesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.SurgeriesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.SurgeriesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>[]
                    }
                    upsert: {
                        args: Prisma.SurgeriesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesPayload>
                    }
                    aggregate: {
                        args: Prisma.SurgeriesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateSurgeries>
                    }
                    groupBy: {
                        args: Prisma.SurgeriesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<SurgeriesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.SurgeriesCountArgs<ExtArgs>
                        result: $Utils.Optional<SurgeriesCountAggregateOutputType> | number
                    }
                }
            }
            SurgeriesValues: {
                payload: Prisma.$SurgeriesValuesPayload<ExtArgs>
                fields: Prisma.SurgeriesValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.SurgeriesValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.SurgeriesValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.SurgeriesValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.SurgeriesValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>
                    }
                    findMany: {
                        args: Prisma.SurgeriesValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>[]
                    }
                    create: {
                        args: Prisma.SurgeriesValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>
                    }
                    createMany: {
                        args: Prisma.SurgeriesValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.SurgeriesValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.SurgeriesValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>
                    }
                    update: {
                        args: Prisma.SurgeriesValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.SurgeriesValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.SurgeriesValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.SurgeriesValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.SurgeriesValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$SurgeriesValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.SurgeriesValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateSurgeriesValues>
                    }
                    groupBy: {
                        args: Prisma.SurgeriesValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<SurgeriesValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.SurgeriesValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<SurgeriesValuesCountAggregateOutputType> | number
                    }
                }
            }
            HealthPlans: {
                payload: Prisma.$HealthPlansPayload<ExtArgs>
                fields: Prisma.HealthPlansFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.HealthPlansFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.HealthPlansFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>
                    }
                    findFirst: {
                        args: Prisma.HealthPlansFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.HealthPlansFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>
                    }
                    findMany: {
                        args: Prisma.HealthPlansFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>[]
                    }
                    create: {
                        args: Prisma.HealthPlansCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>
                    }
                    createMany: {
                        args: Prisma.HealthPlansCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.HealthPlansCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>[]
                    }
                    delete: {
                        args: Prisma.HealthPlansDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>
                    }
                    update: {
                        args: Prisma.HealthPlansUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>
                    }
                    deleteMany: {
                        args: Prisma.HealthPlansDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.HealthPlansUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.HealthPlansUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>[]
                    }
                    upsert: {
                        args: Prisma.HealthPlansUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansPayload>
                    }
                    aggregate: {
                        args: Prisma.HealthPlansAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateHealthPlans>
                    }
                    groupBy: {
                        args: Prisma.HealthPlansGroupByArgs<ExtArgs>
                        result: $Utils.Optional<HealthPlansGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.HealthPlansCountArgs<ExtArgs>
                        result: $Utils.Optional<HealthPlansCountAggregateOutputType> | number
                    }
                }
            }
            HealthPlansValues: {
                payload: Prisma.$HealthPlansValuesPayload<ExtArgs>
                fields: Prisma.HealthPlansValuesFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.HealthPlansValuesFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.HealthPlansValuesFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>
                    }
                    findFirst: {
                        args: Prisma.HealthPlansValuesFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.HealthPlansValuesFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>
                    }
                    findMany: {
                        args: Prisma.HealthPlansValuesFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>[]
                    }
                    create: {
                        args: Prisma.HealthPlansValuesCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>
                    }
                    createMany: {
                        args: Prisma.HealthPlansValuesCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.HealthPlansValuesCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>[]
                    }
                    delete: {
                        args: Prisma.HealthPlansValuesDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>
                    }
                    update: {
                        args: Prisma.HealthPlansValuesUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>
                    }
                    deleteMany: {
                        args: Prisma.HealthPlansValuesDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.HealthPlansValuesUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.HealthPlansValuesUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>[]
                    }
                    upsert: {
                        args: Prisma.HealthPlansValuesUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$HealthPlansValuesPayload>
                    }
                    aggregate: {
                        args: Prisma.HealthPlansValuesAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateHealthPlansValues>
                    }
                    groupBy: {
                        args: Prisma.HealthPlansValuesGroupByArgs<ExtArgs>
                        result: $Utils.Optional<HealthPlansValuesGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.HealthPlansValuesCountArgs<ExtArgs>
                        result: $Utils.Optional<HealthPlansValuesCountAggregateOutputType> | number
                    }
                }
            }
            DefaultObjectiveInformation: {
                payload: Prisma.$DefaultObjectiveInformationPayload<ExtArgs>
                fields: Prisma.DefaultObjectiveInformationFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.DefaultObjectiveInformationFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.DefaultObjectiveInformationFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>
                    }
                    findFirst: {
                        args: Prisma.DefaultObjectiveInformationFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.DefaultObjectiveInformationFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>
                    }
                    findMany: {
                        args: Prisma.DefaultObjectiveInformationFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>[]
                    }
                    create: {
                        args: Prisma.DefaultObjectiveInformationCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>
                    }
                    createMany: {
                        args: Prisma.DefaultObjectiveInformationCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.DefaultObjectiveInformationCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>[]
                    }
                    delete: {
                        args: Prisma.DefaultObjectiveInformationDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>
                    }
                    update: {
                        args: Prisma.DefaultObjectiveInformationUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>
                    }
                    deleteMany: {
                        args: Prisma.DefaultObjectiveInformationDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.DefaultObjectiveInformationUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.DefaultObjectiveInformationUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>[]
                    }
                    upsert: {
                        args: Prisma.DefaultObjectiveInformationUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$DefaultObjectiveInformationPayload>
                    }
                    aggregate: {
                        args: Prisma.DefaultObjectiveInformationAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateDefaultObjectiveInformation>
                    }
                    groupBy: {
                        args: Prisma.DefaultObjectiveInformationGroupByArgs<ExtArgs>
                        result: $Utils.Optional<DefaultObjectiveInformationGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.DefaultObjectiveInformationCountArgs<ExtArgs>
                        result: $Utils.Optional<DefaultObjectiveInformationCountAggregateOutputType> | number
                    }
                }
            }
            EventCalendar: {
                payload: Prisma.$EventCalendarPayload<ExtArgs>
                fields: Prisma.EventCalendarFieldRefs
                operations: {
                    findUnique: {
                        args: Prisma.EventCalendarFindUniqueArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload> | null
                    }
                    findUniqueOrThrow: {
                        args: Prisma.EventCalendarFindUniqueOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>
                    }
                    findFirst: {
                        args: Prisma.EventCalendarFindFirstArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload> | null
                    }
                    findFirstOrThrow: {
                        args: Prisma.EventCalendarFindFirstOrThrowArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>
                    }
                    findMany: {
                        args: Prisma.EventCalendarFindManyArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>[]
                    }
                    create: {
                        args: Prisma.EventCalendarCreateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>
                    }
                    createMany: {
                        args: Prisma.EventCalendarCreateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    createManyAndReturn: {
                        args: Prisma.EventCalendarCreateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>[]
                    }
                    delete: {
                        args: Prisma.EventCalendarDeleteArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>
                    }
                    update: {
                        args: Prisma.EventCalendarUpdateArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>
                    }
                    deleteMany: {
                        args: Prisma.EventCalendarDeleteManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateMany: {
                        args: Prisma.EventCalendarUpdateManyArgs<ExtArgs>
                        result: BatchPayload
                    }
                    updateManyAndReturn: {
                        args: Prisma.EventCalendarUpdateManyAndReturnArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>[]
                    }
                    upsert: {
                        args: Prisma.EventCalendarUpsertArgs<ExtArgs>
                        result: $Utils.PayloadToResult<Prisma.$EventCalendarPayload>
                    }
                    aggregate: {
                        args: Prisma.EventCalendarAggregateArgs<ExtArgs>
                        result: $Utils.Optional<AggregateEventCalendar>
                    }
                    groupBy: {
                        args: Prisma.EventCalendarGroupByArgs<ExtArgs>
                        result: $Utils.Optional<EventCalendarGroupByOutputType>[]
                    }
                    count: {
                        args: Prisma.EventCalendarCountArgs<ExtArgs>
                        result: $Utils.Optional<EventCalendarCountAggregateOutputType> | number
                    }
                }
            }
        }
    } & {
        other: {
            payload: any
            operations: {
                $executeRaw: {
                    args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
                    result: any
                }
                $executeRawUnsafe: {
                    args: [query: string, ...values: any[]],
                    result: any
                }
                $queryRaw: {
                    args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
                    result: any
                }
                $queryRawUnsafe: {
                    args: [query: string, ...values: any[]],
                    result: any
                }
            }
        }
    };
    export type DefaultPrismaClient = PrismaClient;
    export type ErrorFormat = 'pretty' | 'colorless' | 'minimal';
    export type GlobalOmitConfig = {
        user?: UserOmit
        asset?: AssetOmit
        session?: SessionOmit
        account?: AccountOmit
        verification?: VerificationOmit
        organization?: OrganizationOmit
        member?: MemberOmit
        invitation?: InvitationOmit
        cid?: CidOmit
        appointmentCid?: AppointmentCidOmit
        appointment?: AppointmentOmit
        patient?: PatientOmit
        vaccinations?: VaccinationsOmit
        vaccinationsValues?: VaccinationsValuesOmit
        allergies?: AllergiesOmit
        allergiesValues?: AllergiesValuesOmit
        medications?: MedicationsOmit
        medicationsValues?: MedicationsValuesOmit
        examResults?: ExamResultsOmit
        examResultsValues?: ExamResultsValuesOmit
        comorbidities?: ComorbiditiesOmit
        comorbiditiesValues?: ComorbiditiesValuesOmit
        surgeries?: SurgeriesOmit
        surgeriesValues?: SurgeriesValuesOmit
        healthPlans?: HealthPlansOmit
        healthPlansValues?: HealthPlansValuesOmit
        defaultObjectiveInformation?: DefaultObjectiveInformationOmit
        eventCalendar?: EventCalendarOmit
    };
    export type LogLevel = 'info' | 'query' | 'warn' | 'error';
    export type LogDefinition = {
        level: LogLevel
        emit: 'stdout' | 'event'
    };
    export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never;
    export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
        GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
        : never;
    export type QueryEvent = {
        timestamp: Date
        query: string
        params: string
        duration: number
        target: string
    };
    export type LogEvent = {
        timestamp: Date
        message: string
        target: string
    };
    export type PrismaAction = | 'findUnique'
        | 'findUniqueOrThrow'
        | 'findMany'
        | 'findFirst'
        | 'findFirstOrThrow'
        | 'create'
        | 'createMany'
        | 'createManyAndReturn'
        | 'update'
        | 'updateMany'
        | 'updateManyAndReturn'
        | 'upsert'
        | 'delete'
        | 'deleteMany'
        | 'executeRaw'
        | 'queryRaw'
        | 'aggregate'
        | 'count'
        | 'runCommandRaw'
        | 'findRaw'
        | 'groupBy';
    /**
     * These options are being passed into the middleware as "params"
     */
    export type MiddlewareParams = {
        model?: ModelName
        action: PrismaAction
        args: any
        dataPath: string[]
        runInTransaction: boolean
    };
    /**
     * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
     */
    export type Middleware<T = any> = (
        params: MiddlewareParams,
        next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
    ) => $Utils.JsPromise<T>;
    /**
     * `PrismaClient` proxy available in interactive transactions.
     */
    export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>;
    export type Datasource = {
        url?: string
    };
    /**
     * Count Types
     */
    /**
     * Count Type UserCountOutputType
     */
    export type UserCountOutputType = {
        sessions: number
        accounts: number
        members: number
        invitations: number
        patientUser: number
        createdAssets: number
        updatedAssets: number
        deletedAssets: number
    };
    export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        sessions?: boolean | UserCountOutputTypeCountSessionsArgs
        accounts?: boolean | UserCountOutputTypeCountAccountsArgs
        members?: boolean | UserCountOutputTypeCountMembersArgs
        invitations?: boolean | UserCountOutputTypeCountInvitationsArgs
        patientUser?: boolean | UserCountOutputTypeCountPatientUserArgs
        createdAssets?: boolean | UserCountOutputTypeCountCreatedAssetsArgs
        updatedAssets?: boolean | UserCountOutputTypeCountUpdatedAssetsArgs
        deletedAssets?: boolean | UserCountOutputTypeCountDeletedAssetsArgs
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the UserCountOutputType
         */
        select?: UserCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SessionWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AccountWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MemberWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: InvitationWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountPatientUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: PatientWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountCreatedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AssetWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountUpdatedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AssetWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDeletedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AssetWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Appoin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Appoin_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Patien_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: PatientWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Vaccin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Allerg_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Medica_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_ExamRe_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Comorb_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Surger_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Health_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_Defaul_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: DefaultObjectiveInformationWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_createdAssets_EventC_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: EventCalendarWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Appoin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Appoin_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Patien_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: PatientWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Vaccin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Allerg_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Medica_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_ExamRe_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Comorb_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Surger_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Health_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_Defaul_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: DefaultObjectiveInformationWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_updatedAssets_EventC_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: EventCalendarWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Appoin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Appoin_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Patien_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: PatientWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Vaccin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Allerg_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Medica_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_ExamRe_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Comorb_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Surger_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Health_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_Defaul_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: DefaultObjectiveInformationWhereInput
    };
    /**
     * UserCountOutputType without action
     */
    export type UserCountOutputTypeCountDelegate_aux_User_deletedAssets_EventC_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: EventCalendarWhereInput
    };
    /**
     * Count Type OrganizationCountOutputType
     */
    export type OrganizationCountOutputType = {
        members: number
        invitations: number
        assets: number
    };
    export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        members?: boolean | OrganizationCountOutputTypeCountMembersArgs
        invitations?: boolean | OrganizationCountOutputTypeCountInvitationsArgs
        assets?: boolean | OrganizationCountOutputTypeCountAssetsArgs
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the OrganizationCountOutputType
         */
        select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MemberWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: InvitationWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AssetWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Appoi_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Appoi_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Patie_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: PatientWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Vacci_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Aller_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Medic_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_ExamR_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Comor_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Surge_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Healt_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Defau_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: DefaultObjectiveInformationWhereInput
    };
    /**
     * OrganizationCountOutputType without action
     */
    export type OrganizationCountOutputTypeCountDelegate_aux_Organization_assets_Event_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: EventCalendarWhereInput
    };
    /**
     * Count Type CidCountOutputType
     */
    export type CidCountOutputType = {
        appointmentCid: number
    };
    export type CidCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        appointmentCid?: boolean | CidCountOutputTypeCountAppointmentCidArgs
    };
    /**
     * CidCountOutputType without action
     */
    export type CidCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the CidCountOutputType
         */
        select?: CidCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * CidCountOutputType without action
     */
    export type CidCountOutputTypeCountAppointmentCidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
    };
    /**
     * Count Type AppointmentCountOutputType
     */
    export type AppointmentCountOutputType = {
        cids: number
        allergies: number
        medications: number
        comorbidities: number
    };
    export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        cids?: boolean | AppointmentCountOutputTypeCountCidsArgs
        allergies?: boolean | AppointmentCountOutputTypeCountAllergiesArgs
        medications?: boolean | AppointmentCountOutputTypeCountMedicationsArgs
        comorbidities?: boolean | AppointmentCountOutputTypeCountComorbiditiesArgs
    };
    /**
     * AppointmentCountOutputType without action
     */
    export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCountOutputType
         */
        select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * AppointmentCountOutputType without action
     */
    export type AppointmentCountOutputTypeCountCidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
    };
    /**
     * AppointmentCountOutputType without action
     */
    export type AppointmentCountOutputTypeCountAllergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * AppointmentCountOutputType without action
     */
    export type AppointmentCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * AppointmentCountOutputType without action
     */
    export type AppointmentCountOutputTypeCountComorbiditiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * Count Type PatientCountOutputType
     */
    export type PatientCountOutputType = {
        appointments: number
        vaccinations: number
        allergies: number
        medications: number
        examResults: number
        comorbidities: number
        surgeries: number
        healthPlans: number
    };
    export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        appointments?: boolean | PatientCountOutputTypeCountAppointmentsArgs
        vaccinations?: boolean | PatientCountOutputTypeCountVaccinationsArgs
        allergies?: boolean | PatientCountOutputTypeCountAllergiesArgs
        medications?: boolean | PatientCountOutputTypeCountMedicationsArgs
        examResults?: boolean | PatientCountOutputTypeCountExamResultsArgs
        comorbidities?: boolean | PatientCountOutputTypeCountComorbiditiesArgs
        surgeries?: boolean | PatientCountOutputTypeCountSurgeriesArgs
        healthPlans?: boolean | PatientCountOutputTypeCountHealthPlansArgs
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the PatientCountOutputType
         */
        select?: PatientCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountVaccinationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountAllergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountExamResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountComorbiditiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountSurgeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
    };
    /**
     * PatientCountOutputType without action
     */
    export type PatientCountOutputTypeCountHealthPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
    };
    /**
     * Count Type VaccinationsValuesCountOutputType
     */
    export type VaccinationsValuesCountOutputType = {
        vaccinations: number
    };
    export type VaccinationsValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        vaccinations?: boolean | VaccinationsValuesCountOutputTypeCountVaccinationsArgs
    };
    /**
     * VaccinationsValuesCountOutputType without action
     */
    export type VaccinationsValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValuesCountOutputType
         */
        select?: VaccinationsValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * VaccinationsValuesCountOutputType without action
     */
    export type VaccinationsValuesCountOutputTypeCountVaccinationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
    };
    /**
     * Count Type AllergiesValuesCountOutputType
     */
    export type AllergiesValuesCountOutputType = {
        allergies: number
    };
    export type AllergiesValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        allergies?: boolean | AllergiesValuesCountOutputTypeCountAllergiesArgs
    };
    /**
     * AllergiesValuesCountOutputType without action
     */
    export type AllergiesValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValuesCountOutputType
         */
        select?: AllergiesValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * AllergiesValuesCountOutputType without action
     */
    export type AllergiesValuesCountOutputTypeCountAllergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
    };
    /**
     * Count Type MedicationsValuesCountOutputType
     */
    export type MedicationsValuesCountOutputType = {
        medications: number
    };
    export type MedicationsValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        medications?: boolean | MedicationsValuesCountOutputTypeCountMedicationsArgs
    };
    /**
     * MedicationsValuesCountOutputType without action
     */
    export type MedicationsValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValuesCountOutputType
         */
        select?: MedicationsValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * MedicationsValuesCountOutputType without action
     */
    export type MedicationsValuesCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
    };
    /**
     * Count Type ExamResultsValuesCountOutputType
     */
    export type ExamResultsValuesCountOutputType = {
        examResults: number
    };
    export type ExamResultsValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        examResults?: boolean | ExamResultsValuesCountOutputTypeCountExamResultsArgs
    };
    /**
     * ExamResultsValuesCountOutputType without action
     */
    export type ExamResultsValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValuesCountOutputType
         */
        select?: ExamResultsValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * ExamResultsValuesCountOutputType without action
     */
    export type ExamResultsValuesCountOutputTypeCountExamResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
    };
    /**
     * Count Type ComorbiditiesValuesCountOutputType
     */
    export type ComorbiditiesValuesCountOutputType = {
        comorbidities: number
    };
    export type ComorbiditiesValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        comorbidities?: boolean | ComorbiditiesValuesCountOutputTypeCountComorbiditiesArgs
    };
    /**
     * ComorbiditiesValuesCountOutputType without action
     */
    export type ComorbiditiesValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValuesCountOutputType
         */
        select?: ComorbiditiesValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * ComorbiditiesValuesCountOutputType without action
     */
    export type ComorbiditiesValuesCountOutputTypeCountComorbiditiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
    };
    /**
     * Count Type SurgeriesValuesCountOutputType
     */
    export type SurgeriesValuesCountOutputType = {
        surgeries: number
    };
    export type SurgeriesValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        surgeries?: boolean | SurgeriesValuesCountOutputTypeCountSurgeriesArgs
    };
    /**
     * SurgeriesValuesCountOutputType without action
     */
    export type SurgeriesValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValuesCountOutputType
         */
        select?: SurgeriesValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * SurgeriesValuesCountOutputType without action
     */
    export type SurgeriesValuesCountOutputTypeCountSurgeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
    };
    /**
     * Count Type HealthPlansValuesCountOutputType
     */
    export type HealthPlansValuesCountOutputType = {
        healthPlans: number
    };
    export type HealthPlansValuesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        healthPlans?: boolean | HealthPlansValuesCountOutputTypeCountHealthPlansArgs
    };
    /**
     * HealthPlansValuesCountOutputType without action
     */
    export type HealthPlansValuesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValuesCountOutputType
         */
        select?: HealthPlansValuesCountOutputTypeSelect<ExtArgs> | null
    };
    /**
     * HealthPlansValuesCountOutputType without action
     */
    export type HealthPlansValuesCountOutputTypeCountHealthPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
    };
    /**
     * Models
     */
    /**
     * Model User
     */
    export type AggregateUser = {
        _count: UserCountAggregateOutputType | null
        _min: UserMinAggregateOutputType | null
        _max: UserMaxAggregateOutputType | null
    };
    export type UserMinAggregateOutputType = {
        id: string | null
        name: string | null
        email: string | null
        emailVerified: boolean | null
        image: string | null
        createdAt: Date | null
        updatedAt: Date | null
        username: string | null
        displayUsername: string | null
        role: $Enums.UserRole | null
        banned: boolean | null
        banReason: string | null
        banExpires: Date | null
        changePassword: boolean | null
    };
    export type UserMaxAggregateOutputType = {
        id: string | null
        name: string | null
        email: string | null
        emailVerified: boolean | null
        image: string | null
        createdAt: Date | null
        updatedAt: Date | null
        username: string | null
        displayUsername: string | null
        role: $Enums.UserRole | null
        banned: boolean | null
        banReason: string | null
        banExpires: Date | null
        changePassword: boolean | null
    };
    export type UserCountAggregateOutputType = {
        id: number
        name: number
        email: number
        emailVerified: number
        image: number
        createdAt: number
        updatedAt: number
        username: number
        displayUsername: number
        role: number
        banned: number
        banReason: number
        banExpires: number
        changePassword: number
        _all: number
    };
    export type UserMinAggregateInputType = {
        id?: true
        name?: true
        email?: true
        emailVerified?: true
        image?: true
        createdAt?: true
        updatedAt?: true
        username?: true
        displayUsername?: true
        role?: true
        banned?: true
        banReason?: true
        banExpires?: true
        changePassword?: true
    };
    export type UserMaxAggregateInputType = {
        id?: true
        name?: true
        email?: true
        emailVerified?: true
        image?: true
        createdAt?: true
        updatedAt?: true
        username?: true
        displayUsername?: true
        role?: true
        banned?: true
        banReason?: true
        banExpires?: true
        changePassword?: true
    };
    export type UserCountAggregateInputType = {
        id?: true
        name?: true
        email?: true
        emailVerified?: true
        image?: true
        createdAt?: true
        updatedAt?: true
        username?: true
        displayUsername?: true
        role?: true
        banned?: true
        banReason?: true
        banExpires?: true
        changePassword?: true
        _all?: true
    };
    export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which User to aggregate.
         */
        where?: UserWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Users to fetch.
         */
        orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: UserWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Users from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Users.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Users
        **/
        _count?: true | UserCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: UserMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: UserMaxAggregateInputType
    };
    export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
        : GetScalarType<T[P], AggregateUser[P]>
    };
    export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: UserWhereInput
        orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
        by: UserScalarFieldEnum[] | UserScalarFieldEnum
        having?: UserScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: UserCountAggregateInputType | true
        _min?: UserMinAggregateInputType
        _max?: UserMaxAggregateInputType
    };
    export type UserGroupByOutputType = {
        id: string
        name: string
        email: string
        emailVerified: boolean
        image: string | null
        createdAt: Date
        updatedAt: Date
        username: string | null
        displayUsername: string | null
        role: $Enums.UserRole | null
        banned: boolean | null
        banReason: string | null
        banExpires: Date | null
        changePassword: boolean | null
        _count: UserCountAggregateOutputType | null
        _min: UserMinAggregateOutputType | null
        _max: UserMaxAggregateOutputType | null
    };
    type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<UserGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], UserGroupByOutputType[P]>
                : GetScalarType<T[P], UserGroupByOutputType[P]>
            }
        >
    >;
    export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        name?: boolean
        email?: boolean
        emailVerified?: boolean
        image?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        username?: boolean
        displayUsername?: boolean
        role?: boolean
        banned?: boolean
        banReason?: boolean
        banExpires?: boolean
        changePassword?: boolean
        sessions?: boolean | User$sessionsArgs<ExtArgs>
        accounts?: boolean | User$accountsArgs<ExtArgs>
        members?: boolean | User$membersArgs<ExtArgs>
        invitations?: boolean | User$invitationsArgs<ExtArgs>
        patientUser?: boolean | User$patientUserArgs<ExtArgs>
        createdAssets?: boolean | User$createdAssetsArgs<ExtArgs>
        updatedAssets?: boolean | User$updatedAssetsArgs<ExtArgs>
        deletedAssets?: boolean | User$deletedAssetsArgs<ExtArgs>
        _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["user"]>;
    export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        name?: boolean
        email?: boolean
        emailVerified?: boolean
        image?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        username?: boolean
        displayUsername?: boolean
        role?: boolean
        banned?: boolean
        banReason?: boolean
        banExpires?: boolean
        changePassword?: boolean
    }, ExtArgs["result"]["user"]>;
    export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        name?: boolean
        email?: boolean
        emailVerified?: boolean
        image?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        username?: boolean
        displayUsername?: boolean
        role?: boolean
        banned?: boolean
        banReason?: boolean
        banExpires?: boolean
        changePassword?: boolean
    }, ExtArgs["result"]["user"]>;
    export type UserSelectScalar = {
        id?: boolean
        name?: boolean
        email?: boolean
        emailVerified?: boolean
        image?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        username?: boolean
        displayUsername?: boolean
        role?: boolean
        banned?: boolean
        banReason?: boolean
        banExpires?: boolean
        changePassword?: boolean
    };
    export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "username" | "displayUsername" | "role" | "banned" | "banReason" | "banExpires" | "changePassword", ExtArgs["result"]["user"]>;
    export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        sessions?: boolean | User$sessionsArgs<ExtArgs>
        accounts?: boolean | User$accountsArgs<ExtArgs>
        members?: boolean | User$membersArgs<ExtArgs>
        invitations?: boolean | User$invitationsArgs<ExtArgs>
        patientUser?: boolean | User$patientUserArgs<ExtArgs>
        createdAssets?: boolean | User$createdAssetsArgs<ExtArgs>
        updatedAssets?: boolean | User$updatedAssetsArgs<ExtArgs>
        deletedAssets?: boolean | User$deletedAssetsArgs<ExtArgs>
        _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "User"
        objects: {
            sessions: Prisma.$SessionPayload<ExtArgs>[]
            accounts: Prisma.$AccountPayload<ExtArgs>[]
            members: Prisma.$MemberPayload<ExtArgs>[]
            invitations: Prisma.$InvitationPayload<ExtArgs>[]
            patientUser: Prisma.$PatientPayload<ExtArgs>[]
            createdAssets: Prisma.$AssetPayload<ExtArgs>[]
            updatedAssets: Prisma.$AssetPayload<ExtArgs>[]
            deletedAssets: Prisma.$AssetPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            name: string
            email: string
            emailVerified: boolean
            image: string | null
            createdAt: Date
            updatedAt: Date
            username: string | null
            displayUsername: string | null
            role: $Enums.UserRole | null
            banned: boolean | null
            banReason: string | null
            banExpires: Date | null
            changePassword: boolean | null
        }, ExtArgs["result"]["user"]>
        composites: {}
    };
    type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>;
    type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: UserCountAggregateInputType | true
    };
    /**
     * User findUnique
     */
    export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * Filter, which User to fetch.
         */
        where: UserWhereUniqueInput
    };
    /**
     * User findUniqueOrThrow
     */
    export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * Filter, which User to fetch.
         */
        where: UserWhereUniqueInput
    };
    /**
     * User findFirst
     */
    export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * Filter, which User to fetch.
         */
        where?: UserWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Users to fetch.
         */
        orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Users.
         */
        cursor?: UserWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Users from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Users.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Users.
         */
        distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    };
    /**
     * User findFirstOrThrow
     */
    export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * Filter, which User to fetch.
         */
        where?: UserWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Users to fetch.
         */
        orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Users.
         */
        cursor?: UserWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Users from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Users.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Users.
         */
        distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    };
    /**
     * User findMany
     */
    export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * Filter, which Users to fetch.
         */
        where?: UserWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Users to fetch.
         */
        orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Users.
         */
        cursor?: UserWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Users from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Users.
         */
        skip?: number
        distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    };
    /**
     * User create
     */
    export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * The data needed to create a User.
         */
        data: XOR<UserCreateInput, UserUncheckedCreateInput>
    };
    /**
     * User createMany
     */
    export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Users.
         */
        data: UserCreateManyInput | UserCreateManyInput[]
    };
    /**
     * User createManyAndReturn
     */
    export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * The data used to create many Users.
         */
        data: UserCreateManyInput | UserCreateManyInput[]
    };
    /**
     * User update
     */
    export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * The data needed to update a User.
         */
        data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
        /**
         * Choose, which User to update.
         */
        where: UserWhereUniqueInput
    };
    /**
     * User updateMany
     */
    export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Users.
         */
        data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
        /**
         * Filter which Users to update
         */
        where?: UserWhereInput
        /**
         * Limit how many Users to update.
         */
        limit?: number
    };
    /**
     * User updateManyAndReturn
     */
    export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * The data used to update Users.
         */
        data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
        /**
         * Filter which Users to update
         */
        where?: UserWhereInput
        /**
         * Limit how many Users to update.
         */
        limit?: number
    };
    /**
     * User upsert
     */
    export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * The filter to search for the User to update in case it exists.
         */
        where: UserWhereUniqueInput
        /**
         * In case the User found by the `where` argument doesn't exist, create a new User with this data.
         */
        create: XOR<UserCreateInput, UserUncheckedCreateInput>
        /**
         * In case the User was found with the provided `where` argument, update it with this data.
         */
        update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    };
    /**
     * User delete
     */
    export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        /**
         * Filter which User to delete.
         */
        where: UserWhereUniqueInput
    };
    /**
     * User deleteMany
     */
    export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Users to delete
         */
        where?: UserWhereInput
        /**
         * Limit how many Users to delete.
         */
        limit?: number
    };
    /**
     * User.sessions
     */
    export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        where?: SessionWhereInput
        orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
        cursor?: SessionWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
    };
    /**
     * User.accounts
     */
    export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        where?: AccountWhereInput
        orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
        cursor?: AccountWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
    };
    /**
     * User.members
     */
    export type User$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        where?: MemberWhereInput
        orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
        cursor?: MemberWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
    };
    /**
     * User.invitations
     */
    export type User$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        where?: InvitationWhereInput
        orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
        cursor?: InvitationWhereUniqueInput
        take?: number
        skip?: number
        distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
    };
    /**
     * User.patientUser
     */
    export type User$patientUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        cursor?: PatientWhereUniqueInput
        take?: number
        skip?: number
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * User.createdAssets
     */
    export type User$createdAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        where?: AssetWhereInput
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        cursor?: AssetWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * User.updatedAssets
     */
    export type User$updatedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        where?: AssetWhereInput
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        cursor?: AssetWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * User.deletedAssets
     */
    export type User$deletedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        where?: AssetWhereInput
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        cursor?: AssetWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Appoin_0
     */
    export type User$delegate_aux_User_createdAssets_Appoin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        cursor?: AppointmentCidWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Appoin_1
     */
    export type User$delegate_aux_User_createdAssets_Appoin_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        cursor?: AppointmentWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Patien_0
     */
    export type User$delegate_aux_User_createdAssets_Patien_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        cursor?: PatientWhereUniqueInput
        take?: number
        skip?: number
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Vaccin_0
     */
    export type User$delegate_aux_User_createdAssets_Vaccin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        cursor?: VaccinationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Allerg_0
     */
    export type User$delegate_aux_User_createdAssets_Allerg_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Medica_0
     */
    export type User$delegate_aux_User_createdAssets_Medica_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_ExamRe_0
     */
    export type User$delegate_aux_User_createdAssets_ExamRe_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        cursor?: ExamResultsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Comorb_0
     */
    export type User$delegate_aux_User_createdAssets_Comorb_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Surger_0
     */
    export type User$delegate_aux_User_createdAssets_Surger_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        cursor?: SurgeriesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Health_0
     */
    export type User$delegate_aux_User_createdAssets_Health_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        cursor?: HealthPlansWhereUniqueInput
        take?: number
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_Defaul_0
     */
    export type User$delegate_aux_User_createdAssets_Defaul_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        where?: DefaultObjectiveInformationWhereInput
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        take?: number
        skip?: number
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_createdAssets_EventC_0
     */
    export type User$delegate_aux_User_createdAssets_EventC_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        where?: EventCalendarWhereInput
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        cursor?: EventCalendarWhereUniqueInput
        take?: number
        skip?: number
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Appoin_0
     */
    export type User$delegate_aux_User_updatedAssets_Appoin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        cursor?: AppointmentCidWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Appoin_1
     */
    export type User$delegate_aux_User_updatedAssets_Appoin_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        cursor?: AppointmentWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Patien_0
     */
    export type User$delegate_aux_User_updatedAssets_Patien_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        cursor?: PatientWhereUniqueInput
        take?: number
        skip?: number
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Vaccin_0
     */
    export type User$delegate_aux_User_updatedAssets_Vaccin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        cursor?: VaccinationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Allerg_0
     */
    export type User$delegate_aux_User_updatedAssets_Allerg_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Medica_0
     */
    export type User$delegate_aux_User_updatedAssets_Medica_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_ExamRe_0
     */
    export type User$delegate_aux_User_updatedAssets_ExamRe_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        cursor?: ExamResultsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Comorb_0
     */
    export type User$delegate_aux_User_updatedAssets_Comorb_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Surger_0
     */
    export type User$delegate_aux_User_updatedAssets_Surger_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        cursor?: SurgeriesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Health_0
     */
    export type User$delegate_aux_User_updatedAssets_Health_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        cursor?: HealthPlansWhereUniqueInput
        take?: number
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_Defaul_0
     */
    export type User$delegate_aux_User_updatedAssets_Defaul_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        where?: DefaultObjectiveInformationWhereInput
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        take?: number
        skip?: number
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_updatedAssets_EventC_0
     */
    export type User$delegate_aux_User_updatedAssets_EventC_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        where?: EventCalendarWhereInput
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        cursor?: EventCalendarWhereUniqueInput
        take?: number
        skip?: number
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Appoin_0
     */
    export type User$delegate_aux_User_deletedAssets_Appoin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        cursor?: AppointmentCidWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Appoin_1
     */
    export type User$delegate_aux_User_deletedAssets_Appoin_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        cursor?: AppointmentWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Patien_0
     */
    export type User$delegate_aux_User_deletedAssets_Patien_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        cursor?: PatientWhereUniqueInput
        take?: number
        skip?: number
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Vaccin_0
     */
    export type User$delegate_aux_User_deletedAssets_Vaccin_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        cursor?: VaccinationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Allerg_0
     */
    export type User$delegate_aux_User_deletedAssets_Allerg_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Medica_0
     */
    export type User$delegate_aux_User_deletedAssets_Medica_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_ExamRe_0
     */
    export type User$delegate_aux_User_deletedAssets_ExamRe_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        cursor?: ExamResultsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Comorb_0
     */
    export type User$delegate_aux_User_deletedAssets_Comorb_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Surger_0
     */
    export type User$delegate_aux_User_deletedAssets_Surger_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        cursor?: SurgeriesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Health_0
     */
    export type User$delegate_aux_User_deletedAssets_Health_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        cursor?: HealthPlansWhereUniqueInput
        take?: number
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_Defaul_0
     */
    export type User$delegate_aux_User_deletedAssets_Defaul_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        where?: DefaultObjectiveInformationWhereInput
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        take?: number
        skip?: number
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * User.delegate_aux_User_deletedAssets_EventC_0
     */
    export type User$delegate_aux_User_deletedAssets_EventC_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        where?: EventCalendarWhereInput
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        cursor?: EventCalendarWhereUniqueInput
        take?: number
        skip?: number
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * User without action
     */
    export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
    };
    /**
     * Model Asset
     */
    export type AggregateAsset = {
        _count: AssetCountAggregateOutputType | null
        _min: AssetMinAggregateOutputType | null
        _max: AssetMaxAggregateOutputType | null
    };
    export type AssetMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
    };
    export type AssetMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
    };
    export type AssetCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        _all: number
    };
    export type AssetMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
    };
    export type AssetMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
    };
    export type AssetCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        _all?: true
    };
    export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Asset to aggregate.
         */
        where?: AssetWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Assets to fetch.
         */
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: AssetWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Assets from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Assets.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Assets
        **/
        _count?: true | AssetCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: AssetMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: AssetMaxAggregateInputType
    };
    export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
        : GetScalarType<T[P], AggregateAsset[P]>
    };
    export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AssetWhereInput
        orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
        by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
        having?: AssetScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: AssetCountAggregateInputType | true
        _min?: AssetMinAggregateInputType
        _max?: AssetMaxAggregateInputType
    };
    export type AssetGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        _count: AssetCountAggregateOutputType | null
        _min: AssetMinAggregateOutputType | null
        _max: AssetMaxAggregateOutputType | null
    };
    type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<AssetGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], AssetGroupByOutputType[P]>
                : GetScalarType<T[P], AssetGroupByOutputType[P]>
            }
        >
    >;
    export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        createdByUser?: boolean | Asset$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Asset$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Asset$deletedByUserArgs<ExtArgs>
        organization?: boolean | Asset$organizationArgs<ExtArgs>
    }, ExtArgs["result"]["asset"]>;
    export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        createdByUser?: boolean | Asset$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Asset$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Asset$deletedByUserArgs<ExtArgs>
        organization?: boolean | Asset$organizationArgs<ExtArgs>
    }, ExtArgs["result"]["asset"]>;
    export type AssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        createdByUser?: boolean | Asset$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Asset$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Asset$deletedByUserArgs<ExtArgs>
        organization?: boolean | Asset$organizationArgs<ExtArgs>
    }, ExtArgs["result"]["asset"]>;
    export type AssetSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
    };
    export type AssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId", ExtArgs["result"]["asset"]>;
    export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Asset$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Asset$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Asset$deletedByUserArgs<ExtArgs>
        organization?: boolean | Asset$organizationArgs<ExtArgs>
    };
    export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Asset$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Asset$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Asset$deletedByUserArgs<ExtArgs>
        organization?: boolean | Asset$organizationArgs<ExtArgs>
    };
    export type AssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Asset$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Asset$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Asset$deletedByUserArgs<ExtArgs>
        organization?: boolean | Asset$organizationArgs<ExtArgs>
    };
    export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = (Prisma.$AppointmentCidPayload<ExtArgs> & { scalars: { type: 'AppointmentCid' } }) | (Prisma.$AppointmentPayload<ExtArgs> & { scalars: { type: 'Appointment' } }) | (Prisma.$PatientPayload<ExtArgs> & { scalars: { type: 'Patient' } }) | (Prisma.$VaccinationsPayload<ExtArgs> & { scalars: { type: 'Vaccinations' } }) | (Prisma.$AllergiesPayload<ExtArgs> & { scalars: { type: 'Allergies' } }) | (Prisma.$MedicationsPayload<ExtArgs> & { scalars: { type: 'Medications' } }) | (Prisma.$ExamResultsPayload<ExtArgs> & { scalars: { type: 'ExamResults' } }) | (Prisma.$ComorbiditiesPayload<ExtArgs> & { scalars: { type: 'Comorbidities' } }) | (Prisma.$SurgeriesPayload<ExtArgs> & { scalars: { type: 'Surgeries' } }) | (Prisma.$HealthPlansPayload<ExtArgs> & { scalars: { type: 'HealthPlans' } }) | (Prisma.$DefaultObjectiveInformationPayload<ExtArgs> & { scalars: { type: 'DefaultObjectiveInformation' } }) | (Prisma.$EventCalendarPayload<ExtArgs> & { scalars: { type: 'EventCalendar' } });
    type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>;
    type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: AssetCountAggregateInputType | true
    };
    /**
     * Asset findUnique
     */
    export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * Filter, which Asset to fetch.
         */
        where: AssetWhereUniqueInput
    };
    /**
     * Asset findUniqueOrThrow
     */
    export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * Filter, which Asset to fetch.
         */
        where: AssetWhereUniqueInput
    };
    /**
     * Asset findFirst
     */
    export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * Filter, which Asset to fetch.
         */
        where?: AssetWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Assets to fetch.
         */
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Assets.
         */
        cursor?: AssetWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Assets from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Assets.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Assets.
         */
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * Asset findFirstOrThrow
     */
    export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * Filter, which Asset to fetch.
         */
        where?: AssetWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Assets to fetch.
         */
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Assets.
         */
        cursor?: AssetWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Assets from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Assets.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Assets.
         */
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * Asset findMany
     */
    export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * Filter, which Assets to fetch.
         */
        where?: AssetWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Assets to fetch.
         */
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Assets.
         */
        cursor?: AssetWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Assets from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Assets.
         */
        skip?: number
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * Asset create
     */
    export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * The data needed to create a Asset.
         */
        data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    };
    /**
     * Asset createMany
     */
    export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Assets.
         */
        data: AssetCreateManyInput | AssetCreateManyInput[]
    };
    /**
     * Asset createManyAndReturn
     */
    export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * The data used to create many Assets.
         */
        data: AssetCreateManyInput | AssetCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Asset update
     */
    export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * The data needed to update a Asset.
         */
        data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
        /**
         * Choose, which Asset to update.
         */
        where: AssetWhereUniqueInput
    };
    /**
     * Asset updateMany
     */
    export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Assets.
         */
        data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
        /**
         * Filter which Assets to update
         */
        where?: AssetWhereInput
        /**
         * Limit how many Assets to update.
         */
        limit?: number
    };
    /**
     * Asset updateManyAndReturn
     */
    export type AssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * The data used to update Assets.
         */
        data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
        /**
         * Filter which Assets to update
         */
        where?: AssetWhereInput
        /**
         * Limit how many Assets to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Asset upsert
     */
    export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * The filter to search for the Asset to update in case it exists.
         */
        where: AssetWhereUniqueInput
        /**
         * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
         */
        create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
        /**
         * In case the Asset was found with the provided `where` argument, update it with this data.
         */
        update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    };
    /**
     * Asset delete
     */
    export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        /**
         * Filter which Asset to delete.
         */
        where: AssetWhereUniqueInput
    };
    /**
     * Asset deleteMany
     */
    export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Assets to delete
         */
        where?: AssetWhereInput
        /**
         * Limit how many Assets to delete.
         */
        limit?: number
    };
    /**
     * Asset.createdByUser
     */
    export type Asset$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Asset.updatedByUser
     */
    export type Asset$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Asset.deletedByUser
     */
    export type Asset$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Asset.organization
     */
    export type Asset$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Asset without action
     */
    export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
    };
    /**
     * Model Session
     */
    export type AggregateSession = {
        _count: SessionCountAggregateOutputType | null
        _min: SessionMinAggregateOutputType | null
        _max: SessionMaxAggregateOutputType | null
    };
    export type SessionMinAggregateOutputType = {
        id: string | null
        expiresAt: Date | null
        token: string | null
        createdAt: Date | null
        updatedAt: Date | null
        ipAddress: string | null
        userAgent: string | null
        userId: string | null
        impersonatedBy: string | null
        activeOrganizationId: string | null
    };
    export type SessionMaxAggregateOutputType = {
        id: string | null
        expiresAt: Date | null
        token: string | null
        createdAt: Date | null
        updatedAt: Date | null
        ipAddress: string | null
        userAgent: string | null
        userId: string | null
        impersonatedBy: string | null
        activeOrganizationId: string | null
    };
    export type SessionCountAggregateOutputType = {
        id: number
        expiresAt: number
        token: number
        createdAt: number
        updatedAt: number
        ipAddress: number
        userAgent: number
        userId: number
        impersonatedBy: number
        activeOrganizationId: number
        _all: number
    };
    export type SessionMinAggregateInputType = {
        id?: true
        expiresAt?: true
        token?: true
        createdAt?: true
        updatedAt?: true
        ipAddress?: true
        userAgent?: true
        userId?: true
        impersonatedBy?: true
        activeOrganizationId?: true
    };
    export type SessionMaxAggregateInputType = {
        id?: true
        expiresAt?: true
        token?: true
        createdAt?: true
        updatedAt?: true
        ipAddress?: true
        userAgent?: true
        userId?: true
        impersonatedBy?: true
        activeOrganizationId?: true
    };
    export type SessionCountAggregateInputType = {
        id?: true
        expiresAt?: true
        token?: true
        createdAt?: true
        updatedAt?: true
        ipAddress?: true
        userAgent?: true
        userId?: true
        impersonatedBy?: true
        activeOrganizationId?: true
        _all?: true
    };
    export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Session to aggregate.
         */
        where?: SessionWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Sessions to fetch.
         */
        orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: SessionWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Sessions from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Sessions.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Sessions
        **/
        _count?: true | SessionCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: SessionMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: SessionMaxAggregateInputType
    };
    export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
        : GetScalarType<T[P], AggregateSession[P]>
    };
    export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SessionWhereInput
        orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
        by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
        having?: SessionScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: SessionCountAggregateInputType | true
        _min?: SessionMinAggregateInputType
        _max?: SessionMaxAggregateInputType
    };
    export type SessionGroupByOutputType = {
        id: string
        expiresAt: Date
        token: string
        createdAt: Date
        updatedAt: Date
        ipAddress: string | null
        userAgent: string | null
        userId: string
        impersonatedBy: string | null
        activeOrganizationId: string | null
        _count: SessionCountAggregateOutputType | null
        _min: SessionMinAggregateOutputType | null
        _max: SessionMaxAggregateOutputType | null
    };
    type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<SessionGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], SessionGroupByOutputType[P]>
                : GetScalarType<T[P], SessionGroupByOutputType[P]>
            }
        >
    >;
    export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        expiresAt?: boolean
        token?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        ipAddress?: boolean
        userAgent?: boolean
        userId?: boolean
        impersonatedBy?: boolean
        activeOrganizationId?: boolean
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["session"]>;
    export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        expiresAt?: boolean
        token?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        ipAddress?: boolean
        userAgent?: boolean
        userId?: boolean
        impersonatedBy?: boolean
        activeOrganizationId?: boolean
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["session"]>;
    export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        expiresAt?: boolean
        token?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        ipAddress?: boolean
        userAgent?: boolean
        userId?: boolean
        impersonatedBy?: boolean
        activeOrganizationId?: boolean
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["session"]>;
    export type SessionSelectScalar = {
        id?: boolean
        expiresAt?: boolean
        token?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        ipAddress?: boolean
        userAgent?: boolean
        userId?: boolean
        impersonatedBy?: boolean
        activeOrganizationId?: boolean
    };
    export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId" | "impersonatedBy" | "activeOrganizationId", ExtArgs["result"]["session"]>;
    export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Session"
        objects: {
            user: Prisma.$UserPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            expiresAt: Date
            token: string
            createdAt: Date
            updatedAt: Date
            ipAddress: string | null
            userAgent: string | null
            userId: string
            impersonatedBy: string | null
            activeOrganizationId: string | null
        }, ExtArgs["result"]["session"]>
        composites: {}
    };
    type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>;
    type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: SessionCountAggregateInputType | true
    };
    /**
     * Session findUnique
     */
    export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * Filter, which Session to fetch.
         */
        where: SessionWhereUniqueInput
    };
    /**
     * Session findUniqueOrThrow
     */
    export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * Filter, which Session to fetch.
         */
        where: SessionWhereUniqueInput
    };
    /**
     * Session findFirst
     */
    export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * Filter, which Session to fetch.
         */
        where?: SessionWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Sessions to fetch.
         */
        orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Sessions.
         */
        cursor?: SessionWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Sessions from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Sessions.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Sessions.
         */
        distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
    };
    /**
     * Session findFirstOrThrow
     */
    export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * Filter, which Session to fetch.
         */
        where?: SessionWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Sessions to fetch.
         */
        orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Sessions.
         */
        cursor?: SessionWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Sessions from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Sessions.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Sessions.
         */
        distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
    };
    /**
     * Session findMany
     */
    export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * Filter, which Sessions to fetch.
         */
        where?: SessionWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Sessions to fetch.
         */
        orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Sessions.
         */
        cursor?: SessionWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Sessions from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Sessions.
         */
        skip?: number
        distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
    };
    /**
     * Session create
     */
    export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * The data needed to create a Session.
         */
        data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    };
    /**
     * Session createMany
     */
    export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Sessions.
         */
        data: SessionCreateManyInput | SessionCreateManyInput[]
    };
    /**
     * Session createManyAndReturn
     */
    export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * The data used to create many Sessions.
         */
        data: SessionCreateManyInput | SessionCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Session update
     */
    export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * The data needed to update a Session.
         */
        data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
        /**
         * Choose, which Session to update.
         */
        where: SessionWhereUniqueInput
    };
    /**
     * Session updateMany
     */
    export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Sessions.
         */
        data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
        /**
         * Filter which Sessions to update
         */
        where?: SessionWhereInput
        /**
         * Limit how many Sessions to update.
         */
        limit?: number
    };
    /**
     * Session updateManyAndReturn
     */
    export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * The data used to update Sessions.
         */
        data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
        /**
         * Filter which Sessions to update
         */
        where?: SessionWhereInput
        /**
         * Limit how many Sessions to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Session upsert
     */
    export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * The filter to search for the Session to update in case it exists.
         */
        where: SessionWhereUniqueInput
        /**
         * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
         */
        create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
        /**
         * In case the Session was found with the provided `where` argument, update it with this data.
         */
        update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    };
    /**
     * Session delete
     */
    export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
        /**
         * Filter which Session to delete.
         */
        where: SessionWhereUniqueInput
    };
    /**
     * Session deleteMany
     */
    export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Sessions to delete
         */
        where?: SessionWhereInput
        /**
         * Limit how many Sessions to delete.
         */
        limit?: number
    };
    /**
     * Session without action
     */
    export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Session
         */
        select?: SessionSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Session
         */
        omit?: SessionOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SessionInclude<ExtArgs> | null
    };
    /**
     * Model Account
     */
    export type AggregateAccount = {
        _count: AccountCountAggregateOutputType | null
        _min: AccountMinAggregateOutputType | null
        _max: AccountMaxAggregateOutputType | null
    };
    export type AccountMinAggregateOutputType = {
        id: string | null
        accountId: string | null
        providerId: string | null
        userId: string | null
        accessToken: string | null
        refreshToken: string | null
        idToken: string | null
        accessTokenExpiresAt: Date | null
        refreshTokenExpiresAt: Date | null
        scope: string | null
        password: string | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type AccountMaxAggregateOutputType = {
        id: string | null
        accountId: string | null
        providerId: string | null
        userId: string | null
        accessToken: string | null
        refreshToken: string | null
        idToken: string | null
        accessTokenExpiresAt: Date | null
        refreshTokenExpiresAt: Date | null
        scope: string | null
        password: string | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type AccountCountAggregateOutputType = {
        id: number
        accountId: number
        providerId: number
        userId: number
        accessToken: number
        refreshToken: number
        idToken: number
        accessTokenExpiresAt: number
        refreshTokenExpiresAt: number
        scope: number
        password: number
        createdAt: number
        updatedAt: number
        _all: number
    };
    export type AccountMinAggregateInputType = {
        id?: true
        accountId?: true
        providerId?: true
        userId?: true
        accessToken?: true
        refreshToken?: true
        idToken?: true
        accessTokenExpiresAt?: true
        refreshTokenExpiresAt?: true
        scope?: true
        password?: true
        createdAt?: true
        updatedAt?: true
    };
    export type AccountMaxAggregateInputType = {
        id?: true
        accountId?: true
        providerId?: true
        userId?: true
        accessToken?: true
        refreshToken?: true
        idToken?: true
        accessTokenExpiresAt?: true
        refreshTokenExpiresAt?: true
        scope?: true
        password?: true
        createdAt?: true
        updatedAt?: true
    };
    export type AccountCountAggregateInputType = {
        id?: true
        accountId?: true
        providerId?: true
        userId?: true
        accessToken?: true
        refreshToken?: true
        idToken?: true
        accessTokenExpiresAt?: true
        refreshTokenExpiresAt?: true
        scope?: true
        password?: true
        createdAt?: true
        updatedAt?: true
        _all?: true
    };
    export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Account to aggregate.
         */
        where?: AccountWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Accounts to fetch.
         */
        orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: AccountWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Accounts from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Accounts.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Accounts
        **/
        _count?: true | AccountCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: AccountMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: AccountMaxAggregateInputType
    };
    export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
        : GetScalarType<T[P], AggregateAccount[P]>
    };
    export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AccountWhereInput
        orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
        by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
        having?: AccountScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: AccountCountAggregateInputType | true
        _min?: AccountMinAggregateInputType
        _max?: AccountMaxAggregateInputType
    };
    export type AccountGroupByOutputType = {
        id: string
        accountId: string
        providerId: string
        userId: string
        accessToken: string | null
        refreshToken: string | null
        idToken: string | null
        accessTokenExpiresAt: Date | null
        refreshTokenExpiresAt: Date | null
        scope: string | null
        password: string | null
        createdAt: Date
        updatedAt: Date
        _count: AccountCountAggregateOutputType | null
        _min: AccountMinAggregateOutputType | null
        _max: AccountMaxAggregateOutputType | null
    };
    type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<AccountGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], AccountGroupByOutputType[P]>
                : GetScalarType<T[P], AccountGroupByOutputType[P]>
            }
        >
    >;
    export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        accountId?: boolean
        providerId?: boolean
        userId?: boolean
        accessToken?: boolean
        refreshToken?: boolean
        idToken?: boolean
        accessTokenExpiresAt?: boolean
        refreshTokenExpiresAt?: boolean
        scope?: boolean
        password?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["account"]>;
    export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        accountId?: boolean
        providerId?: boolean
        userId?: boolean
        accessToken?: boolean
        refreshToken?: boolean
        idToken?: boolean
        accessTokenExpiresAt?: boolean
        refreshTokenExpiresAt?: boolean
        scope?: boolean
        password?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["account"]>;
    export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        accountId?: boolean
        providerId?: boolean
        userId?: boolean
        accessToken?: boolean
        refreshToken?: boolean
        idToken?: boolean
        accessTokenExpiresAt?: boolean
        refreshTokenExpiresAt?: boolean
        scope?: boolean
        password?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["account"]>;
    export type AccountSelectScalar = {
        id?: boolean
        accountId?: boolean
        providerId?: boolean
        userId?: boolean
        accessToken?: boolean
        refreshToken?: boolean
        idToken?: boolean
        accessTokenExpiresAt?: boolean
        refreshTokenExpiresAt?: boolean
        scope?: boolean
        password?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    };
    export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>;
    export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Account"
        objects: {
            user: Prisma.$UserPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            accountId: string
            providerId: string
            userId: string
            accessToken: string | null
            refreshToken: string | null
            idToken: string | null
            accessTokenExpiresAt: Date | null
            refreshTokenExpiresAt: Date | null
            scope: string | null
            /**
             * @omit
             */
            password: string | null
            createdAt: Date
            updatedAt: Date
        }, ExtArgs["result"]["account"]>
        composites: {}
    };
    type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>;
    type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: AccountCountAggregateInputType | true
    };
    /**
     * Account findUnique
     */
    export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * Filter, which Account to fetch.
         */
        where: AccountWhereUniqueInput
    };
    /**
     * Account findUniqueOrThrow
     */
    export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * Filter, which Account to fetch.
         */
        where: AccountWhereUniqueInput
    };
    /**
     * Account findFirst
     */
    export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * Filter, which Account to fetch.
         */
        where?: AccountWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Accounts to fetch.
         */
        orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Accounts.
         */
        cursor?: AccountWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Accounts from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Accounts.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Accounts.
         */
        distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
    };
    /**
     * Account findFirstOrThrow
     */
    export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * Filter, which Account to fetch.
         */
        where?: AccountWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Accounts to fetch.
         */
        orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Accounts.
         */
        cursor?: AccountWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Accounts from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Accounts.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Accounts.
         */
        distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
    };
    /**
     * Account findMany
     */
    export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * Filter, which Accounts to fetch.
         */
        where?: AccountWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Accounts to fetch.
         */
        orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Accounts.
         */
        cursor?: AccountWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Accounts from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Accounts.
         */
        skip?: number
        distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
    };
    /**
     * Account create
     */
    export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * The data needed to create a Account.
         */
        data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    };
    /**
     * Account createMany
     */
    export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Accounts.
         */
        data: AccountCreateManyInput | AccountCreateManyInput[]
    };
    /**
     * Account createManyAndReturn
     */
    export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * The data used to create many Accounts.
         */
        data: AccountCreateManyInput | AccountCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Account update
     */
    export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * The data needed to update a Account.
         */
        data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
        /**
         * Choose, which Account to update.
         */
        where: AccountWhereUniqueInput
    };
    /**
     * Account updateMany
     */
    export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Accounts.
         */
        data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
        /**
         * Filter which Accounts to update
         */
        where?: AccountWhereInput
        /**
         * Limit how many Accounts to update.
         */
        limit?: number
    };
    /**
     * Account updateManyAndReturn
     */
    export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * The data used to update Accounts.
         */
        data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
        /**
         * Filter which Accounts to update
         */
        where?: AccountWhereInput
        /**
         * Limit how many Accounts to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Account upsert
     */
    export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * The filter to search for the Account to update in case it exists.
         */
        where: AccountWhereUniqueInput
        /**
         * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
         */
        create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
        /**
         * In case the Account was found with the provided `where` argument, update it with this data.
         */
        update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    };
    /**
     * Account delete
     */
    export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
        /**
         * Filter which Account to delete.
         */
        where: AccountWhereUniqueInput
    };
    /**
     * Account deleteMany
     */
    export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Accounts to delete
         */
        where?: AccountWhereInput
        /**
         * Limit how many Accounts to delete.
         */
        limit?: number
    };
    /**
     * Account without action
     */
    export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Account
         */
        select?: AccountSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Account
         */
        omit?: AccountOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AccountInclude<ExtArgs> | null
    };
    /**
     * Model Verification
     */
    export type AggregateVerification = {
        _count: VerificationCountAggregateOutputType | null
        _min: VerificationMinAggregateOutputType | null
        _max: VerificationMaxAggregateOutputType | null
    };
    export type VerificationMinAggregateOutputType = {
        id: string | null
        identifier: string | null
        value: string | null
        expiresAt: Date | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type VerificationMaxAggregateOutputType = {
        id: string | null
        identifier: string | null
        value: string | null
        expiresAt: Date | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type VerificationCountAggregateOutputType = {
        id: number
        identifier: number
        value: number
        expiresAt: number
        createdAt: number
        updatedAt: number
        _all: number
    };
    export type VerificationMinAggregateInputType = {
        id?: true
        identifier?: true
        value?: true
        expiresAt?: true
        createdAt?: true
        updatedAt?: true
    };
    export type VerificationMaxAggregateInputType = {
        id?: true
        identifier?: true
        value?: true
        expiresAt?: true
        createdAt?: true
        updatedAt?: true
    };
    export type VerificationCountAggregateInputType = {
        id?: true
        identifier?: true
        value?: true
        expiresAt?: true
        createdAt?: true
        updatedAt?: true
        _all?: true
    };
    export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Verification to aggregate.
         */
        where?: VerificationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Verifications to fetch.
         */
        orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: VerificationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Verifications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Verifications.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Verifications
        **/
        _count?: true | VerificationCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: VerificationMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: VerificationMaxAggregateInputType
    };
    export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
        : GetScalarType<T[P], AggregateVerification[P]>
    };
    export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VerificationWhereInput
        orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
        by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
        having?: VerificationScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: VerificationCountAggregateInputType | true
        _min?: VerificationMinAggregateInputType
        _max?: VerificationMaxAggregateInputType
    };
    export type VerificationGroupByOutputType = {
        id: string
        identifier: string
        value: string
        expiresAt: Date
        createdAt: Date
        updatedAt: Date
        _count: VerificationCountAggregateOutputType | null
        _min: VerificationMinAggregateOutputType | null
        _max: VerificationMaxAggregateOutputType | null
    };
    type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<VerificationGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], VerificationGroupByOutputType[P]>
                : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            }
        >
    >;
    export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        identifier?: boolean
        value?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    }, ExtArgs["result"]["verification"]>;
    export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        identifier?: boolean
        value?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    }, ExtArgs["result"]["verification"]>;
    export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        identifier?: boolean
        value?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    }, ExtArgs["result"]["verification"]>;
    export type VerificationSelectScalar = {
        id?: boolean
        identifier?: boolean
        value?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    };
    export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>;
    export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Verification"
        objects: {}
        scalars: $Extensions.GetPayloadResult<{
            id: string
            identifier: string
            value: string
            expiresAt: Date
            createdAt: Date
            updatedAt: Date
        }, ExtArgs["result"]["verification"]>
        composites: {}
    };
    type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>;
    type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: VerificationCountAggregateInputType | true
    };
    /**
     * Verification findUnique
     */
    export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * Filter, which Verification to fetch.
         */
        where: VerificationWhereUniqueInput
    };
    /**
     * Verification findUniqueOrThrow
     */
    export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * Filter, which Verification to fetch.
         */
        where: VerificationWhereUniqueInput
    };
    /**
     * Verification findFirst
     */
    export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * Filter, which Verification to fetch.
         */
        where?: VerificationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Verifications to fetch.
         */
        orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Verifications.
         */
        cursor?: VerificationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Verifications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Verifications.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Verifications.
         */
        distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
    };
    /**
     * Verification findFirstOrThrow
     */
    export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * Filter, which Verification to fetch.
         */
        where?: VerificationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Verifications to fetch.
         */
        orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Verifications.
         */
        cursor?: VerificationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Verifications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Verifications.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Verifications.
         */
        distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
    };
    /**
     * Verification findMany
     */
    export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * Filter, which Verifications to fetch.
         */
        where?: VerificationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Verifications to fetch.
         */
        orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Verifications.
         */
        cursor?: VerificationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Verifications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Verifications.
         */
        skip?: number
        distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
    };
    /**
     * Verification create
     */
    export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * The data needed to create a Verification.
         */
        data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    };
    /**
     * Verification createMany
     */
    export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Verifications.
         */
        data: VerificationCreateManyInput | VerificationCreateManyInput[]
    };
    /**
     * Verification createManyAndReturn
     */
    export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * The data used to create many Verifications.
         */
        data: VerificationCreateManyInput | VerificationCreateManyInput[]
    };
    /**
     * Verification update
     */
    export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * The data needed to update a Verification.
         */
        data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
        /**
         * Choose, which Verification to update.
         */
        where: VerificationWhereUniqueInput
    };
    /**
     * Verification updateMany
     */
    export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Verifications.
         */
        data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
        /**
         * Filter which Verifications to update
         */
        where?: VerificationWhereInput
        /**
         * Limit how many Verifications to update.
         */
        limit?: number
    };
    /**
     * Verification updateManyAndReturn
     */
    export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * The data used to update Verifications.
         */
        data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
        /**
         * Filter which Verifications to update
         */
        where?: VerificationWhereInput
        /**
         * Limit how many Verifications to update.
         */
        limit?: number
    };
    /**
     * Verification upsert
     */
    export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * The filter to search for the Verification to update in case it exists.
         */
        where: VerificationWhereUniqueInput
        /**
         * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
         */
        create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
        /**
         * In case the Verification was found with the provided `where` argument, update it with this data.
         */
        update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    };
    /**
     * Verification delete
     */
    export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
        /**
         * Filter which Verification to delete.
         */
        where: VerificationWhereUniqueInput
    };
    /**
     * Verification deleteMany
     */
    export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Verifications to delete
         */
        where?: VerificationWhereInput
        /**
         * Limit how many Verifications to delete.
         */
        limit?: number
    };
    /**
     * Verification without action
     */
    export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Verification
         */
        select?: VerificationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Verification
         */
        omit?: VerificationOmit<ExtArgs> | null
    };
    /**
     * Model Organization
     */
    export type AggregateOrganization = {
        _count: OrganizationCountAggregateOutputType | null
        _min: OrganizationMinAggregateOutputType | null
        _max: OrganizationMaxAggregateOutputType | null
    };
    export type OrganizationMinAggregateOutputType = {
        id: string | null
        name: string | null
        slug: string | null
        logo: string | null
        createdAt: Date | null
        updatedAt: Date | null
        metadata: string | null
    };
    export type OrganizationMaxAggregateOutputType = {
        id: string | null
        name: string | null
        slug: string | null
        logo: string | null
        createdAt: Date | null
        updatedAt: Date | null
        metadata: string | null
    };
    export type OrganizationCountAggregateOutputType = {
        id: number
        name: number
        slug: number
        logo: number
        createdAt: number
        updatedAt: number
        metadata: number
        _all: number
    };
    export type OrganizationMinAggregateInputType = {
        id?: true
        name?: true
        slug?: true
        logo?: true
        createdAt?: true
        updatedAt?: true
        metadata?: true
    };
    export type OrganizationMaxAggregateInputType = {
        id?: true
        name?: true
        slug?: true
        logo?: true
        createdAt?: true
        updatedAt?: true
        metadata?: true
    };
    export type OrganizationCountAggregateInputType = {
        id?: true
        name?: true
        slug?: true
        logo?: true
        createdAt?: true
        updatedAt?: true
        metadata?: true
        _all?: true
    };
    export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Organization to aggregate.
         */
        where?: OrganizationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Organizations to fetch.
         */
        orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: OrganizationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Organizations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Organizations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Organizations
        **/
        _count?: true | OrganizationCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: OrganizationMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: OrganizationMaxAggregateInputType
    };
    export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
        : GetScalarType<T[P], AggregateOrganization[P]>
    };
    export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: OrganizationWhereInput
        orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
        by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
        having?: OrganizationScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: OrganizationCountAggregateInputType | true
        _min?: OrganizationMinAggregateInputType
        _max?: OrganizationMaxAggregateInputType
    };
    export type OrganizationGroupByOutputType = {
        id: string
        name: string
        slug: string | null
        logo: string | null
        createdAt: Date
        updatedAt: Date
        metadata: string | null
        _count: OrganizationCountAggregateOutputType | null
        _min: OrganizationMinAggregateOutputType | null
        _max: OrganizationMaxAggregateOutputType | null
    };
    type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<OrganizationGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
                : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            }
        >
    >;
    export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        name?: boolean
        slug?: boolean
        logo?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        metadata?: boolean
        members?: boolean | Organization$membersArgs<ExtArgs>
        invitations?: boolean | Organization$invitationsArgs<ExtArgs>
        assets?: boolean | Organization$assetsArgs<ExtArgs>
        _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["organization"]>;
    export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        name?: boolean
        slug?: boolean
        logo?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        metadata?: boolean
    }, ExtArgs["result"]["organization"]>;
    export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        name?: boolean
        slug?: boolean
        logo?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        metadata?: boolean
    }, ExtArgs["result"]["organization"]>;
    export type OrganizationSelectScalar = {
        id?: boolean
        name?: boolean
        slug?: boolean
        logo?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        metadata?: boolean
    };
    export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "logo" | "createdAt" | "updatedAt" | "metadata", ExtArgs["result"]["organization"]>;
    export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        members?: boolean | Organization$membersArgs<ExtArgs>
        invitations?: boolean | Organization$invitationsArgs<ExtArgs>
        assets?: boolean | Organization$assetsArgs<ExtArgs>
        _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Organization"
        objects: {
            members: Prisma.$MemberPayload<ExtArgs>[]
            invitations: Prisma.$InvitationPayload<ExtArgs>[]
            assets: Prisma.$AssetPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            name: string
            slug: string | null
            logo: string | null
            createdAt: Date
            updatedAt: Date
            metadata: string | null
        }, ExtArgs["result"]["organization"]>
        composites: {}
    };
    type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>;
    type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: OrganizationCountAggregateInputType | true
    };
    /**
     * Organization findUnique
     */
    export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * Filter, which Organization to fetch.
         */
        where: OrganizationWhereUniqueInput
    };
    /**
     * Organization findUniqueOrThrow
     */
    export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * Filter, which Organization to fetch.
         */
        where: OrganizationWhereUniqueInput
    };
    /**
     * Organization findFirst
     */
    export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * Filter, which Organization to fetch.
         */
        where?: OrganizationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Organizations to fetch.
         */
        orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Organizations.
         */
        cursor?: OrganizationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Organizations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Organizations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Organizations.
         */
        distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
    };
    /**
     * Organization findFirstOrThrow
     */
    export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * Filter, which Organization to fetch.
         */
        where?: OrganizationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Organizations to fetch.
         */
        orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Organizations.
         */
        cursor?: OrganizationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Organizations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Organizations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Organizations.
         */
        distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
    };
    /**
     * Organization findMany
     */
    export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * Filter, which Organizations to fetch.
         */
        where?: OrganizationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Organizations to fetch.
         */
        orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Organizations.
         */
        cursor?: OrganizationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Organizations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Organizations.
         */
        skip?: number
        distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
    };
    /**
     * Organization create
     */
    export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * The data needed to create a Organization.
         */
        data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    };
    /**
     * Organization createMany
     */
    export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Organizations.
         */
        data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    };
    /**
     * Organization createManyAndReturn
     */
    export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * The data used to create many Organizations.
         */
        data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    };
    /**
     * Organization update
     */
    export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * The data needed to update a Organization.
         */
        data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
        /**
         * Choose, which Organization to update.
         */
        where: OrganizationWhereUniqueInput
    };
    /**
     * Organization updateMany
     */
    export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Organizations.
         */
        data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
        /**
         * Filter which Organizations to update
         */
        where?: OrganizationWhereInput
        /**
         * Limit how many Organizations to update.
         */
        limit?: number
    };
    /**
     * Organization updateManyAndReturn
     */
    export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * The data used to update Organizations.
         */
        data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
        /**
         * Filter which Organizations to update
         */
        where?: OrganizationWhereInput
        /**
         * Limit how many Organizations to update.
         */
        limit?: number
    };
    /**
     * Organization upsert
     */
    export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * The filter to search for the Organization to update in case it exists.
         */
        where: OrganizationWhereUniqueInput
        /**
         * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
         */
        create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
        /**
         * In case the Organization was found with the provided `where` argument, update it with this data.
         */
        update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    };
    /**
     * Organization delete
     */
    export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        /**
         * Filter which Organization to delete.
         */
        where: OrganizationWhereUniqueInput
    };
    /**
     * Organization deleteMany
     */
    export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Organizations to delete
         */
        where?: OrganizationWhereInput
        /**
         * Limit how many Organizations to delete.
         */
        limit?: number
    };
    /**
     * Organization.members
     */
    export type Organization$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        where?: MemberWhereInput
        orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
        cursor?: MemberWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
    };
    /**
     * Organization.invitations
     */
    export type Organization$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        where?: InvitationWhereInput
        orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
        cursor?: InvitationWhereUniqueInput
        take?: number
        skip?: number
        distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
    };
    /**
     * Organization.assets
     */
    export type Organization$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Asset
         */
        select?: AssetSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Asset
         */
        omit?: AssetOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AssetInclude<ExtArgs> | null
        where?: AssetWhereInput
        orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
        cursor?: AssetWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Appoi_0
     */
    export type Organization$delegate_aux_Organization_assets_Appoi_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        cursor?: AppointmentCidWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Appoi_1
     */
    export type Organization$delegate_aux_Organization_assets_Appoi_1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        cursor?: AppointmentWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Patie_0
     */
    export type Organization$delegate_aux_Organization_assets_Patie_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        cursor?: PatientWhereUniqueInput
        take?: number
        skip?: number
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Vacci_0
     */
    export type Organization$delegate_aux_Organization_assets_Vacci_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        cursor?: VaccinationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Aller_0
     */
    export type Organization$delegate_aux_Organization_assets_Aller_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Medic_0
     */
    export type Organization$delegate_aux_Organization_assets_Medic_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_ExamR_0
     */
    export type Organization$delegate_aux_Organization_assets_ExamR_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        cursor?: ExamResultsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Comor_0
     */
    export type Organization$delegate_aux_Organization_assets_Comor_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Surge_0
     */
    export type Organization$delegate_aux_Organization_assets_Surge_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        cursor?: SurgeriesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Healt_0
     */
    export type Organization$delegate_aux_Organization_assets_Healt_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        cursor?: HealthPlansWhereUniqueInput
        take?: number
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Defau_0
     */
    export type Organization$delegate_aux_Organization_assets_Defau_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        where?: DefaultObjectiveInformationWhereInput
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        take?: number
        skip?: number
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * Organization.delegate_aux_Organization_assets_Event_0
     */
    export type Organization$delegate_aux_Organization_assets_Event_0Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        where?: EventCalendarWhereInput
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        cursor?: EventCalendarWhereUniqueInput
        take?: number
        skip?: number
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * Organization without action
     */
    export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
    };
    /**
     * Model Member
     */
    export type AggregateMember = {
        _count: MemberCountAggregateOutputType | null
        _min: MemberMinAggregateOutputType | null
        _max: MemberMaxAggregateOutputType | null
    };
    export type MemberMinAggregateOutputType = {
        id: string | null
        organizationId: string | null
        userId: string | null
        role: string | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type MemberMaxAggregateOutputType = {
        id: string | null
        organizationId: string | null
        userId: string | null
        role: string | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type MemberCountAggregateOutputType = {
        id: number
        organizationId: number
        userId: number
        role: number
        createdAt: number
        updatedAt: number
        _all: number
    };
    export type MemberMinAggregateInputType = {
        id?: true
        organizationId?: true
        userId?: true
        role?: true
        createdAt?: true
        updatedAt?: true
    };
    export type MemberMaxAggregateInputType = {
        id?: true
        organizationId?: true
        userId?: true
        role?: true
        createdAt?: true
        updatedAt?: true
    };
    export type MemberCountAggregateInputType = {
        id?: true
        organizationId?: true
        userId?: true
        role?: true
        createdAt?: true
        updatedAt?: true
        _all?: true
    };
    export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Member to aggregate.
         */
        where?: MemberWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Members to fetch.
         */
        orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: MemberWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Members from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Members.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Members
        **/
        _count?: true | MemberCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: MemberMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: MemberMaxAggregateInputType
    };
    export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
        : GetScalarType<T[P], AggregateMember[P]>
    };
    export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MemberWhereInput
        orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
        by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
        having?: MemberScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: MemberCountAggregateInputType | true
        _min?: MemberMinAggregateInputType
        _max?: MemberMaxAggregateInputType
    };
    export type MemberGroupByOutputType = {
        id: string
        organizationId: string
        userId: string
        role: string
        createdAt: Date
        updatedAt: Date
        _count: MemberCountAggregateOutputType | null
        _min: MemberMinAggregateOutputType | null
        _max: MemberMaxAggregateOutputType | null
    };
    type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<MemberGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], MemberGroupByOutputType[P]>
                : GetScalarType<T[P], MemberGroupByOutputType[P]>
            }
        >
    >;
    export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        organizationId?: boolean
        userId?: boolean
        role?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["member"]>;
    export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        organizationId?: boolean
        userId?: boolean
        role?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["member"]>;
    export type MemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        organizationId?: boolean
        userId?: boolean
        role?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["member"]>;
    export type MemberSelectScalar = {
        id?: boolean
        organizationId?: boolean
        userId?: boolean
        role?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    };
    export type MemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["member"]>;
    export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type MemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Member"
        objects: {
            organization: Prisma.$OrganizationPayload<ExtArgs>
            user: Prisma.$UserPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            organizationId: string
            userId: string
            role: string
            createdAt: Date
            updatedAt: Date
        }, ExtArgs["result"]["member"]>
        composites: {}
    };
    type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>;
    type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: MemberCountAggregateInputType | true
    };
    /**
     * Member findUnique
     */
    export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * Filter, which Member to fetch.
         */
        where: MemberWhereUniqueInput
    };
    /**
     * Member findUniqueOrThrow
     */
    export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * Filter, which Member to fetch.
         */
        where: MemberWhereUniqueInput
    };
    /**
     * Member findFirst
     */
    export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * Filter, which Member to fetch.
         */
        where?: MemberWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Members to fetch.
         */
        orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Members.
         */
        cursor?: MemberWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Members from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Members.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Members.
         */
        distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
    };
    /**
     * Member findFirstOrThrow
     */
    export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * Filter, which Member to fetch.
         */
        where?: MemberWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Members to fetch.
         */
        orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Members.
         */
        cursor?: MemberWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Members from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Members.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Members.
         */
        distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
    };
    /**
     * Member findMany
     */
    export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * Filter, which Members to fetch.
         */
        where?: MemberWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Members to fetch.
         */
        orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Members.
         */
        cursor?: MemberWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Members from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Members.
         */
        skip?: number
        distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
    };
    /**
     * Member create
     */
    export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * The data needed to create a Member.
         */
        data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    };
    /**
     * Member createMany
     */
    export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Members.
         */
        data: MemberCreateManyInput | MemberCreateManyInput[]
    };
    /**
     * Member createManyAndReturn
     */
    export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * The data used to create many Members.
         */
        data: MemberCreateManyInput | MemberCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Member update
     */
    export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * The data needed to update a Member.
         */
        data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
        /**
         * Choose, which Member to update.
         */
        where: MemberWhereUniqueInput
    };
    /**
     * Member updateMany
     */
    export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Members.
         */
        data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
        /**
         * Filter which Members to update
         */
        where?: MemberWhereInput
        /**
         * Limit how many Members to update.
         */
        limit?: number
    };
    /**
     * Member updateManyAndReturn
     */
    export type MemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * The data used to update Members.
         */
        data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
        /**
         * Filter which Members to update
         */
        where?: MemberWhereInput
        /**
         * Limit how many Members to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Member upsert
     */
    export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * The filter to search for the Member to update in case it exists.
         */
        where: MemberWhereUniqueInput
        /**
         * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
         */
        create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
        /**
         * In case the Member was found with the provided `where` argument, update it with this data.
         */
        update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    };
    /**
     * Member delete
     */
    export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
        /**
         * Filter which Member to delete.
         */
        where: MemberWhereUniqueInput
    };
    /**
     * Member deleteMany
     */
    export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Members to delete
         */
        where?: MemberWhereInput
        /**
         * Limit how many Members to delete.
         */
        limit?: number
    };
    /**
     * Member without action
     */
    export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Member
         */
        select?: MemberSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Member
         */
        omit?: MemberOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MemberInclude<ExtArgs> | null
    };
    /**
     * Model Invitation
     */
    export type AggregateInvitation = {
        _count: InvitationCountAggregateOutputType | null
        _min: InvitationMinAggregateOutputType | null
        _max: InvitationMaxAggregateOutputType | null
    };
    export type InvitationMinAggregateOutputType = {
        id: string | null
        organizationId: string | null
        email: string | null
        role: string | null
        status: string | null
        expiresAt: Date | null
        createdAt: Date | null
        updatedAt: Date | null
        inviterId: string | null
    };
    export type InvitationMaxAggregateOutputType = {
        id: string | null
        organizationId: string | null
        email: string | null
        role: string | null
        status: string | null
        expiresAt: Date | null
        createdAt: Date | null
        updatedAt: Date | null
        inviterId: string | null
    };
    export type InvitationCountAggregateOutputType = {
        id: number
        organizationId: number
        email: number
        role: number
        status: number
        expiresAt: number
        createdAt: number
        updatedAt: number
        inviterId: number
        _all: number
    };
    export type InvitationMinAggregateInputType = {
        id?: true
        organizationId?: true
        email?: true
        role?: true
        status?: true
        expiresAt?: true
        createdAt?: true
        updatedAt?: true
        inviterId?: true
    };
    export type InvitationMaxAggregateInputType = {
        id?: true
        organizationId?: true
        email?: true
        role?: true
        status?: true
        expiresAt?: true
        createdAt?: true
        updatedAt?: true
        inviterId?: true
    };
    export type InvitationCountAggregateInputType = {
        id?: true
        organizationId?: true
        email?: true
        role?: true
        status?: true
        expiresAt?: true
        createdAt?: true
        updatedAt?: true
        inviterId?: true
        _all?: true
    };
    export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Invitation to aggregate.
         */
        where?: InvitationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Invitations to fetch.
         */
        orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: InvitationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Invitations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Invitations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Invitations
        **/
        _count?: true | InvitationCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: InvitationMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: InvitationMaxAggregateInputType
    };
    export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
        : GetScalarType<T[P], AggregateInvitation[P]>
    };
    export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: InvitationWhereInput
        orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
        by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
        having?: InvitationScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: InvitationCountAggregateInputType | true
        _min?: InvitationMinAggregateInputType
        _max?: InvitationMaxAggregateInputType
    };
    export type InvitationGroupByOutputType = {
        id: string
        organizationId: string
        email: string
        role: string | null
        status: string
        expiresAt: Date
        createdAt: Date
        updatedAt: Date | null
        inviterId: string
        _count: InvitationCountAggregateOutputType | null
        _min: InvitationMinAggregateOutputType | null
        _max: InvitationMaxAggregateOutputType | null
    };
    type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<InvitationGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], InvitationGroupByOutputType[P]>
                : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            }
        >
    >;
    export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        organizationId?: boolean
        email?: boolean
        role?: boolean
        status?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        inviterId?: boolean
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["invitation"]>;
    export type InvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        organizationId?: boolean
        email?: boolean
        role?: boolean
        status?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        inviterId?: boolean
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["invitation"]>;
    export type InvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        organizationId?: boolean
        email?: boolean
        role?: boolean
        status?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        inviterId?: boolean
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["invitation"]>;
    export type InvitationSelectScalar = {
        id?: boolean
        organizationId?: boolean
        email?: boolean
        role?: boolean
        status?: boolean
        expiresAt?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        inviterId?: boolean
    };
    export type InvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "email" | "role" | "status" | "expiresAt" | "createdAt" | "updatedAt" | "inviterId", ExtArgs["result"]["invitation"]>;
    export type InvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type InvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type InvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        organization?: boolean | OrganizationDefaultArgs<ExtArgs>
        user?: boolean | UserDefaultArgs<ExtArgs>
    };
    export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Invitation"
        objects: {
            organization: Prisma.$OrganizationPayload<ExtArgs>
            user: Prisma.$UserPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            organizationId: string
            email: string
            role: string | null
            status: string
            expiresAt: Date
            createdAt: Date
            updatedAt: Date | null
            inviterId: string
        }, ExtArgs["result"]["invitation"]>
        composites: {}
    };
    type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>;
    type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: InvitationCountAggregateInputType | true
    };
    /**
     * Invitation findUnique
     */
    export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * Filter, which Invitation to fetch.
         */
        where: InvitationWhereUniqueInput
    };
    /**
     * Invitation findUniqueOrThrow
     */
    export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * Filter, which Invitation to fetch.
         */
        where: InvitationWhereUniqueInput
    };
    /**
     * Invitation findFirst
     */
    export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * Filter, which Invitation to fetch.
         */
        where?: InvitationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Invitations to fetch.
         */
        orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Invitations.
         */
        cursor?: InvitationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Invitations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Invitations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Invitations.
         */
        distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
    };
    /**
     * Invitation findFirstOrThrow
     */
    export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * Filter, which Invitation to fetch.
         */
        where?: InvitationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Invitations to fetch.
         */
        orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Invitations.
         */
        cursor?: InvitationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Invitations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Invitations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Invitations.
         */
        distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
    };
    /**
     * Invitation findMany
     */
    export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * Filter, which Invitations to fetch.
         */
        where?: InvitationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Invitations to fetch.
         */
        orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Invitations.
         */
        cursor?: InvitationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Invitations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Invitations.
         */
        skip?: number
        distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
    };
    /**
     * Invitation create
     */
    export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * The data needed to create a Invitation.
         */
        data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    };
    /**
     * Invitation createMany
     */
    export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Invitations.
         */
        data: InvitationCreateManyInput | InvitationCreateManyInput[]
    };
    /**
     * Invitation createManyAndReturn
     */
    export type InvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * The data used to create many Invitations.
         */
        data: InvitationCreateManyInput | InvitationCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Invitation update
     */
    export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * The data needed to update a Invitation.
         */
        data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
        /**
         * Choose, which Invitation to update.
         */
        where: InvitationWhereUniqueInput
    };
    /**
     * Invitation updateMany
     */
    export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Invitations.
         */
        data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
        /**
         * Filter which Invitations to update
         */
        where?: InvitationWhereInput
        /**
         * Limit how many Invitations to update.
         */
        limit?: number
    };
    /**
     * Invitation updateManyAndReturn
     */
    export type InvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * The data used to update Invitations.
         */
        data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
        /**
         * Filter which Invitations to update
         */
        where?: InvitationWhereInput
        /**
         * Limit how many Invitations to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Invitation upsert
     */
    export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * The filter to search for the Invitation to update in case it exists.
         */
        where: InvitationWhereUniqueInput
        /**
         * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
         */
        create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
        /**
         * In case the Invitation was found with the provided `where` argument, update it with this data.
         */
        update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    };
    /**
     * Invitation delete
     */
    export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
        /**
         * Filter which Invitation to delete.
         */
        where: InvitationWhereUniqueInput
    };
    /**
     * Invitation deleteMany
     */
    export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Invitations to delete
         */
        where?: InvitationWhereInput
        /**
         * Limit how many Invitations to delete.
         */
        limit?: number
    };
    /**
     * Invitation without action
     */
    export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Invitation
         */
        select?: InvitationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Invitation
         */
        omit?: InvitationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: InvitationInclude<ExtArgs> | null
    };
    /**
     * Model Cid
     */
    export type AggregateCid = {
        _count: CidCountAggregateOutputType | null
        _min: CidMinAggregateOutputType | null
        _max: CidMaxAggregateOutputType | null
    };
    export type CidMinAggregateOutputType = {
        id: string | null
        code: string | null
        description: string | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type CidMaxAggregateOutputType = {
        id: string | null
        code: string | null
        description: string | null
        createdAt: Date | null
        updatedAt: Date | null
    };
    export type CidCountAggregateOutputType = {
        id: number
        code: number
        description: number
        createdAt: number
        updatedAt: number
        _all: number
    };
    export type CidMinAggregateInputType = {
        id?: true
        code?: true
        description?: true
        createdAt?: true
        updatedAt?: true
    };
    export type CidMaxAggregateInputType = {
        id?: true
        code?: true
        description?: true
        createdAt?: true
        updatedAt?: true
    };
    export type CidCountAggregateInputType = {
        id?: true
        code?: true
        description?: true
        createdAt?: true
        updatedAt?: true
        _all?: true
    };
    export type CidAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Cid to aggregate.
         */
        where?: CidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Cids to fetch.
         */
        orderBy?: CidOrderByWithRelationInput | CidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: CidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Cids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Cids.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Cids
        **/
        _count?: true | CidCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: CidMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: CidMaxAggregateInputType
    };
    export type GetCidAggregateType<T extends CidAggregateArgs> = {
        [P in keyof T & keyof AggregateCid]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCid[P]>
        : GetScalarType<T[P], AggregateCid[P]>
    };
    export type CidGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: CidWhereInput
        orderBy?: CidOrderByWithAggregationInput | CidOrderByWithAggregationInput[]
        by: CidScalarFieldEnum[] | CidScalarFieldEnum
        having?: CidScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: CidCountAggregateInputType | true
        _min?: CidMinAggregateInputType
        _max?: CidMaxAggregateInputType
    };
    export type CidGroupByOutputType = {
        id: string
        code: string
        description: string
        createdAt: Date
        updatedAt: Date | null
        _count: CidCountAggregateOutputType | null
        _min: CidMinAggregateOutputType | null
        _max: CidMaxAggregateOutputType | null
    };
    type GetCidGroupByPayload<T extends CidGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<CidGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof CidGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], CidGroupByOutputType[P]>
                : GetScalarType<T[P], CidGroupByOutputType[P]>
            }
        >
    >;
    export type CidSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        code?: boolean
        description?: boolean
        createdAt?: boolean
        updatedAt?: boolean
        appointmentCid?: boolean | Cid$appointmentCidArgs<ExtArgs>
        _count?: boolean | CidCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["cid"]>;
    export type CidSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        code?: boolean
        description?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    }, ExtArgs["result"]["cid"]>;
    export type CidSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        code?: boolean
        description?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    }, ExtArgs["result"]["cid"]>;
    export type CidSelectScalar = {
        id?: boolean
        code?: boolean
        description?: boolean
        createdAt?: boolean
        updatedAt?: boolean
    };
    export type CidOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["cid"]>;
    export type CidInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        appointmentCid?: boolean | Cid$appointmentCidArgs<ExtArgs>
        _count?: boolean | CidCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type CidIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type CidIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $CidPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Cid"
        objects: {
            appointmentCid: Prisma.$AppointmentCidPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            code: string
            description: string
            createdAt: Date
            updatedAt: Date | null
        }, ExtArgs["result"]["cid"]>
        composites: {}
    };
    type CidGetPayload<S extends boolean | null | undefined | CidDefaultArgs> = $Result.GetResult<Prisma.$CidPayload, S>;
    type CidCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<CidFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: CidCountAggregateInputType | true
    };
    /**
     * Cid findUnique
     */
    export type CidFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * Filter, which Cid to fetch.
         */
        where: CidWhereUniqueInput
    };
    /**
     * Cid findUniqueOrThrow
     */
    export type CidFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * Filter, which Cid to fetch.
         */
        where: CidWhereUniqueInput
    };
    /**
     * Cid findFirst
     */
    export type CidFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * Filter, which Cid to fetch.
         */
        where?: CidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Cids to fetch.
         */
        orderBy?: CidOrderByWithRelationInput | CidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Cids.
         */
        cursor?: CidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Cids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Cids.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Cids.
         */
        distinct?: CidScalarFieldEnum | CidScalarFieldEnum[]
    };
    /**
     * Cid findFirstOrThrow
     */
    export type CidFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * Filter, which Cid to fetch.
         */
        where?: CidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Cids to fetch.
         */
        orderBy?: CidOrderByWithRelationInput | CidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Cids.
         */
        cursor?: CidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Cids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Cids.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Cids.
         */
        distinct?: CidScalarFieldEnum | CidScalarFieldEnum[]
    };
    /**
     * Cid findMany
     */
    export type CidFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * Filter, which Cids to fetch.
         */
        where?: CidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Cids to fetch.
         */
        orderBy?: CidOrderByWithRelationInput | CidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Cids.
         */
        cursor?: CidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Cids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Cids.
         */
        skip?: number
        distinct?: CidScalarFieldEnum | CidScalarFieldEnum[]
    };
    /**
     * Cid create
     */
    export type CidCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * The data needed to create a Cid.
         */
        data: XOR<CidCreateInput, CidUncheckedCreateInput>
    };
    /**
     * Cid createMany
     */
    export type CidCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Cids.
         */
        data: CidCreateManyInput | CidCreateManyInput[]
    };
    /**
     * Cid createManyAndReturn
     */
    export type CidCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * The data used to create many Cids.
         */
        data: CidCreateManyInput | CidCreateManyInput[]
    };
    /**
     * Cid update
     */
    export type CidUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * The data needed to update a Cid.
         */
        data: XOR<CidUpdateInput, CidUncheckedUpdateInput>
        /**
         * Choose, which Cid to update.
         */
        where: CidWhereUniqueInput
    };
    /**
     * Cid updateMany
     */
    export type CidUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Cids.
         */
        data: XOR<CidUpdateManyMutationInput, CidUncheckedUpdateManyInput>
        /**
         * Filter which Cids to update
         */
        where?: CidWhereInput
        /**
         * Limit how many Cids to update.
         */
        limit?: number
    };
    /**
     * Cid updateManyAndReturn
     */
    export type CidUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * The data used to update Cids.
         */
        data: XOR<CidUpdateManyMutationInput, CidUncheckedUpdateManyInput>
        /**
         * Filter which Cids to update
         */
        where?: CidWhereInput
        /**
         * Limit how many Cids to update.
         */
        limit?: number
    };
    /**
     * Cid upsert
     */
    export type CidUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * The filter to search for the Cid to update in case it exists.
         */
        where: CidWhereUniqueInput
        /**
         * In case the Cid found by the `where` argument doesn't exist, create a new Cid with this data.
         */
        create: XOR<CidCreateInput, CidUncheckedCreateInput>
        /**
         * In case the Cid was found with the provided `where` argument, update it with this data.
         */
        update: XOR<CidUpdateInput, CidUncheckedUpdateInput>
    };
    /**
     * Cid delete
     */
    export type CidDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
        /**
         * Filter which Cid to delete.
         */
        where: CidWhereUniqueInput
    };
    /**
     * Cid deleteMany
     */
    export type CidDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Cids to delete
         */
        where?: CidWhereInput
        /**
         * Limit how many Cids to delete.
         */
        limit?: number
    };
    /**
     * Cid.appointmentCid
     */
    export type Cid$appointmentCidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        cursor?: AppointmentCidWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * Cid without action
     */
    export type CidDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Cid
         */
        select?: CidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Cid
         */
        omit?: CidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: CidInclude<ExtArgs> | null
    };
    /**
     * Model AppointmentCid
     */
    export type AggregateAppointmentCid = {
        _count: AppointmentCidCountAggregateOutputType | null
        _min: AppointmentCidMinAggregateOutputType | null
        _max: AppointmentCidMaxAggregateOutputType | null
    };
    export type AppointmentCidMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        appointmentId: string | null
        cidId: string | null
    };
    export type AppointmentCidMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        appointmentId: string | null
        cidId: string | null
    };
    export type AppointmentCidCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        appointmentId: number
        cidId: number
        _all: number
    };
    export type AppointmentCidMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        appointmentId?: true
        cidId?: true
    };
    export type AppointmentCidMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        appointmentId?: true
        cidId?: true
    };
    export type AppointmentCidCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        appointmentId?: true
        cidId?: true
        _all?: true
    };
    export type AppointmentCidAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which AppointmentCid to aggregate.
         */
        where?: AppointmentCidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AppointmentCids to fetch.
         */
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: AppointmentCidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AppointmentCids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AppointmentCids.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned AppointmentCids
        **/
        _count?: true | AppointmentCidCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: AppointmentCidMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: AppointmentCidMaxAggregateInputType
    };
    export type GetAppointmentCidAggregateType<T extends AppointmentCidAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointmentCid]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointmentCid[P]>
        : GetScalarType<T[P], AggregateAppointmentCid[P]>
    };
    export type AppointmentCidGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithAggregationInput | AppointmentCidOrderByWithAggregationInput[]
        by: AppointmentCidScalarFieldEnum[] | AppointmentCidScalarFieldEnum
        having?: AppointmentCidScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: AppointmentCidCountAggregateInputType | true
        _min?: AppointmentCidMinAggregateInputType
        _max?: AppointmentCidMaxAggregateInputType
    };
    export type AppointmentCidGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        appointmentId: string
        cidId: string
        _count: AppointmentCidCountAggregateOutputType | null
        _min: AppointmentCidMinAggregateOutputType | null
        _max: AppointmentCidMaxAggregateOutputType | null
    };
    type GetAppointmentCidGroupByPayload<T extends AppointmentCidGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<AppointmentCidGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof AppointmentCidGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], AppointmentCidGroupByOutputType[P]>
                : GetScalarType<T[P], AppointmentCidGroupByOutputType[P]>
            }
        >
    >;
    export type AppointmentCidSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        appointmentId?: boolean
        cidId?: boolean
        createdByUser?: boolean | AppointmentCid$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | AppointmentCid$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | AppointmentCid$deletedByUserArgs<ExtArgs>
        organization?: boolean | AppointmentCid$organizationArgs<ExtArgs>
        appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
        cid?: boolean | CidDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["appointmentCid"]>;
    export type AppointmentCidSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        appointmentId?: boolean
        cidId?: boolean
        createdByUser?: boolean | AppointmentCid$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | AppointmentCid$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | AppointmentCid$deletedByUserArgs<ExtArgs>
        organization?: boolean | AppointmentCid$organizationArgs<ExtArgs>
        appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
        cid?: boolean | CidDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["appointmentCid"]>;
    export type AppointmentCidSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        appointmentId?: boolean
        cidId?: boolean
        createdByUser?: boolean | AppointmentCid$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | AppointmentCid$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | AppointmentCid$deletedByUserArgs<ExtArgs>
        organization?: boolean | AppointmentCid$organizationArgs<ExtArgs>
        appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
        cid?: boolean | CidDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["appointmentCid"]>;
    export type AppointmentCidSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        appointmentId?: boolean
        cidId?: boolean
    };
    export type AppointmentCidOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "appointmentId" | "cidId", ExtArgs["result"]["appointmentCid"]>;
    export type AppointmentCidInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | AppointmentCid$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | AppointmentCid$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | AppointmentCid$deletedByUserArgs<ExtArgs>
        organization?: boolean | AppointmentCid$organizationArgs<ExtArgs>
        appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
        cid?: boolean | CidDefaultArgs<ExtArgs>
    };
    export type AppointmentCidIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | AppointmentCid$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | AppointmentCid$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | AppointmentCid$deletedByUserArgs<ExtArgs>
        organization?: boolean | AppointmentCid$organizationArgs<ExtArgs>
        appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
        cid?: boolean | CidDefaultArgs<ExtArgs>
    };
    export type AppointmentCidIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | AppointmentCid$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | AppointmentCid$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | AppointmentCid$deletedByUserArgs<ExtArgs>
        organization?: boolean | AppointmentCid$organizationArgs<ExtArgs>
        appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
        cid?: boolean | CidDefaultArgs<ExtArgs>
    };
    export type $AppointmentCidPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "AppointmentCid"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            appointment: Prisma.$AppointmentPayload<ExtArgs>
            cid: Prisma.$CidPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            appointmentId: string
            cidId: string
        }, ExtArgs["result"]["appointmentCid"]>
        composites: {}
    };
    type AppointmentCidGetPayload<S extends boolean | null | undefined | AppointmentCidDefaultArgs> = $Result.GetResult<Prisma.$AppointmentCidPayload, S>;
    type AppointmentCidCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<AppointmentCidFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: AppointmentCidCountAggregateInputType | true
    };
    /**
     * AppointmentCid findUnique
     */
    export type AppointmentCidFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * Filter, which AppointmentCid to fetch.
         */
        where: AppointmentCidWhereUniqueInput
    };
    /**
     * AppointmentCid findUniqueOrThrow
     */
    export type AppointmentCidFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * Filter, which AppointmentCid to fetch.
         */
        where: AppointmentCidWhereUniqueInput
    };
    /**
     * AppointmentCid findFirst
     */
    export type AppointmentCidFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * Filter, which AppointmentCid to fetch.
         */
        where?: AppointmentCidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AppointmentCids to fetch.
         */
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for AppointmentCids.
         */
        cursor?: AppointmentCidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AppointmentCids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AppointmentCids.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of AppointmentCids.
         */
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * AppointmentCid findFirstOrThrow
     */
    export type AppointmentCidFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * Filter, which AppointmentCid to fetch.
         */
        where?: AppointmentCidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AppointmentCids to fetch.
         */
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for AppointmentCids.
         */
        cursor?: AppointmentCidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AppointmentCids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AppointmentCids.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of AppointmentCids.
         */
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * AppointmentCid findMany
     */
    export type AppointmentCidFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * Filter, which AppointmentCids to fetch.
         */
        where?: AppointmentCidWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AppointmentCids to fetch.
         */
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing AppointmentCids.
         */
        cursor?: AppointmentCidWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AppointmentCids from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AppointmentCids.
         */
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * AppointmentCid create
     */
    export type AppointmentCidCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * The data needed to create a AppointmentCid.
         */
        data: XOR<AppointmentCidCreateInput, AppointmentCidUncheckedCreateInput>
    };
    /**
     * AppointmentCid createMany
     */
    export type AppointmentCidCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many AppointmentCids.
         */
        data: AppointmentCidCreateManyInput | AppointmentCidCreateManyInput[]
    };
    /**
     * AppointmentCid createManyAndReturn
     */
    export type AppointmentCidCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * The data used to create many AppointmentCids.
         */
        data: AppointmentCidCreateManyInput | AppointmentCidCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * AppointmentCid update
     */
    export type AppointmentCidUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * The data needed to update a AppointmentCid.
         */
        data: XOR<AppointmentCidUpdateInput, AppointmentCidUncheckedUpdateInput>
        /**
         * Choose, which AppointmentCid to update.
         */
        where: AppointmentCidWhereUniqueInput
    };
    /**
     * AppointmentCid updateMany
     */
    export type AppointmentCidUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update AppointmentCids.
         */
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyInput>
        /**
         * Filter which AppointmentCids to update
         */
        where?: AppointmentCidWhereInput
        /**
         * Limit how many AppointmentCids to update.
         */
        limit?: number
    };
    /**
     * AppointmentCid updateManyAndReturn
     */
    export type AppointmentCidUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * The data used to update AppointmentCids.
         */
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyInput>
        /**
         * Filter which AppointmentCids to update
         */
        where?: AppointmentCidWhereInput
        /**
         * Limit how many AppointmentCids to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * AppointmentCid upsert
     */
    export type AppointmentCidUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * The filter to search for the AppointmentCid to update in case it exists.
         */
        where: AppointmentCidWhereUniqueInput
        /**
         * In case the AppointmentCid found by the `where` argument doesn't exist, create a new AppointmentCid with this data.
         */
        create: XOR<AppointmentCidCreateInput, AppointmentCidUncheckedCreateInput>
        /**
         * In case the AppointmentCid was found with the provided `where` argument, update it with this data.
         */
        update: XOR<AppointmentCidUpdateInput, AppointmentCidUncheckedUpdateInput>
    };
    /**
     * AppointmentCid delete
     */
    export type AppointmentCidDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        /**
         * Filter which AppointmentCid to delete.
         */
        where: AppointmentCidWhereUniqueInput
    };
    /**
     * AppointmentCid deleteMany
     */
    export type AppointmentCidDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which AppointmentCids to delete
         */
        where?: AppointmentCidWhereInput
        /**
         * Limit how many AppointmentCids to delete.
         */
        limit?: number
    };
    /**
     * AppointmentCid.createdByUser
     */
    export type AppointmentCid$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * AppointmentCid.updatedByUser
     */
    export type AppointmentCid$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * AppointmentCid.deletedByUser
     */
    export type AppointmentCid$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * AppointmentCid.organization
     */
    export type AppointmentCid$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * AppointmentCid without action
     */
    export type AppointmentCidDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
    };
    /**
     * Model Appointment
     */
    export type AggregateAppointment = {
        _count: AppointmentCountAggregateOutputType | null
        _avg: AppointmentAvgAggregateOutputType | null
        _sum: AppointmentSumAggregateOutputType | null
        _min: AppointmentMinAggregateOutputType | null
        _max: AppointmentMaxAggregateOutputType | null
    };
    export type AppointmentAvgAggregateOutputType = {
        sickNoteDays: number | null
    };
    export type AppointmentSumAggregateOutputType = {
        sickNoteDays: number | null
    };
    export type AppointmentMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        motive: string | null
        subjective: string | null
        objective: string | null
        evaluation: string | null
        plan: string | null
        startDate: Date | null
        endDate: Date | null
        sickNoteDays: number | null
        category: $Enums.AppointmentCategory | null
        status: $Enums.AppointmentStatus | null
        followUpId: string | null
        patientId: string | null
    };
    export type AppointmentMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        motive: string | null
        subjective: string | null
        objective: string | null
        evaluation: string | null
        plan: string | null
        startDate: Date | null
        endDate: Date | null
        sickNoteDays: number | null
        category: $Enums.AppointmentCategory | null
        status: $Enums.AppointmentStatus | null
        followUpId: string | null
        patientId: string | null
    };
    export type AppointmentCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        motive: number
        subjective: number
        objective: number
        evaluation: number
        plan: number
        startDate: number
        endDate: number
        sickNoteDays: number
        category: number
        status: number
        followUpId: number
        patientId: number
        _all: number
    };
    export type AppointmentAvgAggregateInputType = {
        sickNoteDays?: true
    };
    export type AppointmentSumAggregateInputType = {
        sickNoteDays?: true
    };
    export type AppointmentMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        motive?: true
        subjective?: true
        objective?: true
        evaluation?: true
        plan?: true
        startDate?: true
        endDate?: true
        sickNoteDays?: true
        category?: true
        status?: true
        followUpId?: true
        patientId?: true
    };
    export type AppointmentMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        motive?: true
        subjective?: true
        objective?: true
        evaluation?: true
        plan?: true
        startDate?: true
        endDate?: true
        sickNoteDays?: true
        category?: true
        status?: true
        followUpId?: true
        patientId?: true
    };
    export type AppointmentCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        motive?: true
        subjective?: true
        objective?: true
        evaluation?: true
        plan?: true
        startDate?: true
        endDate?: true
        sickNoteDays?: true
        category?: true
        status?: true
        followUpId?: true
        patientId?: true
        _all?: true
    };
    export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Appointment to aggregate.
         */
        where?: AppointmentWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Appointments to fetch.
         */
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: AppointmentWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Appointments from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Appointments.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Appointments
        **/
        _count?: true | AppointmentCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to average
        **/
        _avg?: AppointmentAvgAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to sum
        **/
        _sum?: AppointmentSumAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: AppointmentMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: AppointmentMaxAggregateInputType
    };
    export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
        : GetScalarType<T[P], AggregateAppointment[P]>
    };
    export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AppointmentWhereInput
        orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
        by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
        having?: AppointmentScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: AppointmentCountAggregateInputType | true
        _avg?: AppointmentAvgAggregateInputType
        _sum?: AppointmentSumAggregateInputType
        _min?: AppointmentMinAggregateInputType
        _max?: AppointmentMaxAggregateInputType
    };
    export type AppointmentGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate: Date | null
        endDate: Date | null
        sickNoteDays: number | null
        category: $Enums.AppointmentCategory | null
        status: $Enums.AppointmentStatus | null
        followUpId: string | null
        patientId: string
        _count: AppointmentCountAggregateOutputType | null
        _avg: AppointmentAvgAggregateOutputType | null
        _sum: AppointmentSumAggregateOutputType | null
        _min: AppointmentMinAggregateOutputType | null
        _max: AppointmentMaxAggregateOutputType | null
    };
    type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<AppointmentGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
                : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            }
        >
    >;
    export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        motive?: boolean
        subjective?: boolean
        objective?: boolean
        evaluation?: boolean
        plan?: boolean
        startDate?: boolean
        endDate?: boolean
        sickNoteDays?: boolean
        category?: boolean
        status?: boolean
        followUpId?: boolean
        patientId?: boolean
        createdByUser?: boolean | Appointment$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Appointment$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Appointment$deletedByUserArgs<ExtArgs>
        organization?: boolean | Appointment$organizationArgs<ExtArgs>
        followUp?: boolean | Appointment$followUpArgs<ExtArgs>
        predecessorFollowUp?: boolean | Appointment$predecessorFollowUpArgs<ExtArgs>
        cids?: boolean | Appointment$cidsArgs<ExtArgs>
        allergies?: boolean | Appointment$allergiesArgs<ExtArgs>
        medications?: boolean | Appointment$medicationsArgs<ExtArgs>
        comorbidities?: boolean | Appointment$comorbiditiesArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        eventCalendar?: boolean | Appointment$eventCalendarArgs<ExtArgs>
        _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["appointment"]>;
    export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        motive?: boolean
        subjective?: boolean
        objective?: boolean
        evaluation?: boolean
        plan?: boolean
        startDate?: boolean
        endDate?: boolean
        sickNoteDays?: boolean
        category?: boolean
        status?: boolean
        followUpId?: boolean
        patientId?: boolean
        createdByUser?: boolean | Appointment$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Appointment$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Appointment$deletedByUserArgs<ExtArgs>
        organization?: boolean | Appointment$organizationArgs<ExtArgs>
        followUp?: boolean | Appointment$followUpArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["appointment"]>;
    export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        motive?: boolean
        subjective?: boolean
        objective?: boolean
        evaluation?: boolean
        plan?: boolean
        startDate?: boolean
        endDate?: boolean
        sickNoteDays?: boolean
        category?: boolean
        status?: boolean
        followUpId?: boolean
        patientId?: boolean
        createdByUser?: boolean | Appointment$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Appointment$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Appointment$deletedByUserArgs<ExtArgs>
        organization?: boolean | Appointment$organizationArgs<ExtArgs>
        followUp?: boolean | Appointment$followUpArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["appointment"]>;
    export type AppointmentSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        motive?: boolean
        subjective?: boolean
        objective?: boolean
        evaluation?: boolean
        plan?: boolean
        startDate?: boolean
        endDate?: boolean
        sickNoteDays?: boolean
        category?: boolean
        status?: boolean
        followUpId?: boolean
        patientId?: boolean
    };
    export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "motive" | "subjective" | "objective" | "evaluation" | "plan" | "startDate" | "endDate" | "sickNoteDays" | "category" | "status" | "followUpId" | "patientId", ExtArgs["result"]["appointment"]>;
    export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Appointment$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Appointment$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Appointment$deletedByUserArgs<ExtArgs>
        organization?: boolean | Appointment$organizationArgs<ExtArgs>
        followUp?: boolean | Appointment$followUpArgs<ExtArgs>
        predecessorFollowUp?: boolean | Appointment$predecessorFollowUpArgs<ExtArgs>
        cids?: boolean | Appointment$cidsArgs<ExtArgs>
        allergies?: boolean | Appointment$allergiesArgs<ExtArgs>
        medications?: boolean | Appointment$medicationsArgs<ExtArgs>
        comorbidities?: boolean | Appointment$comorbiditiesArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        eventCalendar?: boolean | Appointment$eventCalendarArgs<ExtArgs>
        _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Appointment$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Appointment$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Appointment$deletedByUserArgs<ExtArgs>
        organization?: boolean | Appointment$organizationArgs<ExtArgs>
        followUp?: boolean | Appointment$followUpArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
    };
    export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Appointment$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Appointment$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Appointment$deletedByUserArgs<ExtArgs>
        organization?: boolean | Appointment$organizationArgs<ExtArgs>
        followUp?: boolean | Appointment$followUpArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
    };
    export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Appointment"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            followUp: Prisma.$AppointmentPayload<ExtArgs> | null
            predecessorFollowUp: Prisma.$AppointmentPayload<ExtArgs> | null
            cids: Prisma.$AppointmentCidPayload<ExtArgs>[]
            allergies: Prisma.$AllergiesPayload<ExtArgs>[]
            medications: Prisma.$MedicationsPayload<ExtArgs>[]
            comorbidities: Prisma.$ComorbiditiesPayload<ExtArgs>[]
            patient: Prisma.$PatientPayload<ExtArgs>
            eventCalendar: Prisma.$EventCalendarPayload<ExtArgs> | null
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            motive: string
            subjective: string
            objective: string
            evaluation: string
            plan: string
            startDate: Date | null
            endDate: Date | null
            sickNoteDays: number | null
            category: $Enums.AppointmentCategory | null
            status: $Enums.AppointmentStatus | null
            followUpId: string | null
            patientId: string
        }, ExtArgs["result"]["appointment"]>
        composites: {}
    };
    type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>;
    type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: AppointmentCountAggregateInputType | true
    };
    /**
     * Appointment findUnique
     */
    export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * Filter, which Appointment to fetch.
         */
        where: AppointmentWhereUniqueInput
    };
    /**
     * Appointment findUniqueOrThrow
     */
    export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * Filter, which Appointment to fetch.
         */
        where: AppointmentWhereUniqueInput
    };
    /**
     * Appointment findFirst
     */
    export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * Filter, which Appointment to fetch.
         */
        where?: AppointmentWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Appointments to fetch.
         */
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Appointments.
         */
        cursor?: AppointmentWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Appointments from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Appointments.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Appointments.
         */
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * Appointment findFirstOrThrow
     */
    export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * Filter, which Appointment to fetch.
         */
        where?: AppointmentWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Appointments to fetch.
         */
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Appointments.
         */
        cursor?: AppointmentWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Appointments from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Appointments.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Appointments.
         */
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * Appointment findMany
     */
    export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * Filter, which Appointments to fetch.
         */
        where?: AppointmentWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Appointments to fetch.
         */
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Appointments.
         */
        cursor?: AppointmentWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Appointments from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Appointments.
         */
        skip?: number
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * Appointment create
     */
    export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * The data needed to create a Appointment.
         */
        data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    };
    /**
     * Appointment createMany
     */
    export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Appointments.
         */
        data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    };
    /**
     * Appointment createManyAndReturn
     */
    export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * The data used to create many Appointments.
         */
        data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Appointment update
     */
    export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * The data needed to update a Appointment.
         */
        data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
        /**
         * Choose, which Appointment to update.
         */
        where: AppointmentWhereUniqueInput
    };
    /**
     * Appointment updateMany
     */
    export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Appointments.
         */
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
        /**
         * Filter which Appointments to update
         */
        where?: AppointmentWhereInput
        /**
         * Limit how many Appointments to update.
         */
        limit?: number
    };
    /**
     * Appointment updateManyAndReturn
     */
    export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * The data used to update Appointments.
         */
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
        /**
         * Filter which Appointments to update
         */
        where?: AppointmentWhereInput
        /**
         * Limit how many Appointments to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Appointment upsert
     */
    export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * The filter to search for the Appointment to update in case it exists.
         */
        where: AppointmentWhereUniqueInput
        /**
         * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
         */
        create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
        /**
         * In case the Appointment was found with the provided `where` argument, update it with this data.
         */
        update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    };
    /**
     * Appointment delete
     */
    export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        /**
         * Filter which Appointment to delete.
         */
        where: AppointmentWhereUniqueInput
    };
    /**
     * Appointment deleteMany
     */
    export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Appointments to delete
         */
        where?: AppointmentWhereInput
        /**
         * Limit how many Appointments to delete.
         */
        limit?: number
    };
    /**
     * Appointment.createdByUser
     */
    export type Appointment$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Appointment.updatedByUser
     */
    export type Appointment$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Appointment.deletedByUser
     */
    export type Appointment$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Appointment.organization
     */
    export type Appointment$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Appointment.followUp
     */
    export type Appointment$followUpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
    };
    /**
     * Appointment.predecessorFollowUp
     */
    export type Appointment$predecessorFollowUpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
    };
    /**
     * Appointment.cids
     */
    export type Appointment$cidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AppointmentCid
         */
        select?: AppointmentCidSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AppointmentCid
         */
        omit?: AppointmentCidOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentCidInclude<ExtArgs> | null
        where?: AppointmentCidWhereInput
        orderBy?: AppointmentCidOrderByWithRelationInput | AppointmentCidOrderByWithRelationInput[]
        cursor?: AppointmentCidWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentCidScalarFieldEnum | AppointmentCidScalarFieldEnum[]
    };
    /**
     * Appointment.allergies
     */
    export type Appointment$allergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * Appointment.medications
     */
    export type Appointment$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * Appointment.comorbidities
     */
    export type Appointment$comorbiditiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * Appointment.eventCalendar
     */
    export type Appointment$eventCalendarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        where?: EventCalendarWhereInput
    };
    /**
     * Appointment without action
     */
    export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
    };
    /**
     * Model Patient
     */
    export type AggregatePatient = {
        _count: PatientCountAggregateOutputType | null
        _min: PatientMinAggregateOutputType | null
        _max: PatientMaxAggregateOutputType | null
    };
    export type PatientMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        name: string | null
        cpf: string | null
        cellphone: string | null
        email: string | null
        sex: $Enums.Sex | null
        responsible: string | null
        nationality: string | null
        race: $Enums.Race | null
        state: string | null
        city: string | null
        zipcode: string | null
        neighborhood: string | null
        street: string | null
        number: string | null
        complement: string | null
        occupation: string | null
        sexualOrientation: string | null
        civilStatus: $Enums.CivilStatus | null
        bloodType: $Enums.BloodType | null
        genderIdentity: $Enums.GenderIdentity | null
        password: string | null
        userId: string | null
    };
    export type PatientMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        name: string | null
        cpf: string | null
        cellphone: string | null
        email: string | null
        sex: $Enums.Sex | null
        responsible: string | null
        nationality: string | null
        race: $Enums.Race | null
        state: string | null
        city: string | null
        zipcode: string | null
        neighborhood: string | null
        street: string | null
        number: string | null
        complement: string | null
        occupation: string | null
        sexualOrientation: string | null
        civilStatus: $Enums.CivilStatus | null
        bloodType: $Enums.BloodType | null
        genderIdentity: $Enums.GenderIdentity | null
        password: string | null
        userId: string | null
    };
    export type PatientCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        name: number
        cpf: number
        cellphone: number
        email: number
        sex: number
        responsible: number
        nationality: number
        race: number
        state: number
        city: number
        zipcode: number
        neighborhood: number
        street: number
        number: number
        complement: number
        occupation: number
        sexualOrientation: number
        civilStatus: number
        bloodType: number
        genderIdentity: number
        password: number
        userId: number
        _all: number
    };
    export type PatientMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        name?: true
        cpf?: true
        cellphone?: true
        email?: true
        sex?: true
        responsible?: true
        nationality?: true
        race?: true
        state?: true
        city?: true
        zipcode?: true
        neighborhood?: true
        street?: true
        number?: true
        complement?: true
        occupation?: true
        sexualOrientation?: true
        civilStatus?: true
        bloodType?: true
        genderIdentity?: true
        password?: true
        userId?: true
    };
    export type PatientMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        name?: true
        cpf?: true
        cellphone?: true
        email?: true
        sex?: true
        responsible?: true
        nationality?: true
        race?: true
        state?: true
        city?: true
        zipcode?: true
        neighborhood?: true
        street?: true
        number?: true
        complement?: true
        occupation?: true
        sexualOrientation?: true
        civilStatus?: true
        bloodType?: true
        genderIdentity?: true
        password?: true
        userId?: true
    };
    export type PatientCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        name?: true
        cpf?: true
        cellphone?: true
        email?: true
        sex?: true
        responsible?: true
        nationality?: true
        race?: true
        state?: true
        city?: true
        zipcode?: true
        neighborhood?: true
        street?: true
        number?: true
        complement?: true
        occupation?: true
        sexualOrientation?: true
        civilStatus?: true
        bloodType?: true
        genderIdentity?: true
        password?: true
        userId?: true
        _all?: true
    };
    export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Patient to aggregate.
         */
        where?: PatientWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Patients to fetch.
         */
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: PatientWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Patients from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Patients.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Patients
        **/
        _count?: true | PatientCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: PatientMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: PatientMaxAggregateInputType
    };
    export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
        : GetScalarType<T[P], AggregatePatient[P]>
    };
    export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: PatientWhereInput
        orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
        by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
        having?: PatientScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: PatientCountAggregateInputType | true
        _min?: PatientMinAggregateInputType
        _max?: PatientMaxAggregateInputType
    };
    export type PatientGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex: $Enums.Sex | null
        responsible: string | null
        nationality: string
        race: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement: string | null
        occupation: string
        sexualOrientation: string | null
        civilStatus: $Enums.CivilStatus | null
        bloodType: $Enums.BloodType | null
        genderIdentity: $Enums.GenderIdentity | null
        password: string | null
        userId: string | null
        _count: PatientCountAggregateOutputType | null
        _min: PatientMinAggregateOutputType | null
        _max: PatientMaxAggregateOutputType | null
    };
    type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<PatientGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], PatientGroupByOutputType[P]>
                : GetScalarType<T[P], PatientGroupByOutputType[P]>
            }
        >
    >;
    export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        name?: boolean
        cpf?: boolean
        cellphone?: boolean
        email?: boolean
        sex?: boolean
        responsible?: boolean
        nationality?: boolean
        race?: boolean
        state?: boolean
        city?: boolean
        zipcode?: boolean
        neighborhood?: boolean
        street?: boolean
        number?: boolean
        complement?: boolean
        occupation?: boolean
        sexualOrientation?: boolean
        civilStatus?: boolean
        bloodType?: boolean
        genderIdentity?: boolean
        password?: boolean
        userId?: boolean
        createdByUser?: boolean | Patient$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Patient$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Patient$deletedByUserArgs<ExtArgs>
        organization?: boolean | Patient$organizationArgs<ExtArgs>
        user?: boolean | Patient$userArgs<ExtArgs>
        appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
        vaccinations?: boolean | Patient$vaccinationsArgs<ExtArgs>
        allergies?: boolean | Patient$allergiesArgs<ExtArgs>
        medications?: boolean | Patient$medicationsArgs<ExtArgs>
        examResults?: boolean | Patient$examResultsArgs<ExtArgs>
        comorbidities?: boolean | Patient$comorbiditiesArgs<ExtArgs>
        surgeries?: boolean | Patient$surgeriesArgs<ExtArgs>
        healthPlans?: boolean | Patient$healthPlansArgs<ExtArgs>
        _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["patient"]>;
    export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        name?: boolean
        cpf?: boolean
        cellphone?: boolean
        email?: boolean
        sex?: boolean
        responsible?: boolean
        nationality?: boolean
        race?: boolean
        state?: boolean
        city?: boolean
        zipcode?: boolean
        neighborhood?: boolean
        street?: boolean
        number?: boolean
        complement?: boolean
        occupation?: boolean
        sexualOrientation?: boolean
        civilStatus?: boolean
        bloodType?: boolean
        genderIdentity?: boolean
        password?: boolean
        userId?: boolean
        createdByUser?: boolean | Patient$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Patient$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Patient$deletedByUserArgs<ExtArgs>
        organization?: boolean | Patient$organizationArgs<ExtArgs>
        user?: boolean | Patient$userArgs<ExtArgs>
    }, ExtArgs["result"]["patient"]>;
    export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        name?: boolean
        cpf?: boolean
        cellphone?: boolean
        email?: boolean
        sex?: boolean
        responsible?: boolean
        nationality?: boolean
        race?: boolean
        state?: boolean
        city?: boolean
        zipcode?: boolean
        neighborhood?: boolean
        street?: boolean
        number?: boolean
        complement?: boolean
        occupation?: boolean
        sexualOrientation?: boolean
        civilStatus?: boolean
        bloodType?: boolean
        genderIdentity?: boolean
        password?: boolean
        userId?: boolean
        createdByUser?: boolean | Patient$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Patient$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Patient$deletedByUserArgs<ExtArgs>
        organization?: boolean | Patient$organizationArgs<ExtArgs>
        user?: boolean | Patient$userArgs<ExtArgs>
    }, ExtArgs["result"]["patient"]>;
    export type PatientSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        name?: boolean
        cpf?: boolean
        cellphone?: boolean
        email?: boolean
        sex?: boolean
        responsible?: boolean
        nationality?: boolean
        race?: boolean
        state?: boolean
        city?: boolean
        zipcode?: boolean
        neighborhood?: boolean
        street?: boolean
        number?: boolean
        complement?: boolean
        occupation?: boolean
        sexualOrientation?: boolean
        civilStatus?: boolean
        bloodType?: boolean
        genderIdentity?: boolean
        password?: boolean
        userId?: boolean
    };
    export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "name" | "cpf" | "cellphone" | "email" | "sex" | "responsible" | "nationality" | "race" | "state" | "city" | "zipcode" | "neighborhood" | "street" | "number" | "complement" | "occupation" | "sexualOrientation" | "civilStatus" | "bloodType" | "genderIdentity" | "password" | "userId", ExtArgs["result"]["patient"]>;
    export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Patient$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Patient$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Patient$deletedByUserArgs<ExtArgs>
        organization?: boolean | Patient$organizationArgs<ExtArgs>
        user?: boolean | Patient$userArgs<ExtArgs>
        appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
        vaccinations?: boolean | Patient$vaccinationsArgs<ExtArgs>
        allergies?: boolean | Patient$allergiesArgs<ExtArgs>
        medications?: boolean | Patient$medicationsArgs<ExtArgs>
        examResults?: boolean | Patient$examResultsArgs<ExtArgs>
        comorbidities?: boolean | Patient$comorbiditiesArgs<ExtArgs>
        surgeries?: boolean | Patient$surgeriesArgs<ExtArgs>
        healthPlans?: boolean | Patient$healthPlansArgs<ExtArgs>
        _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Patient$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Patient$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Patient$deletedByUserArgs<ExtArgs>
        organization?: boolean | Patient$organizationArgs<ExtArgs>
        user?: boolean | Patient$userArgs<ExtArgs>
    };
    export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Patient$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Patient$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Patient$deletedByUserArgs<ExtArgs>
        organization?: boolean | Patient$organizationArgs<ExtArgs>
        user?: boolean | Patient$userArgs<ExtArgs>
    };
    export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Patient"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            user: Prisma.$UserPayload<ExtArgs> | null
            appointments: Prisma.$AppointmentPayload<ExtArgs>[]
            vaccinations: Prisma.$VaccinationsPayload<ExtArgs>[]
            allergies: Prisma.$AllergiesPayload<ExtArgs>[]
            medications: Prisma.$MedicationsPayload<ExtArgs>[]
            examResults: Prisma.$ExamResultsPayload<ExtArgs>[]
            comorbidities: Prisma.$ComorbiditiesPayload<ExtArgs>[]
            surgeries: Prisma.$SurgeriesPayload<ExtArgs>[]
            healthPlans: Prisma.$HealthPlansPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            name: string
            cpf: string
            cellphone: string
            email: string
            sex: $Enums.Sex | null
            responsible: string | null
            nationality: string
            race: $Enums.Race | null
            state: string
            city: string
            zipcode: string
            neighborhood: string
            street: string
            number: string
            complement: string | null
            occupation: string
            sexualOrientation: string | null
            civilStatus: $Enums.CivilStatus | null
            bloodType: $Enums.BloodType | null
            genderIdentity: $Enums.GenderIdentity | null
            password: string | null
            userId: string | null
        }, ExtArgs["result"]["patient"]>
        composites: {}
    };
    type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>;
    type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: PatientCountAggregateInputType | true
    };
    /**
     * Patient findUnique
     */
    export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * Filter, which Patient to fetch.
         */
        where: PatientWhereUniqueInput
    };
    /**
     * Patient findUniqueOrThrow
     */
    export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * Filter, which Patient to fetch.
         */
        where: PatientWhereUniqueInput
    };
    /**
     * Patient findFirst
     */
    export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * Filter, which Patient to fetch.
         */
        where?: PatientWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Patients to fetch.
         */
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Patients.
         */
        cursor?: PatientWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Patients from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Patients.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Patients.
         */
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * Patient findFirstOrThrow
     */
    export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * Filter, which Patient to fetch.
         */
        where?: PatientWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Patients to fetch.
         */
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Patients.
         */
        cursor?: PatientWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Patients from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Patients.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Patients.
         */
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * Patient findMany
     */
    export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * Filter, which Patients to fetch.
         */
        where?: PatientWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Patients to fetch.
         */
        orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Patients.
         */
        cursor?: PatientWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Patients from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Patients.
         */
        skip?: number
        distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
    };
    /**
     * Patient create
     */
    export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * The data needed to create a Patient.
         */
        data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    };
    /**
     * Patient createMany
     */
    export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Patients.
         */
        data: PatientCreateManyInput | PatientCreateManyInput[]
    };
    /**
     * Patient createManyAndReturn
     */
    export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * The data used to create many Patients.
         */
        data: PatientCreateManyInput | PatientCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Patient update
     */
    export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * The data needed to update a Patient.
         */
        data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
        /**
         * Choose, which Patient to update.
         */
        where: PatientWhereUniqueInput
    };
    /**
     * Patient updateMany
     */
    export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Patients.
         */
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
        /**
         * Filter which Patients to update
         */
        where?: PatientWhereInput
        /**
         * Limit how many Patients to update.
         */
        limit?: number
    };
    /**
     * Patient updateManyAndReturn
     */
    export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * The data used to update Patients.
         */
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
        /**
         * Filter which Patients to update
         */
        where?: PatientWhereInput
        /**
         * Limit how many Patients to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Patient upsert
     */
    export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * The filter to search for the Patient to update in case it exists.
         */
        where: PatientWhereUniqueInput
        /**
         * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
         */
        create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
        /**
         * In case the Patient was found with the provided `where` argument, update it with this data.
         */
        update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    };
    /**
     * Patient delete
     */
    export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        /**
         * Filter which Patient to delete.
         */
        where: PatientWhereUniqueInput
    };
    /**
     * Patient deleteMany
     */
    export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Patients to delete
         */
        where?: PatientWhereInput
        /**
         * Limit how many Patients to delete.
         */
        limit?: number
    };
    /**
     * Patient.createdByUser
     */
    export type Patient$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Patient.updatedByUser
     */
    export type Patient$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Patient.deletedByUser
     */
    export type Patient$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Patient.organization
     */
    export type Patient$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Patient.user
     */
    export type Patient$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Patient.appointments
     */
    export type Patient$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
        orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
        cursor?: AppointmentWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
    };
    /**
     * Patient.vaccinations
     */
    export type Patient$vaccinationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        cursor?: VaccinationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * Patient.allergies
     */
    export type Patient$allergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * Patient.medications
     */
    export type Patient$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * Patient.examResults
     */
    export type Patient$examResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        cursor?: ExamResultsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * Patient.comorbidities
     */
    export type Patient$comorbiditiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * Patient.surgeries
     */
    export type Patient$surgeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        cursor?: SurgeriesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * Patient.healthPlans
     */
    export type Patient$healthPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        cursor?: HealthPlansWhereUniqueInput
        take?: number
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * Patient without action
     */
    export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
    };
    /**
     * Model Vaccinations
     */
    export type AggregateVaccinations = {
        _count: VaccinationsCountAggregateOutputType | null
        _min: VaccinationsMinAggregateOutputType | null
        _max: VaccinationsMaxAggregateOutputType | null
    };
    export type VaccinationsMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        vaccinationsValuesId: string | null
    };
    export type VaccinationsMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        vaccinationsValuesId: string | null
    };
    export type VaccinationsCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        vaccinationsValuesId: number
        _all: number
    };
    export type VaccinationsMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        vaccinationsValuesId?: true
    };
    export type VaccinationsMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        vaccinationsValuesId?: true
    };
    export type VaccinationsCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        vaccinationsValuesId?: true
        _all?: true
    };
    export type VaccinationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Vaccinations to aggregate.
         */
        where?: VaccinationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Vaccinations to fetch.
         */
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: VaccinationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Vaccinations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Vaccinations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Vaccinations
        **/
        _count?: true | VaccinationsCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: VaccinationsMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: VaccinationsMaxAggregateInputType
    };
    export type GetVaccinationsAggregateType<T extends VaccinationsAggregateArgs> = {
        [P in keyof T & keyof AggregateVaccinations]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVaccinations[P]>
        : GetScalarType<T[P], AggregateVaccinations[P]>
    };
    export type VaccinationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithAggregationInput | VaccinationsOrderByWithAggregationInput[]
        by: VaccinationsScalarFieldEnum[] | VaccinationsScalarFieldEnum
        having?: VaccinationsScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: VaccinationsCountAggregateInputType | true
        _min?: VaccinationsMinAggregateInputType
        _max?: VaccinationsMaxAggregateInputType
    };
    export type VaccinationsGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string
        vaccinationsValuesId: string
        _count: VaccinationsCountAggregateOutputType | null
        _min: VaccinationsMinAggregateOutputType | null
        _max: VaccinationsMaxAggregateOutputType | null
    };
    type GetVaccinationsGroupByPayload<T extends VaccinationsGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<VaccinationsGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof VaccinationsGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], VaccinationsGroupByOutputType[P]>
                : GetScalarType<T[P], VaccinationsGroupByOutputType[P]>
            }
        >
    >;
    export type VaccinationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        vaccinationsValuesId?: boolean
        createdByUser?: boolean | Vaccinations$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Vaccinations$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Vaccinations$deletedByUserArgs<ExtArgs>
        organization?: boolean | Vaccinations$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        vaccinationsValues?: boolean | VaccinationsValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["vaccinations"]>;
    export type VaccinationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        vaccinationsValuesId?: boolean
        createdByUser?: boolean | Vaccinations$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Vaccinations$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Vaccinations$deletedByUserArgs<ExtArgs>
        organization?: boolean | Vaccinations$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        vaccinationsValues?: boolean | VaccinationsValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["vaccinations"]>;
    export type VaccinationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        vaccinationsValuesId?: boolean
        createdByUser?: boolean | Vaccinations$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Vaccinations$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Vaccinations$deletedByUserArgs<ExtArgs>
        organization?: boolean | Vaccinations$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        vaccinationsValues?: boolean | VaccinationsValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["vaccinations"]>;
    export type VaccinationsSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        vaccinationsValuesId?: boolean
    };
    export type VaccinationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "vaccinationsValuesId", ExtArgs["result"]["vaccinations"]>;
    export type VaccinationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Vaccinations$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Vaccinations$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Vaccinations$deletedByUserArgs<ExtArgs>
        organization?: boolean | Vaccinations$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        vaccinationsValues?: boolean | VaccinationsValuesDefaultArgs<ExtArgs>
    };
    export type VaccinationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Vaccinations$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Vaccinations$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Vaccinations$deletedByUserArgs<ExtArgs>
        organization?: boolean | Vaccinations$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        vaccinationsValues?: boolean | VaccinationsValuesDefaultArgs<ExtArgs>
    };
    export type VaccinationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Vaccinations$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Vaccinations$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Vaccinations$deletedByUserArgs<ExtArgs>
        organization?: boolean | Vaccinations$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        vaccinationsValues?: boolean | VaccinationsValuesDefaultArgs<ExtArgs>
    };
    export type $VaccinationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Vaccinations"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs>
            vaccinationsValues: Prisma.$VaccinationsValuesPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string
            vaccinationsValuesId: string
        }, ExtArgs["result"]["vaccinations"]>
        composites: {}
    };
    type VaccinationsGetPayload<S extends boolean | null | undefined | VaccinationsDefaultArgs> = $Result.GetResult<Prisma.$VaccinationsPayload, S>;
    type VaccinationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<VaccinationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: VaccinationsCountAggregateInputType | true
    };
    /**
     * Vaccinations findUnique
     */
    export type VaccinationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * Filter, which Vaccinations to fetch.
         */
        where: VaccinationsWhereUniqueInput
    };
    /**
     * Vaccinations findUniqueOrThrow
     */
    export type VaccinationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * Filter, which Vaccinations to fetch.
         */
        where: VaccinationsWhereUniqueInput
    };
    /**
     * Vaccinations findFirst
     */
    export type VaccinationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * Filter, which Vaccinations to fetch.
         */
        where?: VaccinationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Vaccinations to fetch.
         */
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Vaccinations.
         */
        cursor?: VaccinationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Vaccinations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Vaccinations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Vaccinations.
         */
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * Vaccinations findFirstOrThrow
     */
    export type VaccinationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * Filter, which Vaccinations to fetch.
         */
        where?: VaccinationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Vaccinations to fetch.
         */
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Vaccinations.
         */
        cursor?: VaccinationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Vaccinations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Vaccinations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Vaccinations.
         */
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * Vaccinations findMany
     */
    export type VaccinationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * Filter, which Vaccinations to fetch.
         */
        where?: VaccinationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Vaccinations to fetch.
         */
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Vaccinations.
         */
        cursor?: VaccinationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Vaccinations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Vaccinations.
         */
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * Vaccinations create
     */
    export type VaccinationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * The data needed to create a Vaccinations.
         */
        data: XOR<VaccinationsCreateInput, VaccinationsUncheckedCreateInput>
    };
    /**
     * Vaccinations createMany
     */
    export type VaccinationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Vaccinations.
         */
        data: VaccinationsCreateManyInput | VaccinationsCreateManyInput[]
    };
    /**
     * Vaccinations createManyAndReturn
     */
    export type VaccinationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * The data used to create many Vaccinations.
         */
        data: VaccinationsCreateManyInput | VaccinationsCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Vaccinations update
     */
    export type VaccinationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * The data needed to update a Vaccinations.
         */
        data: XOR<VaccinationsUpdateInput, VaccinationsUncheckedUpdateInput>
        /**
         * Choose, which Vaccinations to update.
         */
        where: VaccinationsWhereUniqueInput
    };
    /**
     * Vaccinations updateMany
     */
    export type VaccinationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Vaccinations.
         */
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyInput>
        /**
         * Filter which Vaccinations to update
         */
        where?: VaccinationsWhereInput
        /**
         * Limit how many Vaccinations to update.
         */
        limit?: number
    };
    /**
     * Vaccinations updateManyAndReturn
     */
    export type VaccinationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * The data used to update Vaccinations.
         */
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyInput>
        /**
         * Filter which Vaccinations to update
         */
        where?: VaccinationsWhereInput
        /**
         * Limit how many Vaccinations to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Vaccinations upsert
     */
    export type VaccinationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * The filter to search for the Vaccinations to update in case it exists.
         */
        where: VaccinationsWhereUniqueInput
        /**
         * In case the Vaccinations found by the `where` argument doesn't exist, create a new Vaccinations with this data.
         */
        create: XOR<VaccinationsCreateInput, VaccinationsUncheckedCreateInput>
        /**
         * In case the Vaccinations was found with the provided `where` argument, update it with this data.
         */
        update: XOR<VaccinationsUpdateInput, VaccinationsUncheckedUpdateInput>
    };
    /**
     * Vaccinations delete
     */
    export type VaccinationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        /**
         * Filter which Vaccinations to delete.
         */
        where: VaccinationsWhereUniqueInput
    };
    /**
     * Vaccinations deleteMany
     */
    export type VaccinationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Vaccinations to delete
         */
        where?: VaccinationsWhereInput
        /**
         * Limit how many Vaccinations to delete.
         */
        limit?: number
    };
    /**
     * Vaccinations.createdByUser
     */
    export type Vaccinations$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Vaccinations.updatedByUser
     */
    export type Vaccinations$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Vaccinations.deletedByUser
     */
    export type Vaccinations$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Vaccinations.organization
     */
    export type Vaccinations$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Vaccinations without action
     */
    export type VaccinationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
    };
    /**
     * Model VaccinationsValues
     */
    export type AggregateVaccinationsValues = {
        _count: VaccinationsValuesCountAggregateOutputType | null
        _min: VaccinationsValuesMinAggregateOutputType | null
        _max: VaccinationsValuesMaxAggregateOutputType | null
    };
    export type VaccinationsValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type VaccinationsValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type VaccinationsValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type VaccinationsValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type VaccinationsValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type VaccinationsValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type VaccinationsValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which VaccinationsValues to aggregate.
         */
        where?: VaccinationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of VaccinationsValues to fetch.
         */
        orderBy?: VaccinationsValuesOrderByWithRelationInput | VaccinationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: VaccinationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` VaccinationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` VaccinationsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned VaccinationsValues
        **/
        _count?: true | VaccinationsValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: VaccinationsValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: VaccinationsValuesMaxAggregateInputType
    };
    export type GetVaccinationsValuesAggregateType<T extends VaccinationsValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateVaccinationsValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVaccinationsValues[P]>
        : GetScalarType<T[P], AggregateVaccinationsValues[P]>
    };
    export type VaccinationsValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: VaccinationsValuesWhereInput
        orderBy?: VaccinationsValuesOrderByWithAggregationInput | VaccinationsValuesOrderByWithAggregationInput[]
        by: VaccinationsValuesScalarFieldEnum[] | VaccinationsValuesScalarFieldEnum
        having?: VaccinationsValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: VaccinationsValuesCountAggregateInputType | true
        _min?: VaccinationsValuesMinAggregateInputType
        _max?: VaccinationsValuesMaxAggregateInputType
    };
    export type VaccinationsValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: VaccinationsValuesCountAggregateOutputType | null
        _min: VaccinationsValuesMinAggregateOutputType | null
        _max: VaccinationsValuesMaxAggregateOutputType | null
    };
    type GetVaccinationsValuesGroupByPayload<T extends VaccinationsValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<VaccinationsValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof VaccinationsValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], VaccinationsValuesGroupByOutputType[P]>
                : GetScalarType<T[P], VaccinationsValuesGroupByOutputType[P]>
            }
        >
    >;
    export type VaccinationsValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        vaccinations?: boolean | VaccinationsValues$vaccinationsArgs<ExtArgs>
        _count?: boolean | VaccinationsValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["vaccinationsValues"]>;
    export type VaccinationsValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["vaccinationsValues"]>;
    export type VaccinationsValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["vaccinationsValues"]>;
    export type VaccinationsValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type VaccinationsValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["vaccinationsValues"]>;
    export type VaccinationsValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        vaccinations?: boolean | VaccinationsValues$vaccinationsArgs<ExtArgs>
        _count?: boolean | VaccinationsValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type VaccinationsValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type VaccinationsValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $VaccinationsValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "VaccinationsValues"
        objects: {
            vaccinations: Prisma.$VaccinationsPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["vaccinationsValues"]>
        composites: {}
    };
    type VaccinationsValuesGetPayload<S extends boolean | null | undefined | VaccinationsValuesDefaultArgs> = $Result.GetResult<Prisma.$VaccinationsValuesPayload, S>;
    type VaccinationsValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<VaccinationsValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: VaccinationsValuesCountAggregateInputType | true
    };
    /**
     * VaccinationsValues findUnique
     */
    export type VaccinationsValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which VaccinationsValues to fetch.
         */
        where: VaccinationsValuesWhereUniqueInput
    };
    /**
     * VaccinationsValues findUniqueOrThrow
     */
    export type VaccinationsValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which VaccinationsValues to fetch.
         */
        where: VaccinationsValuesWhereUniqueInput
    };
    /**
     * VaccinationsValues findFirst
     */
    export type VaccinationsValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which VaccinationsValues to fetch.
         */
        where?: VaccinationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of VaccinationsValues to fetch.
         */
        orderBy?: VaccinationsValuesOrderByWithRelationInput | VaccinationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for VaccinationsValues.
         */
        cursor?: VaccinationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` VaccinationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` VaccinationsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of VaccinationsValues.
         */
        distinct?: VaccinationsValuesScalarFieldEnum | VaccinationsValuesScalarFieldEnum[]
    };
    /**
     * VaccinationsValues findFirstOrThrow
     */
    export type VaccinationsValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which VaccinationsValues to fetch.
         */
        where?: VaccinationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of VaccinationsValues to fetch.
         */
        orderBy?: VaccinationsValuesOrderByWithRelationInput | VaccinationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for VaccinationsValues.
         */
        cursor?: VaccinationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` VaccinationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` VaccinationsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of VaccinationsValues.
         */
        distinct?: VaccinationsValuesScalarFieldEnum | VaccinationsValuesScalarFieldEnum[]
    };
    /**
     * VaccinationsValues findMany
     */
    export type VaccinationsValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which VaccinationsValues to fetch.
         */
        where?: VaccinationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of VaccinationsValues to fetch.
         */
        orderBy?: VaccinationsValuesOrderByWithRelationInput | VaccinationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing VaccinationsValues.
         */
        cursor?: VaccinationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` VaccinationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` VaccinationsValues.
         */
        skip?: number
        distinct?: VaccinationsValuesScalarFieldEnum | VaccinationsValuesScalarFieldEnum[]
    };
    /**
     * VaccinationsValues create
     */
    export type VaccinationsValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a VaccinationsValues.
         */
        data: XOR<VaccinationsValuesCreateInput, VaccinationsValuesUncheckedCreateInput>
    };
    /**
     * VaccinationsValues createMany
     */
    export type VaccinationsValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many VaccinationsValues.
         */
        data: VaccinationsValuesCreateManyInput | VaccinationsValuesCreateManyInput[]
    };
    /**
     * VaccinationsValues createManyAndReturn
     */
    export type VaccinationsValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * The data used to create many VaccinationsValues.
         */
        data: VaccinationsValuesCreateManyInput | VaccinationsValuesCreateManyInput[]
    };
    /**
     * VaccinationsValues update
     */
    export type VaccinationsValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a VaccinationsValues.
         */
        data: XOR<VaccinationsValuesUpdateInput, VaccinationsValuesUncheckedUpdateInput>
        /**
         * Choose, which VaccinationsValues to update.
         */
        where: VaccinationsValuesWhereUniqueInput
    };
    /**
     * VaccinationsValues updateMany
     */
    export type VaccinationsValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update VaccinationsValues.
         */
        data: XOR<VaccinationsValuesUpdateManyMutationInput, VaccinationsValuesUncheckedUpdateManyInput>
        /**
         * Filter which VaccinationsValues to update
         */
        where?: VaccinationsValuesWhereInput
        /**
         * Limit how many VaccinationsValues to update.
         */
        limit?: number
    };
    /**
     * VaccinationsValues updateManyAndReturn
     */
    export type VaccinationsValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * The data used to update VaccinationsValues.
         */
        data: XOR<VaccinationsValuesUpdateManyMutationInput, VaccinationsValuesUncheckedUpdateManyInput>
        /**
         * Filter which VaccinationsValues to update
         */
        where?: VaccinationsValuesWhereInput
        /**
         * Limit how many VaccinationsValues to update.
         */
        limit?: number
    };
    /**
     * VaccinationsValues upsert
     */
    export type VaccinationsValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the VaccinationsValues to update in case it exists.
         */
        where: VaccinationsValuesWhereUniqueInput
        /**
         * In case the VaccinationsValues found by the `where` argument doesn't exist, create a new VaccinationsValues with this data.
         */
        create: XOR<VaccinationsValuesCreateInput, VaccinationsValuesUncheckedCreateInput>
        /**
         * In case the VaccinationsValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<VaccinationsValuesUpdateInput, VaccinationsValuesUncheckedUpdateInput>
    };
    /**
     * VaccinationsValues delete
     */
    export type VaccinationsValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
        /**
         * Filter which VaccinationsValues to delete.
         */
        where: VaccinationsValuesWhereUniqueInput
    };
    /**
     * VaccinationsValues deleteMany
     */
    export type VaccinationsValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which VaccinationsValues to delete
         */
        where?: VaccinationsValuesWhereInput
        /**
         * Limit how many VaccinationsValues to delete.
         */
        limit?: number
    };
    /**
     * VaccinationsValues.vaccinations
     */
    export type VaccinationsValues$vaccinationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Vaccinations
         */
        select?: VaccinationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Vaccinations
         */
        omit?: VaccinationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsInclude<ExtArgs> | null
        where?: VaccinationsWhereInput
        orderBy?: VaccinationsOrderByWithRelationInput | VaccinationsOrderByWithRelationInput[]
        cursor?: VaccinationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: VaccinationsScalarFieldEnum | VaccinationsScalarFieldEnum[]
    };
    /**
     * VaccinationsValues without action
     */
    export type VaccinationsValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the VaccinationsValues
         */
        select?: VaccinationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the VaccinationsValues
         */
        omit?: VaccinationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: VaccinationsValuesInclude<ExtArgs> | null
    };
    /**
     * Model Allergies
     */
    export type AggregateAllergies = {
        _count: AllergiesCountAggregateOutputType | null
        _min: AllergiesMinAggregateOutputType | null
        _max: AllergiesMaxAggregateOutputType | null
    };
    export type AllergiesMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        allergiesValuesId: string | null
        appointmentId: string | null
    };
    export type AllergiesMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        allergiesValuesId: string | null
        appointmentId: string | null
    };
    export type AllergiesCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        allergiesValuesId: number
        appointmentId: number
        _all: number
    };
    export type AllergiesMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        allergiesValuesId?: true
        appointmentId?: true
    };
    export type AllergiesMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        allergiesValuesId?: true
        appointmentId?: true
    };
    export type AllergiesCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        allergiesValuesId?: true
        appointmentId?: true
        _all?: true
    };
    export type AllergiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Allergies to aggregate.
         */
        where?: AllergiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Allergies to fetch.
         */
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: AllergiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Allergies from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Allergies.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Allergies
        **/
        _count?: true | AllergiesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: AllergiesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: AllergiesMaxAggregateInputType
    };
    export type GetAllergiesAggregateType<T extends AllergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergies]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergies[P]>
        : GetScalarType<T[P], AggregateAllergies[P]>
    };
    export type AllergiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithAggregationInput | AllergiesOrderByWithAggregationInput[]
        by: AllergiesScalarFieldEnum[] | AllergiesScalarFieldEnum
        having?: AllergiesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: AllergiesCountAggregateInputType | true
        _min?: AllergiesMinAggregateInputType
        _max?: AllergiesMaxAggregateInputType
    };
    export type AllergiesGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string | null
        allergiesValuesId: string
        appointmentId: string | null
        _count: AllergiesCountAggregateOutputType | null
        _min: AllergiesMinAggregateOutputType | null
        _max: AllergiesMaxAggregateOutputType | null
    };
    type GetAllergiesGroupByPayload<T extends AllergiesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<AllergiesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof AllergiesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
                : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
            }
        >
    >;
    export type AllergiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        allergiesValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Allergies$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Allergies$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Allergies$deletedByUserArgs<ExtArgs>
        organization?: boolean | Allergies$organizationArgs<ExtArgs>
        patient?: boolean | Allergies$patientArgs<ExtArgs>
        allergiesValues?: boolean | AllergiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Allergies$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["allergies"]>;
    export type AllergiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        allergiesValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Allergies$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Allergies$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Allergies$deletedByUserArgs<ExtArgs>
        organization?: boolean | Allergies$organizationArgs<ExtArgs>
        patient?: boolean | Allergies$patientArgs<ExtArgs>
        allergiesValues?: boolean | AllergiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Allergies$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["allergies"]>;
    export type AllergiesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        allergiesValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Allergies$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Allergies$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Allergies$deletedByUserArgs<ExtArgs>
        organization?: boolean | Allergies$organizationArgs<ExtArgs>
        patient?: boolean | Allergies$patientArgs<ExtArgs>
        allergiesValues?: boolean | AllergiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Allergies$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["allergies"]>;
    export type AllergiesSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        allergiesValuesId?: boolean
        appointmentId?: boolean
    };
    export type AllergiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "allergiesValuesId" | "appointmentId", ExtArgs["result"]["allergies"]>;
    export type AllergiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Allergies$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Allergies$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Allergies$deletedByUserArgs<ExtArgs>
        organization?: boolean | Allergies$organizationArgs<ExtArgs>
        patient?: boolean | Allergies$patientArgs<ExtArgs>
        allergiesValues?: boolean | AllergiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Allergies$appointmentArgs<ExtArgs>
    };
    export type AllergiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Allergies$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Allergies$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Allergies$deletedByUserArgs<ExtArgs>
        organization?: boolean | Allergies$organizationArgs<ExtArgs>
        patient?: boolean | Allergies$patientArgs<ExtArgs>
        allergiesValues?: boolean | AllergiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Allergies$appointmentArgs<ExtArgs>
    };
    export type AllergiesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Allergies$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Allergies$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Allergies$deletedByUserArgs<ExtArgs>
        organization?: boolean | Allergies$organizationArgs<ExtArgs>
        patient?: boolean | Allergies$patientArgs<ExtArgs>
        allergiesValues?: boolean | AllergiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Allergies$appointmentArgs<ExtArgs>
    };
    export type $AllergiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Allergies"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs> | null
            allergiesValues: Prisma.$AllergiesValuesPayload<ExtArgs>
            appointment: Prisma.$AppointmentPayload<ExtArgs> | null
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string | null
            allergiesValuesId: string
            appointmentId: string | null
        }, ExtArgs["result"]["allergies"]>
        composites: {}
    };
    type AllergiesGetPayload<S extends boolean | null | undefined | AllergiesDefaultArgs> = $Result.GetResult<Prisma.$AllergiesPayload, S>;
    type AllergiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<AllergiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: AllergiesCountAggregateInputType | true
    };
    /**
     * Allergies findUnique
     */
    export type AllergiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * Filter, which Allergies to fetch.
         */
        where: AllergiesWhereUniqueInput
    };
    /**
     * Allergies findUniqueOrThrow
     */
    export type AllergiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * Filter, which Allergies to fetch.
         */
        where: AllergiesWhereUniqueInput
    };
    /**
     * Allergies findFirst
     */
    export type AllergiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * Filter, which Allergies to fetch.
         */
        where?: AllergiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Allergies to fetch.
         */
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Allergies.
         */
        cursor?: AllergiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Allergies from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Allergies.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Allergies.
         */
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * Allergies findFirstOrThrow
     */
    export type AllergiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * Filter, which Allergies to fetch.
         */
        where?: AllergiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Allergies to fetch.
         */
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Allergies.
         */
        cursor?: AllergiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Allergies from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Allergies.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Allergies.
         */
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * Allergies findMany
     */
    export type AllergiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * Filter, which Allergies to fetch.
         */
        where?: AllergiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Allergies to fetch.
         */
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Allergies.
         */
        cursor?: AllergiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Allergies from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Allergies.
         */
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * Allergies create
     */
    export type AllergiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * The data needed to create a Allergies.
         */
        data: XOR<AllergiesCreateInput, AllergiesUncheckedCreateInput>
    };
    /**
     * Allergies createMany
     */
    export type AllergiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Allergies.
         */
        data: AllergiesCreateManyInput | AllergiesCreateManyInput[]
    };
    /**
     * Allergies createManyAndReturn
     */
    export type AllergiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * The data used to create many Allergies.
         */
        data: AllergiesCreateManyInput | AllergiesCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Allergies update
     */
    export type AllergiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * The data needed to update a Allergies.
         */
        data: XOR<AllergiesUpdateInput, AllergiesUncheckedUpdateInput>
        /**
         * Choose, which Allergies to update.
         */
        where: AllergiesWhereUniqueInput
    };
    /**
     * Allergies updateMany
     */
    export type AllergiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Allergies.
         */
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyInput>
        /**
         * Filter which Allergies to update
         */
        where?: AllergiesWhereInput
        /**
         * Limit how many Allergies to update.
         */
        limit?: number
    };
    /**
     * Allergies updateManyAndReturn
     */
    export type AllergiesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * The data used to update Allergies.
         */
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyInput>
        /**
         * Filter which Allergies to update
         */
        where?: AllergiesWhereInput
        /**
         * Limit how many Allergies to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Allergies upsert
     */
    export type AllergiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * The filter to search for the Allergies to update in case it exists.
         */
        where: AllergiesWhereUniqueInput
        /**
         * In case the Allergies found by the `where` argument doesn't exist, create a new Allergies with this data.
         */
        create: XOR<AllergiesCreateInput, AllergiesUncheckedCreateInput>
        /**
         * In case the Allergies was found with the provided `where` argument, update it with this data.
         */
        update: XOR<AllergiesUpdateInput, AllergiesUncheckedUpdateInput>
    };
    /**
     * Allergies delete
     */
    export type AllergiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        /**
         * Filter which Allergies to delete.
         */
        where: AllergiesWhereUniqueInput
    };
    /**
     * Allergies deleteMany
     */
    export type AllergiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Allergies to delete
         */
        where?: AllergiesWhereInput
        /**
         * Limit how many Allergies to delete.
         */
        limit?: number
    };
    /**
     * Allergies.createdByUser
     */
    export type Allergies$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Allergies.updatedByUser
     */
    export type Allergies$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Allergies.deletedByUser
     */
    export type Allergies$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Allergies.organization
     */
    export type Allergies$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Allergies.patient
     */
    export type Allergies$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
    };
    /**
     * Allergies.appointment
     */
    export type Allergies$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
    };
    /**
     * Allergies without action
     */
    export type AllergiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
    };
    /**
     * Model AllergiesValues
     */
    export type AggregateAllergiesValues = {
        _count: AllergiesValuesCountAggregateOutputType | null
        _min: AllergiesValuesMinAggregateOutputType | null
        _max: AllergiesValuesMaxAggregateOutputType | null
    };
    export type AllergiesValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type AllergiesValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type AllergiesValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type AllergiesValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type AllergiesValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type AllergiesValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type AllergiesValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which AllergiesValues to aggregate.
         */
        where?: AllergiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AllergiesValues to fetch.
         */
        orderBy?: AllergiesValuesOrderByWithRelationInput | AllergiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: AllergiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AllergiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AllergiesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned AllergiesValues
        **/
        _count?: true | AllergiesValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: AllergiesValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: AllergiesValuesMaxAggregateInputType
    };
    export type GetAllergiesValuesAggregateType<T extends AllergiesValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergiesValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergiesValues[P]>
        : GetScalarType<T[P], AggregateAllergiesValues[P]>
    };
    export type AllergiesValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: AllergiesValuesWhereInput
        orderBy?: AllergiesValuesOrderByWithAggregationInput | AllergiesValuesOrderByWithAggregationInput[]
        by: AllergiesValuesScalarFieldEnum[] | AllergiesValuesScalarFieldEnum
        having?: AllergiesValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: AllergiesValuesCountAggregateInputType | true
        _min?: AllergiesValuesMinAggregateInputType
        _max?: AllergiesValuesMaxAggregateInputType
    };
    export type AllergiesValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: AllergiesValuesCountAggregateOutputType | null
        _min: AllergiesValuesMinAggregateOutputType | null
        _max: AllergiesValuesMaxAggregateOutputType | null
    };
    type GetAllergiesValuesGroupByPayload<T extends AllergiesValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<AllergiesValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof AllergiesValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], AllergiesValuesGroupByOutputType[P]>
                : GetScalarType<T[P], AllergiesValuesGroupByOutputType[P]>
            }
        >
    >;
    export type AllergiesValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        allergies?: boolean | AllergiesValues$allergiesArgs<ExtArgs>
        _count?: boolean | AllergiesValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["allergiesValues"]>;
    export type AllergiesValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["allergiesValues"]>;
    export type AllergiesValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["allergiesValues"]>;
    export type AllergiesValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type AllergiesValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["allergiesValues"]>;
    export type AllergiesValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        allergies?: boolean | AllergiesValues$allergiesArgs<ExtArgs>
        _count?: boolean | AllergiesValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type AllergiesValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type AllergiesValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $AllergiesValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "AllergiesValues"
        objects: {
            allergies: Prisma.$AllergiesPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["allergiesValues"]>
        composites: {}
    };
    type AllergiesValuesGetPayload<S extends boolean | null | undefined | AllergiesValuesDefaultArgs> = $Result.GetResult<Prisma.$AllergiesValuesPayload, S>;
    type AllergiesValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<AllergiesValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: AllergiesValuesCountAggregateInputType | true
    };
    /**
     * AllergiesValues findUnique
     */
    export type AllergiesValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which AllergiesValues to fetch.
         */
        where: AllergiesValuesWhereUniqueInput
    };
    /**
     * AllergiesValues findUniqueOrThrow
     */
    export type AllergiesValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which AllergiesValues to fetch.
         */
        where: AllergiesValuesWhereUniqueInput
    };
    /**
     * AllergiesValues findFirst
     */
    export type AllergiesValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which AllergiesValues to fetch.
         */
        where?: AllergiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AllergiesValues to fetch.
         */
        orderBy?: AllergiesValuesOrderByWithRelationInput | AllergiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for AllergiesValues.
         */
        cursor?: AllergiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AllergiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AllergiesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of AllergiesValues.
         */
        distinct?: AllergiesValuesScalarFieldEnum | AllergiesValuesScalarFieldEnum[]
    };
    /**
     * AllergiesValues findFirstOrThrow
     */
    export type AllergiesValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which AllergiesValues to fetch.
         */
        where?: AllergiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AllergiesValues to fetch.
         */
        orderBy?: AllergiesValuesOrderByWithRelationInput | AllergiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for AllergiesValues.
         */
        cursor?: AllergiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AllergiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AllergiesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of AllergiesValues.
         */
        distinct?: AllergiesValuesScalarFieldEnum | AllergiesValuesScalarFieldEnum[]
    };
    /**
     * AllergiesValues findMany
     */
    export type AllergiesValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which AllergiesValues to fetch.
         */
        where?: AllergiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of AllergiesValues to fetch.
         */
        orderBy?: AllergiesValuesOrderByWithRelationInput | AllergiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing AllergiesValues.
         */
        cursor?: AllergiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` AllergiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` AllergiesValues.
         */
        skip?: number
        distinct?: AllergiesValuesScalarFieldEnum | AllergiesValuesScalarFieldEnum[]
    };
    /**
     * AllergiesValues create
     */
    export type AllergiesValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a AllergiesValues.
         */
        data: XOR<AllergiesValuesCreateInput, AllergiesValuesUncheckedCreateInput>
    };
    /**
     * AllergiesValues createMany
     */
    export type AllergiesValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many AllergiesValues.
         */
        data: AllergiesValuesCreateManyInput | AllergiesValuesCreateManyInput[]
    };
    /**
     * AllergiesValues createManyAndReturn
     */
    export type AllergiesValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * The data used to create many AllergiesValues.
         */
        data: AllergiesValuesCreateManyInput | AllergiesValuesCreateManyInput[]
    };
    /**
     * AllergiesValues update
     */
    export type AllergiesValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a AllergiesValues.
         */
        data: XOR<AllergiesValuesUpdateInput, AllergiesValuesUncheckedUpdateInput>
        /**
         * Choose, which AllergiesValues to update.
         */
        where: AllergiesValuesWhereUniqueInput
    };
    /**
     * AllergiesValues updateMany
     */
    export type AllergiesValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update AllergiesValues.
         */
        data: XOR<AllergiesValuesUpdateManyMutationInput, AllergiesValuesUncheckedUpdateManyInput>
        /**
         * Filter which AllergiesValues to update
         */
        where?: AllergiesValuesWhereInput
        /**
         * Limit how many AllergiesValues to update.
         */
        limit?: number
    };
    /**
     * AllergiesValues updateManyAndReturn
     */
    export type AllergiesValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * The data used to update AllergiesValues.
         */
        data: XOR<AllergiesValuesUpdateManyMutationInput, AllergiesValuesUncheckedUpdateManyInput>
        /**
         * Filter which AllergiesValues to update
         */
        where?: AllergiesValuesWhereInput
        /**
         * Limit how many AllergiesValues to update.
         */
        limit?: number
    };
    /**
     * AllergiesValues upsert
     */
    export type AllergiesValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the AllergiesValues to update in case it exists.
         */
        where: AllergiesValuesWhereUniqueInput
        /**
         * In case the AllergiesValues found by the `where` argument doesn't exist, create a new AllergiesValues with this data.
         */
        create: XOR<AllergiesValuesCreateInput, AllergiesValuesUncheckedCreateInput>
        /**
         * In case the AllergiesValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<AllergiesValuesUpdateInput, AllergiesValuesUncheckedUpdateInput>
    };
    /**
     * AllergiesValues delete
     */
    export type AllergiesValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
        /**
         * Filter which AllergiesValues to delete.
         */
        where: AllergiesValuesWhereUniqueInput
    };
    /**
     * AllergiesValues deleteMany
     */
    export type AllergiesValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which AllergiesValues to delete
         */
        where?: AllergiesValuesWhereInput
        /**
         * Limit how many AllergiesValues to delete.
         */
        limit?: number
    };
    /**
     * AllergiesValues.allergies
     */
    export type AllergiesValues$allergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Allergies
         */
        select?: AllergiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Allergies
         */
        omit?: AllergiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesInclude<ExtArgs> | null
        where?: AllergiesWhereInput
        orderBy?: AllergiesOrderByWithRelationInput | AllergiesOrderByWithRelationInput[]
        cursor?: AllergiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: AllergiesScalarFieldEnum | AllergiesScalarFieldEnum[]
    };
    /**
     * AllergiesValues without action
     */
    export type AllergiesValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the AllergiesValues
         */
        select?: AllergiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the AllergiesValues
         */
        omit?: AllergiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AllergiesValuesInclude<ExtArgs> | null
    };
    /**
     * Model Medications
     */
    export type AggregateMedications = {
        _count: MedicationsCountAggregateOutputType | null
        _min: MedicationsMinAggregateOutputType | null
        _max: MedicationsMaxAggregateOutputType | null
    };
    export type MedicationsMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        medicationsValuesId: string | null
        appointmentId: string | null
    };
    export type MedicationsMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        medicationsValuesId: string | null
        appointmentId: string | null
    };
    export type MedicationsCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        medicationsValuesId: number
        appointmentId: number
        _all: number
    };
    export type MedicationsMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        medicationsValuesId?: true
        appointmentId?: true
    };
    export type MedicationsMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        medicationsValuesId?: true
        appointmentId?: true
    };
    export type MedicationsCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        medicationsValuesId?: true
        appointmentId?: true
        _all?: true
    };
    export type MedicationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Medications to aggregate.
         */
        where?: MedicationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Medications to fetch.
         */
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: MedicationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Medications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Medications.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Medications
        **/
        _count?: true | MedicationsCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: MedicationsMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: MedicationsMaxAggregateInputType
    };
    export type GetMedicationsAggregateType<T extends MedicationsAggregateArgs> = {
        [P in keyof T & keyof AggregateMedications]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedications[P]>
        : GetScalarType<T[P], AggregateMedications[P]>
    };
    export type MedicationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithAggregationInput | MedicationsOrderByWithAggregationInput[]
        by: MedicationsScalarFieldEnum[] | MedicationsScalarFieldEnum
        having?: MedicationsScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: MedicationsCountAggregateInputType | true
        _min?: MedicationsMinAggregateInputType
        _max?: MedicationsMaxAggregateInputType
    };
    export type MedicationsGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string | null
        medicationsValuesId: string
        appointmentId: string | null
        _count: MedicationsCountAggregateOutputType | null
        _min: MedicationsMinAggregateOutputType | null
        _max: MedicationsMaxAggregateOutputType | null
    };
    type GetMedicationsGroupByPayload<T extends MedicationsGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<MedicationsGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof MedicationsGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], MedicationsGroupByOutputType[P]>
                : GetScalarType<T[P], MedicationsGroupByOutputType[P]>
            }
        >
    >;
    export type MedicationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        medicationsValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Medications$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Medications$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Medications$deletedByUserArgs<ExtArgs>
        organization?: boolean | Medications$organizationArgs<ExtArgs>
        patient?: boolean | Medications$patientArgs<ExtArgs>
        medicationsValues?: boolean | MedicationsValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Medications$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["medications"]>;
    export type MedicationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        medicationsValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Medications$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Medications$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Medications$deletedByUserArgs<ExtArgs>
        organization?: boolean | Medications$organizationArgs<ExtArgs>
        patient?: boolean | Medications$patientArgs<ExtArgs>
        medicationsValues?: boolean | MedicationsValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Medications$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["medications"]>;
    export type MedicationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        medicationsValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Medications$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Medications$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Medications$deletedByUserArgs<ExtArgs>
        organization?: boolean | Medications$organizationArgs<ExtArgs>
        patient?: boolean | Medications$patientArgs<ExtArgs>
        medicationsValues?: boolean | MedicationsValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Medications$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["medications"]>;
    export type MedicationsSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        medicationsValuesId?: boolean
        appointmentId?: boolean
    };
    export type MedicationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "medicationsValuesId" | "appointmentId", ExtArgs["result"]["medications"]>;
    export type MedicationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Medications$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Medications$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Medications$deletedByUserArgs<ExtArgs>
        organization?: boolean | Medications$organizationArgs<ExtArgs>
        patient?: boolean | Medications$patientArgs<ExtArgs>
        medicationsValues?: boolean | MedicationsValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Medications$appointmentArgs<ExtArgs>
    };
    export type MedicationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Medications$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Medications$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Medications$deletedByUserArgs<ExtArgs>
        organization?: boolean | Medications$organizationArgs<ExtArgs>
        patient?: boolean | Medications$patientArgs<ExtArgs>
        medicationsValues?: boolean | MedicationsValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Medications$appointmentArgs<ExtArgs>
    };
    export type MedicationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Medications$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Medications$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Medications$deletedByUserArgs<ExtArgs>
        organization?: boolean | Medications$organizationArgs<ExtArgs>
        patient?: boolean | Medications$patientArgs<ExtArgs>
        medicationsValues?: boolean | MedicationsValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Medications$appointmentArgs<ExtArgs>
    };
    export type $MedicationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Medications"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs> | null
            medicationsValues: Prisma.$MedicationsValuesPayload<ExtArgs>
            appointment: Prisma.$AppointmentPayload<ExtArgs> | null
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string | null
            medicationsValuesId: string
            appointmentId: string | null
        }, ExtArgs["result"]["medications"]>
        composites: {}
    };
    type MedicationsGetPayload<S extends boolean | null | undefined | MedicationsDefaultArgs> = $Result.GetResult<Prisma.$MedicationsPayload, S>;
    type MedicationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<MedicationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: MedicationsCountAggregateInputType | true
    };
    /**
     * Medications findUnique
     */
    export type MedicationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * Filter, which Medications to fetch.
         */
        where: MedicationsWhereUniqueInput
    };
    /**
     * Medications findUniqueOrThrow
     */
    export type MedicationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * Filter, which Medications to fetch.
         */
        where: MedicationsWhereUniqueInput
    };
    /**
     * Medications findFirst
     */
    export type MedicationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * Filter, which Medications to fetch.
         */
        where?: MedicationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Medications to fetch.
         */
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Medications.
         */
        cursor?: MedicationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Medications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Medications.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Medications.
         */
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * Medications findFirstOrThrow
     */
    export type MedicationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * Filter, which Medications to fetch.
         */
        where?: MedicationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Medications to fetch.
         */
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Medications.
         */
        cursor?: MedicationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Medications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Medications.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Medications.
         */
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * Medications findMany
     */
    export type MedicationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * Filter, which Medications to fetch.
         */
        where?: MedicationsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Medications to fetch.
         */
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Medications.
         */
        cursor?: MedicationsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Medications from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Medications.
         */
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * Medications create
     */
    export type MedicationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * The data needed to create a Medications.
         */
        data: XOR<MedicationsCreateInput, MedicationsUncheckedCreateInput>
    };
    /**
     * Medications createMany
     */
    export type MedicationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Medications.
         */
        data: MedicationsCreateManyInput | MedicationsCreateManyInput[]
    };
    /**
     * Medications createManyAndReturn
     */
    export type MedicationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * The data used to create many Medications.
         */
        data: MedicationsCreateManyInput | MedicationsCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Medications update
     */
    export type MedicationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * The data needed to update a Medications.
         */
        data: XOR<MedicationsUpdateInput, MedicationsUncheckedUpdateInput>
        /**
         * Choose, which Medications to update.
         */
        where: MedicationsWhereUniqueInput
    };
    /**
     * Medications updateMany
     */
    export type MedicationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Medications.
         */
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyInput>
        /**
         * Filter which Medications to update
         */
        where?: MedicationsWhereInput
        /**
         * Limit how many Medications to update.
         */
        limit?: number
    };
    /**
     * Medications updateManyAndReturn
     */
    export type MedicationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * The data used to update Medications.
         */
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyInput>
        /**
         * Filter which Medications to update
         */
        where?: MedicationsWhereInput
        /**
         * Limit how many Medications to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Medications upsert
     */
    export type MedicationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * The filter to search for the Medications to update in case it exists.
         */
        where: MedicationsWhereUniqueInput
        /**
         * In case the Medications found by the `where` argument doesn't exist, create a new Medications with this data.
         */
        create: XOR<MedicationsCreateInput, MedicationsUncheckedCreateInput>
        /**
         * In case the Medications was found with the provided `where` argument, update it with this data.
         */
        update: XOR<MedicationsUpdateInput, MedicationsUncheckedUpdateInput>
    };
    /**
     * Medications delete
     */
    export type MedicationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        /**
         * Filter which Medications to delete.
         */
        where: MedicationsWhereUniqueInput
    };
    /**
     * Medications deleteMany
     */
    export type MedicationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Medications to delete
         */
        where?: MedicationsWhereInput
        /**
         * Limit how many Medications to delete.
         */
        limit?: number
    };
    /**
     * Medications.createdByUser
     */
    export type Medications$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Medications.updatedByUser
     */
    export type Medications$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Medications.deletedByUser
     */
    export type Medications$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Medications.organization
     */
    export type Medications$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Medications.patient
     */
    export type Medications$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
    };
    /**
     * Medications.appointment
     */
    export type Medications$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
    };
    /**
     * Medications without action
     */
    export type MedicationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
    };
    /**
     * Model MedicationsValues
     */
    export type AggregateMedicationsValues = {
        _count: MedicationsValuesCountAggregateOutputType | null
        _min: MedicationsValuesMinAggregateOutputType | null
        _max: MedicationsValuesMaxAggregateOutputType | null
    };
    export type MedicationsValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type MedicationsValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type MedicationsValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type MedicationsValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type MedicationsValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type MedicationsValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type MedicationsValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which MedicationsValues to aggregate.
         */
        where?: MedicationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of MedicationsValues to fetch.
         */
        orderBy?: MedicationsValuesOrderByWithRelationInput | MedicationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: MedicationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` MedicationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` MedicationsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned MedicationsValues
        **/
        _count?: true | MedicationsValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: MedicationsValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: MedicationsValuesMaxAggregateInputType
    };
    export type GetMedicationsValuesAggregateType<T extends MedicationsValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicationsValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicationsValues[P]>
        : GetScalarType<T[P], AggregateMedicationsValues[P]>
    };
    export type MedicationsValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: MedicationsValuesWhereInput
        orderBy?: MedicationsValuesOrderByWithAggregationInput | MedicationsValuesOrderByWithAggregationInput[]
        by: MedicationsValuesScalarFieldEnum[] | MedicationsValuesScalarFieldEnum
        having?: MedicationsValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: MedicationsValuesCountAggregateInputType | true
        _min?: MedicationsValuesMinAggregateInputType
        _max?: MedicationsValuesMaxAggregateInputType
    };
    export type MedicationsValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: MedicationsValuesCountAggregateOutputType | null
        _min: MedicationsValuesMinAggregateOutputType | null
        _max: MedicationsValuesMaxAggregateOutputType | null
    };
    type GetMedicationsValuesGroupByPayload<T extends MedicationsValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<MedicationsValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof MedicationsValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], MedicationsValuesGroupByOutputType[P]>
                : GetScalarType<T[P], MedicationsValuesGroupByOutputType[P]>
            }
        >
    >;
    export type MedicationsValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        medications?: boolean | MedicationsValues$medicationsArgs<ExtArgs>
        _count?: boolean | MedicationsValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["medicationsValues"]>;
    export type MedicationsValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["medicationsValues"]>;
    export type MedicationsValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["medicationsValues"]>;
    export type MedicationsValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type MedicationsValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["medicationsValues"]>;
    export type MedicationsValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        medications?: boolean | MedicationsValues$medicationsArgs<ExtArgs>
        _count?: boolean | MedicationsValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type MedicationsValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type MedicationsValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $MedicationsValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "MedicationsValues"
        objects: {
            medications: Prisma.$MedicationsPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["medicationsValues"]>
        composites: {}
    };
    type MedicationsValuesGetPayload<S extends boolean | null | undefined | MedicationsValuesDefaultArgs> = $Result.GetResult<Prisma.$MedicationsValuesPayload, S>;
    type MedicationsValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<MedicationsValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: MedicationsValuesCountAggregateInputType | true
    };
    /**
     * MedicationsValues findUnique
     */
    export type MedicationsValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which MedicationsValues to fetch.
         */
        where: MedicationsValuesWhereUniqueInput
    };
    /**
     * MedicationsValues findUniqueOrThrow
     */
    export type MedicationsValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which MedicationsValues to fetch.
         */
        where: MedicationsValuesWhereUniqueInput
    };
    /**
     * MedicationsValues findFirst
     */
    export type MedicationsValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which MedicationsValues to fetch.
         */
        where?: MedicationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of MedicationsValues to fetch.
         */
        orderBy?: MedicationsValuesOrderByWithRelationInput | MedicationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for MedicationsValues.
         */
        cursor?: MedicationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` MedicationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` MedicationsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of MedicationsValues.
         */
        distinct?: MedicationsValuesScalarFieldEnum | MedicationsValuesScalarFieldEnum[]
    };
    /**
     * MedicationsValues findFirstOrThrow
     */
    export type MedicationsValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which MedicationsValues to fetch.
         */
        where?: MedicationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of MedicationsValues to fetch.
         */
        orderBy?: MedicationsValuesOrderByWithRelationInput | MedicationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for MedicationsValues.
         */
        cursor?: MedicationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` MedicationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` MedicationsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of MedicationsValues.
         */
        distinct?: MedicationsValuesScalarFieldEnum | MedicationsValuesScalarFieldEnum[]
    };
    /**
     * MedicationsValues findMany
     */
    export type MedicationsValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * Filter, which MedicationsValues to fetch.
         */
        where?: MedicationsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of MedicationsValues to fetch.
         */
        orderBy?: MedicationsValuesOrderByWithRelationInput | MedicationsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing MedicationsValues.
         */
        cursor?: MedicationsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` MedicationsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` MedicationsValues.
         */
        skip?: number
        distinct?: MedicationsValuesScalarFieldEnum | MedicationsValuesScalarFieldEnum[]
    };
    /**
     * MedicationsValues create
     */
    export type MedicationsValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a MedicationsValues.
         */
        data: XOR<MedicationsValuesCreateInput, MedicationsValuesUncheckedCreateInput>
    };
    /**
     * MedicationsValues createMany
     */
    export type MedicationsValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many MedicationsValues.
         */
        data: MedicationsValuesCreateManyInput | MedicationsValuesCreateManyInput[]
    };
    /**
     * MedicationsValues createManyAndReturn
     */
    export type MedicationsValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * The data used to create many MedicationsValues.
         */
        data: MedicationsValuesCreateManyInput | MedicationsValuesCreateManyInput[]
    };
    /**
     * MedicationsValues update
     */
    export type MedicationsValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a MedicationsValues.
         */
        data: XOR<MedicationsValuesUpdateInput, MedicationsValuesUncheckedUpdateInput>
        /**
         * Choose, which MedicationsValues to update.
         */
        where: MedicationsValuesWhereUniqueInput
    };
    /**
     * MedicationsValues updateMany
     */
    export type MedicationsValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update MedicationsValues.
         */
        data: XOR<MedicationsValuesUpdateManyMutationInput, MedicationsValuesUncheckedUpdateManyInput>
        /**
         * Filter which MedicationsValues to update
         */
        where?: MedicationsValuesWhereInput
        /**
         * Limit how many MedicationsValues to update.
         */
        limit?: number
    };
    /**
     * MedicationsValues updateManyAndReturn
     */
    export type MedicationsValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * The data used to update MedicationsValues.
         */
        data: XOR<MedicationsValuesUpdateManyMutationInput, MedicationsValuesUncheckedUpdateManyInput>
        /**
         * Filter which MedicationsValues to update
         */
        where?: MedicationsValuesWhereInput
        /**
         * Limit how many MedicationsValues to update.
         */
        limit?: number
    };
    /**
     * MedicationsValues upsert
     */
    export type MedicationsValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the MedicationsValues to update in case it exists.
         */
        where: MedicationsValuesWhereUniqueInput
        /**
         * In case the MedicationsValues found by the `where` argument doesn't exist, create a new MedicationsValues with this data.
         */
        create: XOR<MedicationsValuesCreateInput, MedicationsValuesUncheckedCreateInput>
        /**
         * In case the MedicationsValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<MedicationsValuesUpdateInput, MedicationsValuesUncheckedUpdateInput>
    };
    /**
     * MedicationsValues delete
     */
    export type MedicationsValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
        /**
         * Filter which MedicationsValues to delete.
         */
        where: MedicationsValuesWhereUniqueInput
    };
    /**
     * MedicationsValues deleteMany
     */
    export type MedicationsValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which MedicationsValues to delete
         */
        where?: MedicationsValuesWhereInput
        /**
         * Limit how many MedicationsValues to delete.
         */
        limit?: number
    };
    /**
     * MedicationsValues.medications
     */
    export type MedicationsValues$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Medications
         */
        select?: MedicationsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Medications
         */
        omit?: MedicationsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsInclude<ExtArgs> | null
        where?: MedicationsWhereInput
        orderBy?: MedicationsOrderByWithRelationInput | MedicationsOrderByWithRelationInput[]
        cursor?: MedicationsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: MedicationsScalarFieldEnum | MedicationsScalarFieldEnum[]
    };
    /**
     * MedicationsValues without action
     */
    export type MedicationsValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the MedicationsValues
         */
        select?: MedicationsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the MedicationsValues
         */
        omit?: MedicationsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: MedicationsValuesInclude<ExtArgs> | null
    };
    /**
     * Model ExamResults
     */
    export type AggregateExamResults = {
        _count: ExamResultsCountAggregateOutputType | null
        _min: ExamResultsMinAggregateOutputType | null
        _max: ExamResultsMaxAggregateOutputType | null
    };
    export type ExamResultsMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        examResultsValuesId: string | null
        result: string | null
        date: Date | null
    };
    export type ExamResultsMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        examResultsValuesId: string | null
        result: string | null
        date: Date | null
    };
    export type ExamResultsCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        examResultsValuesId: number
        result: number
        date: number
        _all: number
    };
    export type ExamResultsMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        examResultsValuesId?: true
        result?: true
        date?: true
    };
    export type ExamResultsMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        examResultsValuesId?: true
        result?: true
        date?: true
    };
    export type ExamResultsCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        examResultsValuesId?: true
        result?: true
        date?: true
        _all?: true
    };
    export type ExamResultsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which ExamResults to aggregate.
         */
        where?: ExamResultsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResults to fetch.
         */
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: ExamResultsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResults from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResults.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned ExamResults
        **/
        _count?: true | ExamResultsCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: ExamResultsMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: ExamResultsMaxAggregateInputType
    };
    export type GetExamResultsAggregateType<T extends ExamResultsAggregateArgs> = {
        [P in keyof T & keyof AggregateExamResults]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamResults[P]>
        : GetScalarType<T[P], AggregateExamResults[P]>
    };
    export type ExamResultsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithAggregationInput | ExamResultsOrderByWithAggregationInput[]
        by: ExamResultsScalarFieldEnum[] | ExamResultsScalarFieldEnum
        having?: ExamResultsScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: ExamResultsCountAggregateInputType | true
        _min?: ExamResultsMinAggregateInputType
        _max?: ExamResultsMaxAggregateInputType
    };
    export type ExamResultsGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date
        _count: ExamResultsCountAggregateOutputType | null
        _min: ExamResultsMinAggregateOutputType | null
        _max: ExamResultsMaxAggregateOutputType | null
    };
    type GetExamResultsGroupByPayload<T extends ExamResultsGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<ExamResultsGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof ExamResultsGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], ExamResultsGroupByOutputType[P]>
                : GetScalarType<T[P], ExamResultsGroupByOutputType[P]>
            }
        >
    >;
    export type ExamResultsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        examResultsValuesId?: boolean
        result?: boolean
        date?: boolean
        createdByUser?: boolean | ExamResults$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | ExamResults$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | ExamResults$deletedByUserArgs<ExtArgs>
        organization?: boolean | ExamResults$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        examResultsValues?: boolean | ExamResultsValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["examResults"]>;
    export type ExamResultsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        examResultsValuesId?: boolean
        result?: boolean
        date?: boolean
        createdByUser?: boolean | ExamResults$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | ExamResults$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | ExamResults$deletedByUserArgs<ExtArgs>
        organization?: boolean | ExamResults$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        examResultsValues?: boolean | ExamResultsValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["examResults"]>;
    export type ExamResultsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        examResultsValuesId?: boolean
        result?: boolean
        date?: boolean
        createdByUser?: boolean | ExamResults$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | ExamResults$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | ExamResults$deletedByUserArgs<ExtArgs>
        organization?: boolean | ExamResults$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        examResultsValues?: boolean | ExamResultsValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["examResults"]>;
    export type ExamResultsSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        examResultsValuesId?: boolean
        result?: boolean
        date?: boolean
    };
    export type ExamResultsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "examResultsValuesId" | "result" | "date", ExtArgs["result"]["examResults"]>;
    export type ExamResultsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | ExamResults$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | ExamResults$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | ExamResults$deletedByUserArgs<ExtArgs>
        organization?: boolean | ExamResults$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        examResultsValues?: boolean | ExamResultsValuesDefaultArgs<ExtArgs>
    };
    export type ExamResultsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | ExamResults$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | ExamResults$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | ExamResults$deletedByUserArgs<ExtArgs>
        organization?: boolean | ExamResults$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        examResultsValues?: boolean | ExamResultsValuesDefaultArgs<ExtArgs>
    };
    export type ExamResultsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | ExamResults$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | ExamResults$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | ExamResults$deletedByUserArgs<ExtArgs>
        organization?: boolean | ExamResults$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        examResultsValues?: boolean | ExamResultsValuesDefaultArgs<ExtArgs>
    };
    export type $ExamResultsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "ExamResults"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs>
            examResultsValues: Prisma.$ExamResultsValuesPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string
            examResultsValuesId: string
            result: string
            date: Date
        }, ExtArgs["result"]["examResults"]>
        composites: {}
    };
    type ExamResultsGetPayload<S extends boolean | null | undefined | ExamResultsDefaultArgs> = $Result.GetResult<Prisma.$ExamResultsPayload, S>;
    type ExamResultsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<ExamResultsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: ExamResultsCountAggregateInputType | true
    };
    /**
     * ExamResults findUnique
     */
    export type ExamResultsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * Filter, which ExamResults to fetch.
         */
        where: ExamResultsWhereUniqueInput
    };
    /**
     * ExamResults findUniqueOrThrow
     */
    export type ExamResultsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * Filter, which ExamResults to fetch.
         */
        where: ExamResultsWhereUniqueInput
    };
    /**
     * ExamResults findFirst
     */
    export type ExamResultsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * Filter, which ExamResults to fetch.
         */
        where?: ExamResultsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResults to fetch.
         */
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for ExamResults.
         */
        cursor?: ExamResultsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResults from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResults.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of ExamResults.
         */
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * ExamResults findFirstOrThrow
     */
    export type ExamResultsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * Filter, which ExamResults to fetch.
         */
        where?: ExamResultsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResults to fetch.
         */
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for ExamResults.
         */
        cursor?: ExamResultsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResults from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResults.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of ExamResults.
         */
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * ExamResults findMany
     */
    export type ExamResultsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * Filter, which ExamResults to fetch.
         */
        where?: ExamResultsWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResults to fetch.
         */
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing ExamResults.
         */
        cursor?: ExamResultsWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResults from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResults.
         */
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * ExamResults create
     */
    export type ExamResultsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * The data needed to create a ExamResults.
         */
        data: XOR<ExamResultsCreateInput, ExamResultsUncheckedCreateInput>
    };
    /**
     * ExamResults createMany
     */
    export type ExamResultsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many ExamResults.
         */
        data: ExamResultsCreateManyInput | ExamResultsCreateManyInput[]
    };
    /**
     * ExamResults createManyAndReturn
     */
    export type ExamResultsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * The data used to create many ExamResults.
         */
        data: ExamResultsCreateManyInput | ExamResultsCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * ExamResults update
     */
    export type ExamResultsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * The data needed to update a ExamResults.
         */
        data: XOR<ExamResultsUpdateInput, ExamResultsUncheckedUpdateInput>
        /**
         * Choose, which ExamResults to update.
         */
        where: ExamResultsWhereUniqueInput
    };
    /**
     * ExamResults updateMany
     */
    export type ExamResultsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update ExamResults.
         */
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyInput>
        /**
         * Filter which ExamResults to update
         */
        where?: ExamResultsWhereInput
        /**
         * Limit how many ExamResults to update.
         */
        limit?: number
    };
    /**
     * ExamResults updateManyAndReturn
     */
    export type ExamResultsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * The data used to update ExamResults.
         */
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyInput>
        /**
         * Filter which ExamResults to update
         */
        where?: ExamResultsWhereInput
        /**
         * Limit how many ExamResults to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * ExamResults upsert
     */
    export type ExamResultsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * The filter to search for the ExamResults to update in case it exists.
         */
        where: ExamResultsWhereUniqueInput
        /**
         * In case the ExamResults found by the `where` argument doesn't exist, create a new ExamResults with this data.
         */
        create: XOR<ExamResultsCreateInput, ExamResultsUncheckedCreateInput>
        /**
         * In case the ExamResults was found with the provided `where` argument, update it with this data.
         */
        update: XOR<ExamResultsUpdateInput, ExamResultsUncheckedUpdateInput>
    };
    /**
     * ExamResults delete
     */
    export type ExamResultsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        /**
         * Filter which ExamResults to delete.
         */
        where: ExamResultsWhereUniqueInput
    };
    /**
     * ExamResults deleteMany
     */
    export type ExamResultsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which ExamResults to delete
         */
        where?: ExamResultsWhereInput
        /**
         * Limit how many ExamResults to delete.
         */
        limit?: number
    };
    /**
     * ExamResults.createdByUser
     */
    export type ExamResults$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * ExamResults.updatedByUser
     */
    export type ExamResults$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * ExamResults.deletedByUser
     */
    export type ExamResults$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * ExamResults.organization
     */
    export type ExamResults$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * ExamResults without action
     */
    export type ExamResultsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
    };
    /**
     * Model ExamResultsValues
     */
    export type AggregateExamResultsValues = {
        _count: ExamResultsValuesCountAggregateOutputType | null
        _min: ExamResultsValuesMinAggregateOutputType | null
        _max: ExamResultsValuesMaxAggregateOutputType | null
    };
    export type ExamResultsValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type ExamResultsValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type ExamResultsValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type ExamResultsValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type ExamResultsValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type ExamResultsValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type ExamResultsValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which ExamResultsValues to aggregate.
         */
        where?: ExamResultsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResultsValues to fetch.
         */
        orderBy?: ExamResultsValuesOrderByWithRelationInput | ExamResultsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: ExamResultsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResultsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResultsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned ExamResultsValues
        **/
        _count?: true | ExamResultsValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: ExamResultsValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: ExamResultsValuesMaxAggregateInputType
    };
    export type GetExamResultsValuesAggregateType<T extends ExamResultsValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateExamResultsValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamResultsValues[P]>
        : GetScalarType<T[P], AggregateExamResultsValues[P]>
    };
    export type ExamResultsValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ExamResultsValuesWhereInput
        orderBy?: ExamResultsValuesOrderByWithAggregationInput | ExamResultsValuesOrderByWithAggregationInput[]
        by: ExamResultsValuesScalarFieldEnum[] | ExamResultsValuesScalarFieldEnum
        having?: ExamResultsValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: ExamResultsValuesCountAggregateInputType | true
        _min?: ExamResultsValuesMinAggregateInputType
        _max?: ExamResultsValuesMaxAggregateInputType
    };
    export type ExamResultsValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: ExamResultsValuesCountAggregateOutputType | null
        _min: ExamResultsValuesMinAggregateOutputType | null
        _max: ExamResultsValuesMaxAggregateOutputType | null
    };
    type GetExamResultsValuesGroupByPayload<T extends ExamResultsValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<ExamResultsValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof ExamResultsValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], ExamResultsValuesGroupByOutputType[P]>
                : GetScalarType<T[P], ExamResultsValuesGroupByOutputType[P]>
            }
        >
    >;
    export type ExamResultsValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        examResults?: boolean | ExamResultsValues$examResultsArgs<ExtArgs>
        _count?: boolean | ExamResultsValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["examResultsValues"]>;
    export type ExamResultsValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["examResultsValues"]>;
    export type ExamResultsValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["examResultsValues"]>;
    export type ExamResultsValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type ExamResultsValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["examResultsValues"]>;
    export type ExamResultsValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        examResults?: boolean | ExamResultsValues$examResultsArgs<ExtArgs>
        _count?: boolean | ExamResultsValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type ExamResultsValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type ExamResultsValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $ExamResultsValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "ExamResultsValues"
        objects: {
            examResults: Prisma.$ExamResultsPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["examResultsValues"]>
        composites: {}
    };
    type ExamResultsValuesGetPayload<S extends boolean | null | undefined | ExamResultsValuesDefaultArgs> = $Result.GetResult<Prisma.$ExamResultsValuesPayload, S>;
    type ExamResultsValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<ExamResultsValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: ExamResultsValuesCountAggregateInputType | true
    };
    /**
     * ExamResultsValues findUnique
     */
    export type ExamResultsValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * Filter, which ExamResultsValues to fetch.
         */
        where: ExamResultsValuesWhereUniqueInput
    };
    /**
     * ExamResultsValues findUniqueOrThrow
     */
    export type ExamResultsValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * Filter, which ExamResultsValues to fetch.
         */
        where: ExamResultsValuesWhereUniqueInput
    };
    /**
     * ExamResultsValues findFirst
     */
    export type ExamResultsValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * Filter, which ExamResultsValues to fetch.
         */
        where?: ExamResultsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResultsValues to fetch.
         */
        orderBy?: ExamResultsValuesOrderByWithRelationInput | ExamResultsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for ExamResultsValues.
         */
        cursor?: ExamResultsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResultsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResultsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of ExamResultsValues.
         */
        distinct?: ExamResultsValuesScalarFieldEnum | ExamResultsValuesScalarFieldEnum[]
    };
    /**
     * ExamResultsValues findFirstOrThrow
     */
    export type ExamResultsValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * Filter, which ExamResultsValues to fetch.
         */
        where?: ExamResultsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResultsValues to fetch.
         */
        orderBy?: ExamResultsValuesOrderByWithRelationInput | ExamResultsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for ExamResultsValues.
         */
        cursor?: ExamResultsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResultsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResultsValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of ExamResultsValues.
         */
        distinct?: ExamResultsValuesScalarFieldEnum | ExamResultsValuesScalarFieldEnum[]
    };
    /**
     * ExamResultsValues findMany
     */
    export type ExamResultsValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * Filter, which ExamResultsValues to fetch.
         */
        where?: ExamResultsValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ExamResultsValues to fetch.
         */
        orderBy?: ExamResultsValuesOrderByWithRelationInput | ExamResultsValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing ExamResultsValues.
         */
        cursor?: ExamResultsValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ExamResultsValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ExamResultsValues.
         */
        skip?: number
        distinct?: ExamResultsValuesScalarFieldEnum | ExamResultsValuesScalarFieldEnum[]
    };
    /**
     * ExamResultsValues create
     */
    export type ExamResultsValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a ExamResultsValues.
         */
        data: XOR<ExamResultsValuesCreateInput, ExamResultsValuesUncheckedCreateInput>
    };
    /**
     * ExamResultsValues createMany
     */
    export type ExamResultsValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many ExamResultsValues.
         */
        data: ExamResultsValuesCreateManyInput | ExamResultsValuesCreateManyInput[]
    };
    /**
     * ExamResultsValues createManyAndReturn
     */
    export type ExamResultsValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * The data used to create many ExamResultsValues.
         */
        data: ExamResultsValuesCreateManyInput | ExamResultsValuesCreateManyInput[]
    };
    /**
     * ExamResultsValues update
     */
    export type ExamResultsValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a ExamResultsValues.
         */
        data: XOR<ExamResultsValuesUpdateInput, ExamResultsValuesUncheckedUpdateInput>
        /**
         * Choose, which ExamResultsValues to update.
         */
        where: ExamResultsValuesWhereUniqueInput
    };
    /**
     * ExamResultsValues updateMany
     */
    export type ExamResultsValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update ExamResultsValues.
         */
        data: XOR<ExamResultsValuesUpdateManyMutationInput, ExamResultsValuesUncheckedUpdateManyInput>
        /**
         * Filter which ExamResultsValues to update
         */
        where?: ExamResultsValuesWhereInput
        /**
         * Limit how many ExamResultsValues to update.
         */
        limit?: number
    };
    /**
     * ExamResultsValues updateManyAndReturn
     */
    export type ExamResultsValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * The data used to update ExamResultsValues.
         */
        data: XOR<ExamResultsValuesUpdateManyMutationInput, ExamResultsValuesUncheckedUpdateManyInput>
        /**
         * Filter which ExamResultsValues to update
         */
        where?: ExamResultsValuesWhereInput
        /**
         * Limit how many ExamResultsValues to update.
         */
        limit?: number
    };
    /**
     * ExamResultsValues upsert
     */
    export type ExamResultsValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the ExamResultsValues to update in case it exists.
         */
        where: ExamResultsValuesWhereUniqueInput
        /**
         * In case the ExamResultsValues found by the `where` argument doesn't exist, create a new ExamResultsValues with this data.
         */
        create: XOR<ExamResultsValuesCreateInput, ExamResultsValuesUncheckedCreateInput>
        /**
         * In case the ExamResultsValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<ExamResultsValuesUpdateInput, ExamResultsValuesUncheckedUpdateInput>
    };
    /**
     * ExamResultsValues delete
     */
    export type ExamResultsValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
        /**
         * Filter which ExamResultsValues to delete.
         */
        where: ExamResultsValuesWhereUniqueInput
    };
    /**
     * ExamResultsValues deleteMany
     */
    export type ExamResultsValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which ExamResultsValues to delete
         */
        where?: ExamResultsValuesWhereInput
        /**
         * Limit how many ExamResultsValues to delete.
         */
        limit?: number
    };
    /**
     * ExamResultsValues.examResults
     */
    export type ExamResultsValues$examResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResults
         */
        select?: ExamResultsSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResults
         */
        omit?: ExamResultsOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsInclude<ExtArgs> | null
        where?: ExamResultsWhereInput
        orderBy?: ExamResultsOrderByWithRelationInput | ExamResultsOrderByWithRelationInput[]
        cursor?: ExamResultsWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ExamResultsScalarFieldEnum | ExamResultsScalarFieldEnum[]
    };
    /**
     * ExamResultsValues without action
     */
    export type ExamResultsValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ExamResultsValues
         */
        select?: ExamResultsValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ExamResultsValues
         */
        omit?: ExamResultsValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ExamResultsValuesInclude<ExtArgs> | null
    };
    /**
     * Model Comorbidities
     */
    export type AggregateComorbidities = {
        _count: ComorbiditiesCountAggregateOutputType | null
        _min: ComorbiditiesMinAggregateOutputType | null
        _max: ComorbiditiesMaxAggregateOutputType | null
    };
    export type ComorbiditiesMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        comorbiditiesValuesId: string | null
        appointmentId: string | null
    };
    export type ComorbiditiesMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        comorbiditiesValuesId: string | null
        appointmentId: string | null
    };
    export type ComorbiditiesCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        comorbiditiesValuesId: number
        appointmentId: number
        _all: number
    };
    export type ComorbiditiesMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        comorbiditiesValuesId?: true
        appointmentId?: true
    };
    export type ComorbiditiesMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        comorbiditiesValuesId?: true
        appointmentId?: true
    };
    export type ComorbiditiesCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        comorbiditiesValuesId?: true
        appointmentId?: true
        _all?: true
    };
    export type ComorbiditiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Comorbidities to aggregate.
         */
        where?: ComorbiditiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Comorbidities to fetch.
         */
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: ComorbiditiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Comorbidities from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Comorbidities.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Comorbidities
        **/
        _count?: true | ComorbiditiesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: ComorbiditiesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: ComorbiditiesMaxAggregateInputType
    };
    export type GetComorbiditiesAggregateType<T extends ComorbiditiesAggregateArgs> = {
        [P in keyof T & keyof AggregateComorbidities]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComorbidities[P]>
        : GetScalarType<T[P], AggregateComorbidities[P]>
    };
    export type ComorbiditiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithAggregationInput | ComorbiditiesOrderByWithAggregationInput[]
        by: ComorbiditiesScalarFieldEnum[] | ComorbiditiesScalarFieldEnum
        having?: ComorbiditiesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: ComorbiditiesCountAggregateInputType | true
        _min?: ComorbiditiesMinAggregateInputType
        _max?: ComorbiditiesMaxAggregateInputType
    };
    export type ComorbiditiesGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string | null
        comorbiditiesValuesId: string
        appointmentId: string | null
        _count: ComorbiditiesCountAggregateOutputType | null
        _min: ComorbiditiesMinAggregateOutputType | null
        _max: ComorbiditiesMaxAggregateOutputType | null
    };
    type GetComorbiditiesGroupByPayload<T extends ComorbiditiesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<ComorbiditiesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof ComorbiditiesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], ComorbiditiesGroupByOutputType[P]>
                : GetScalarType<T[P], ComorbiditiesGroupByOutputType[P]>
            }
        >
    >;
    export type ComorbiditiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        comorbiditiesValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Comorbidities$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Comorbidities$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Comorbidities$deletedByUserArgs<ExtArgs>
        organization?: boolean | Comorbidities$organizationArgs<ExtArgs>
        patient?: boolean | Comorbidities$patientArgs<ExtArgs>
        comorbiditiesValues?: boolean | ComorbiditiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Comorbidities$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["comorbidities"]>;
    export type ComorbiditiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        comorbiditiesValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Comorbidities$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Comorbidities$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Comorbidities$deletedByUserArgs<ExtArgs>
        organization?: boolean | Comorbidities$organizationArgs<ExtArgs>
        patient?: boolean | Comorbidities$patientArgs<ExtArgs>
        comorbiditiesValues?: boolean | ComorbiditiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Comorbidities$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["comorbidities"]>;
    export type ComorbiditiesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        comorbiditiesValuesId?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | Comorbidities$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Comorbidities$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Comorbidities$deletedByUserArgs<ExtArgs>
        organization?: boolean | Comorbidities$organizationArgs<ExtArgs>
        patient?: boolean | Comorbidities$patientArgs<ExtArgs>
        comorbiditiesValues?: boolean | ComorbiditiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Comorbidities$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["comorbidities"]>;
    export type ComorbiditiesSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        comorbiditiesValuesId?: boolean
        appointmentId?: boolean
    };
    export type ComorbiditiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "comorbiditiesValuesId" | "appointmentId", ExtArgs["result"]["comorbidities"]>;
    export type ComorbiditiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Comorbidities$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Comorbidities$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Comorbidities$deletedByUserArgs<ExtArgs>
        organization?: boolean | Comorbidities$organizationArgs<ExtArgs>
        patient?: boolean | Comorbidities$patientArgs<ExtArgs>
        comorbiditiesValues?: boolean | ComorbiditiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Comorbidities$appointmentArgs<ExtArgs>
    };
    export type ComorbiditiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Comorbidities$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Comorbidities$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Comorbidities$deletedByUserArgs<ExtArgs>
        organization?: boolean | Comorbidities$organizationArgs<ExtArgs>
        patient?: boolean | Comorbidities$patientArgs<ExtArgs>
        comorbiditiesValues?: boolean | ComorbiditiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Comorbidities$appointmentArgs<ExtArgs>
    };
    export type ComorbiditiesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Comorbidities$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Comorbidities$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Comorbidities$deletedByUserArgs<ExtArgs>
        organization?: boolean | Comorbidities$organizationArgs<ExtArgs>
        patient?: boolean | Comorbidities$patientArgs<ExtArgs>
        comorbiditiesValues?: boolean | ComorbiditiesValuesDefaultArgs<ExtArgs>
        appointment?: boolean | Comorbidities$appointmentArgs<ExtArgs>
    };
    export type $ComorbiditiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Comorbidities"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs> | null
            comorbiditiesValues: Prisma.$ComorbiditiesValuesPayload<ExtArgs>
            appointment: Prisma.$AppointmentPayload<ExtArgs> | null
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string | null
            comorbiditiesValuesId: string
            appointmentId: string | null
        }, ExtArgs["result"]["comorbidities"]>
        composites: {}
    };
    type ComorbiditiesGetPayload<S extends boolean | null | undefined | ComorbiditiesDefaultArgs> = $Result.GetResult<Prisma.$ComorbiditiesPayload, S>;
    type ComorbiditiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<ComorbiditiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: ComorbiditiesCountAggregateInputType | true
    };
    /**
     * Comorbidities findUnique
     */
    export type ComorbiditiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * Filter, which Comorbidities to fetch.
         */
        where: ComorbiditiesWhereUniqueInput
    };
    /**
     * Comorbidities findUniqueOrThrow
     */
    export type ComorbiditiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * Filter, which Comorbidities to fetch.
         */
        where: ComorbiditiesWhereUniqueInput
    };
    /**
     * Comorbidities findFirst
     */
    export type ComorbiditiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * Filter, which Comorbidities to fetch.
         */
        where?: ComorbiditiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Comorbidities to fetch.
         */
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Comorbidities.
         */
        cursor?: ComorbiditiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Comorbidities from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Comorbidities.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Comorbidities.
         */
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * Comorbidities findFirstOrThrow
     */
    export type ComorbiditiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * Filter, which Comorbidities to fetch.
         */
        where?: ComorbiditiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Comorbidities to fetch.
         */
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Comorbidities.
         */
        cursor?: ComorbiditiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Comorbidities from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Comorbidities.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Comorbidities.
         */
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * Comorbidities findMany
     */
    export type ComorbiditiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * Filter, which Comorbidities to fetch.
         */
        where?: ComorbiditiesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Comorbidities to fetch.
         */
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Comorbidities.
         */
        cursor?: ComorbiditiesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Comorbidities from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Comorbidities.
         */
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * Comorbidities create
     */
    export type ComorbiditiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * The data needed to create a Comorbidities.
         */
        data: XOR<ComorbiditiesCreateInput, ComorbiditiesUncheckedCreateInput>
    };
    /**
     * Comorbidities createMany
     */
    export type ComorbiditiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Comorbidities.
         */
        data: ComorbiditiesCreateManyInput | ComorbiditiesCreateManyInput[]
    };
    /**
     * Comorbidities createManyAndReturn
     */
    export type ComorbiditiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * The data used to create many Comorbidities.
         */
        data: ComorbiditiesCreateManyInput | ComorbiditiesCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Comorbidities update
     */
    export type ComorbiditiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * The data needed to update a Comorbidities.
         */
        data: XOR<ComorbiditiesUpdateInput, ComorbiditiesUncheckedUpdateInput>
        /**
         * Choose, which Comorbidities to update.
         */
        where: ComorbiditiesWhereUniqueInput
    };
    /**
     * Comorbidities updateMany
     */
    export type ComorbiditiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Comorbidities.
         */
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyInput>
        /**
         * Filter which Comorbidities to update
         */
        where?: ComorbiditiesWhereInput
        /**
         * Limit how many Comorbidities to update.
         */
        limit?: number
    };
    /**
     * Comorbidities updateManyAndReturn
     */
    export type ComorbiditiesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * The data used to update Comorbidities.
         */
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyInput>
        /**
         * Filter which Comorbidities to update
         */
        where?: ComorbiditiesWhereInput
        /**
         * Limit how many Comorbidities to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Comorbidities upsert
     */
    export type ComorbiditiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * The filter to search for the Comorbidities to update in case it exists.
         */
        where: ComorbiditiesWhereUniqueInput
        /**
         * In case the Comorbidities found by the `where` argument doesn't exist, create a new Comorbidities with this data.
         */
        create: XOR<ComorbiditiesCreateInput, ComorbiditiesUncheckedCreateInput>
        /**
         * In case the Comorbidities was found with the provided `where` argument, update it with this data.
         */
        update: XOR<ComorbiditiesUpdateInput, ComorbiditiesUncheckedUpdateInput>
    };
    /**
     * Comorbidities delete
     */
    export type ComorbiditiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        /**
         * Filter which Comorbidities to delete.
         */
        where: ComorbiditiesWhereUniqueInput
    };
    /**
     * Comorbidities deleteMany
     */
    export type ComorbiditiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Comorbidities to delete
         */
        where?: ComorbiditiesWhereInput
        /**
         * Limit how many Comorbidities to delete.
         */
        limit?: number
    };
    /**
     * Comorbidities.createdByUser
     */
    export type Comorbidities$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Comorbidities.updatedByUser
     */
    export type Comorbidities$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Comorbidities.deletedByUser
     */
    export type Comorbidities$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Comorbidities.organization
     */
    export type Comorbidities$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Comorbidities.patient
     */
    export type Comorbidities$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Patient
         */
        select?: PatientSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Patient
         */
        omit?: PatientOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: PatientInclude<ExtArgs> | null
        where?: PatientWhereInput
    };
    /**
     * Comorbidities.appointment
     */
    export type Comorbidities$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
    };
    /**
     * Comorbidities without action
     */
    export type ComorbiditiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
    };
    /**
     * Model ComorbiditiesValues
     */
    export type AggregateComorbiditiesValues = {
        _count: ComorbiditiesValuesCountAggregateOutputType | null
        _min: ComorbiditiesValuesMinAggregateOutputType | null
        _max: ComorbiditiesValuesMaxAggregateOutputType | null
    };
    export type ComorbiditiesValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type ComorbiditiesValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type ComorbiditiesValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type ComorbiditiesValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type ComorbiditiesValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type ComorbiditiesValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type ComorbiditiesValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which ComorbiditiesValues to aggregate.
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ComorbiditiesValues to fetch.
         */
        orderBy?: ComorbiditiesValuesOrderByWithRelationInput | ComorbiditiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: ComorbiditiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ComorbiditiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ComorbiditiesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned ComorbiditiesValues
        **/
        _count?: true | ComorbiditiesValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: ComorbiditiesValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: ComorbiditiesValuesMaxAggregateInputType
    };
    export type GetComorbiditiesValuesAggregateType<T extends ComorbiditiesValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateComorbiditiesValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComorbiditiesValues[P]>
        : GetScalarType<T[P], AggregateComorbiditiesValues[P]>
    };
    export type ComorbiditiesValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: ComorbiditiesValuesWhereInput
        orderBy?: ComorbiditiesValuesOrderByWithAggregationInput | ComorbiditiesValuesOrderByWithAggregationInput[]
        by: ComorbiditiesValuesScalarFieldEnum[] | ComorbiditiesValuesScalarFieldEnum
        having?: ComorbiditiesValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: ComorbiditiesValuesCountAggregateInputType | true
        _min?: ComorbiditiesValuesMinAggregateInputType
        _max?: ComorbiditiesValuesMaxAggregateInputType
    };
    export type ComorbiditiesValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: ComorbiditiesValuesCountAggregateOutputType | null
        _min: ComorbiditiesValuesMinAggregateOutputType | null
        _max: ComorbiditiesValuesMaxAggregateOutputType | null
    };
    type GetComorbiditiesValuesGroupByPayload<T extends ComorbiditiesValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<ComorbiditiesValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof ComorbiditiesValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], ComorbiditiesValuesGroupByOutputType[P]>
                : GetScalarType<T[P], ComorbiditiesValuesGroupByOutputType[P]>
            }
        >
    >;
    export type ComorbiditiesValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        comorbidities?: boolean | ComorbiditiesValues$comorbiditiesArgs<ExtArgs>
        _count?: boolean | ComorbiditiesValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["comorbiditiesValues"]>;
    export type ComorbiditiesValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["comorbiditiesValues"]>;
    export type ComorbiditiesValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["comorbiditiesValues"]>;
    export type ComorbiditiesValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type ComorbiditiesValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["comorbiditiesValues"]>;
    export type ComorbiditiesValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        comorbidities?: boolean | ComorbiditiesValues$comorbiditiesArgs<ExtArgs>
        _count?: boolean | ComorbiditiesValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type ComorbiditiesValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type ComorbiditiesValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $ComorbiditiesValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "ComorbiditiesValues"
        objects: {
            comorbidities: Prisma.$ComorbiditiesPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["comorbiditiesValues"]>
        composites: {}
    };
    type ComorbiditiesValuesGetPayload<S extends boolean | null | undefined | ComorbiditiesValuesDefaultArgs> = $Result.GetResult<Prisma.$ComorbiditiesValuesPayload, S>;
    type ComorbiditiesValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<ComorbiditiesValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: ComorbiditiesValuesCountAggregateInputType | true
    };
    /**
     * ComorbiditiesValues findUnique
     */
    export type ComorbiditiesValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which ComorbiditiesValues to fetch.
         */
        where: ComorbiditiesValuesWhereUniqueInput
    };
    /**
     * ComorbiditiesValues findUniqueOrThrow
     */
    export type ComorbiditiesValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which ComorbiditiesValues to fetch.
         */
        where: ComorbiditiesValuesWhereUniqueInput
    };
    /**
     * ComorbiditiesValues findFirst
     */
    export type ComorbiditiesValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which ComorbiditiesValues to fetch.
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ComorbiditiesValues to fetch.
         */
        orderBy?: ComorbiditiesValuesOrderByWithRelationInput | ComorbiditiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for ComorbiditiesValues.
         */
        cursor?: ComorbiditiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ComorbiditiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ComorbiditiesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of ComorbiditiesValues.
         */
        distinct?: ComorbiditiesValuesScalarFieldEnum | ComorbiditiesValuesScalarFieldEnum[]
    };
    /**
     * ComorbiditiesValues findFirstOrThrow
     */
    export type ComorbiditiesValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which ComorbiditiesValues to fetch.
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ComorbiditiesValues to fetch.
         */
        orderBy?: ComorbiditiesValuesOrderByWithRelationInput | ComorbiditiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for ComorbiditiesValues.
         */
        cursor?: ComorbiditiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ComorbiditiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ComorbiditiesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of ComorbiditiesValues.
         */
        distinct?: ComorbiditiesValuesScalarFieldEnum | ComorbiditiesValuesScalarFieldEnum[]
    };
    /**
     * ComorbiditiesValues findMany
     */
    export type ComorbiditiesValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * Filter, which ComorbiditiesValues to fetch.
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of ComorbiditiesValues to fetch.
         */
        orderBy?: ComorbiditiesValuesOrderByWithRelationInput | ComorbiditiesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing ComorbiditiesValues.
         */
        cursor?: ComorbiditiesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` ComorbiditiesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` ComorbiditiesValues.
         */
        skip?: number
        distinct?: ComorbiditiesValuesScalarFieldEnum | ComorbiditiesValuesScalarFieldEnum[]
    };
    /**
     * ComorbiditiesValues create
     */
    export type ComorbiditiesValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a ComorbiditiesValues.
         */
        data: XOR<ComorbiditiesValuesCreateInput, ComorbiditiesValuesUncheckedCreateInput>
    };
    /**
     * ComorbiditiesValues createMany
     */
    export type ComorbiditiesValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many ComorbiditiesValues.
         */
        data: ComorbiditiesValuesCreateManyInput | ComorbiditiesValuesCreateManyInput[]
    };
    /**
     * ComorbiditiesValues createManyAndReturn
     */
    export type ComorbiditiesValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * The data used to create many ComorbiditiesValues.
         */
        data: ComorbiditiesValuesCreateManyInput | ComorbiditiesValuesCreateManyInput[]
    };
    /**
     * ComorbiditiesValues update
     */
    export type ComorbiditiesValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a ComorbiditiesValues.
         */
        data: XOR<ComorbiditiesValuesUpdateInput, ComorbiditiesValuesUncheckedUpdateInput>
        /**
         * Choose, which ComorbiditiesValues to update.
         */
        where: ComorbiditiesValuesWhereUniqueInput
    };
    /**
     * ComorbiditiesValues updateMany
     */
    export type ComorbiditiesValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update ComorbiditiesValues.
         */
        data: XOR<ComorbiditiesValuesUpdateManyMutationInput, ComorbiditiesValuesUncheckedUpdateManyInput>
        /**
         * Filter which ComorbiditiesValues to update
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * Limit how many ComorbiditiesValues to update.
         */
        limit?: number
    };
    /**
     * ComorbiditiesValues updateManyAndReturn
     */
    export type ComorbiditiesValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * The data used to update ComorbiditiesValues.
         */
        data: XOR<ComorbiditiesValuesUpdateManyMutationInput, ComorbiditiesValuesUncheckedUpdateManyInput>
        /**
         * Filter which ComorbiditiesValues to update
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * Limit how many ComorbiditiesValues to update.
         */
        limit?: number
    };
    /**
     * ComorbiditiesValues upsert
     */
    export type ComorbiditiesValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the ComorbiditiesValues to update in case it exists.
         */
        where: ComorbiditiesValuesWhereUniqueInput
        /**
         * In case the ComorbiditiesValues found by the `where` argument doesn't exist, create a new ComorbiditiesValues with this data.
         */
        create: XOR<ComorbiditiesValuesCreateInput, ComorbiditiesValuesUncheckedCreateInput>
        /**
         * In case the ComorbiditiesValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<ComorbiditiesValuesUpdateInput, ComorbiditiesValuesUncheckedUpdateInput>
    };
    /**
     * ComorbiditiesValues delete
     */
    export type ComorbiditiesValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
        /**
         * Filter which ComorbiditiesValues to delete.
         */
        where: ComorbiditiesValuesWhereUniqueInput
    };
    /**
     * ComorbiditiesValues deleteMany
     */
    export type ComorbiditiesValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which ComorbiditiesValues to delete
         */
        where?: ComorbiditiesValuesWhereInput
        /**
         * Limit how many ComorbiditiesValues to delete.
         */
        limit?: number
    };
    /**
     * ComorbiditiesValues.comorbidities
     */
    export type ComorbiditiesValues$comorbiditiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Comorbidities
         */
        select?: ComorbiditiesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Comorbidities
         */
        omit?: ComorbiditiesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesInclude<ExtArgs> | null
        where?: ComorbiditiesWhereInput
        orderBy?: ComorbiditiesOrderByWithRelationInput | ComorbiditiesOrderByWithRelationInput[]
        cursor?: ComorbiditiesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: ComorbiditiesScalarFieldEnum | ComorbiditiesScalarFieldEnum[]
    };
    /**
     * ComorbiditiesValues without action
     */
    export type ComorbiditiesValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the ComorbiditiesValues
         */
        select?: ComorbiditiesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the ComorbiditiesValues
         */
        omit?: ComorbiditiesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: ComorbiditiesValuesInclude<ExtArgs> | null
    };
    /**
     * Model Surgeries
     */
    export type AggregateSurgeries = {
        _count: SurgeriesCountAggregateOutputType | null
        _min: SurgeriesMinAggregateOutputType | null
        _max: SurgeriesMaxAggregateOutputType | null
    };
    export type SurgeriesMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        surgeriesValuesId: string | null
    };
    export type SurgeriesMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        surgeriesValuesId: string | null
    };
    export type SurgeriesCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        surgeriesValuesId: number
        _all: number
    };
    export type SurgeriesMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        surgeriesValuesId?: true
    };
    export type SurgeriesMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        surgeriesValuesId?: true
    };
    export type SurgeriesCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        surgeriesValuesId?: true
        _all?: true
    };
    export type SurgeriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Surgeries to aggregate.
         */
        where?: SurgeriesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Surgeries to fetch.
         */
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: SurgeriesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Surgeries from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Surgeries.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned Surgeries
        **/
        _count?: true | SurgeriesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: SurgeriesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: SurgeriesMaxAggregateInputType
    };
    export type GetSurgeriesAggregateType<T extends SurgeriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSurgeries]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurgeries[P]>
        : GetScalarType<T[P], AggregateSurgeries[P]>
    };
    export type SurgeriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithAggregationInput | SurgeriesOrderByWithAggregationInput[]
        by: SurgeriesScalarFieldEnum[] | SurgeriesScalarFieldEnum
        having?: SurgeriesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: SurgeriesCountAggregateInputType | true
        _min?: SurgeriesMinAggregateInputType
        _max?: SurgeriesMaxAggregateInputType
    };
    export type SurgeriesGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string
        surgeriesValuesId: string
        _count: SurgeriesCountAggregateOutputType | null
        _min: SurgeriesMinAggregateOutputType | null
        _max: SurgeriesMaxAggregateOutputType | null
    };
    type GetSurgeriesGroupByPayload<T extends SurgeriesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<SurgeriesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof SurgeriesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], SurgeriesGroupByOutputType[P]>
                : GetScalarType<T[P], SurgeriesGroupByOutputType[P]>
            }
        >
    >;
    export type SurgeriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        surgeriesValuesId?: boolean
        createdByUser?: boolean | Surgeries$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Surgeries$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Surgeries$deletedByUserArgs<ExtArgs>
        organization?: boolean | Surgeries$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        surgeriesValues?: boolean | SurgeriesValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["surgeries"]>;
    export type SurgeriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        surgeriesValuesId?: boolean
        createdByUser?: boolean | Surgeries$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Surgeries$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Surgeries$deletedByUserArgs<ExtArgs>
        organization?: boolean | Surgeries$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        surgeriesValues?: boolean | SurgeriesValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["surgeries"]>;
    export type SurgeriesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        surgeriesValuesId?: boolean
        createdByUser?: boolean | Surgeries$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Surgeries$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Surgeries$deletedByUserArgs<ExtArgs>
        organization?: boolean | Surgeries$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        surgeriesValues?: boolean | SurgeriesValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["surgeries"]>;
    export type SurgeriesSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        surgeriesValuesId?: boolean
    };
    export type SurgeriesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "surgeriesValuesId", ExtArgs["result"]["surgeries"]>;
    export type SurgeriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Surgeries$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Surgeries$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Surgeries$deletedByUserArgs<ExtArgs>
        organization?: boolean | Surgeries$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        surgeriesValues?: boolean | SurgeriesValuesDefaultArgs<ExtArgs>
    };
    export type SurgeriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Surgeries$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Surgeries$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Surgeries$deletedByUserArgs<ExtArgs>
        organization?: boolean | Surgeries$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        surgeriesValues?: boolean | SurgeriesValuesDefaultArgs<ExtArgs>
    };
    export type SurgeriesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | Surgeries$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | Surgeries$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | Surgeries$deletedByUserArgs<ExtArgs>
        organization?: boolean | Surgeries$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        surgeriesValues?: boolean | SurgeriesValuesDefaultArgs<ExtArgs>
    };
    export type $SurgeriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "Surgeries"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs>
            surgeriesValues: Prisma.$SurgeriesValuesPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string
            surgeriesValuesId: string
        }, ExtArgs["result"]["surgeries"]>
        composites: {}
    };
    type SurgeriesGetPayload<S extends boolean | null | undefined | SurgeriesDefaultArgs> = $Result.GetResult<Prisma.$SurgeriesPayload, S>;
    type SurgeriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<SurgeriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: SurgeriesCountAggregateInputType | true
    };
    /**
     * Surgeries findUnique
     */
    export type SurgeriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * Filter, which Surgeries to fetch.
         */
        where: SurgeriesWhereUniqueInput
    };
    /**
     * Surgeries findUniqueOrThrow
     */
    export type SurgeriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * Filter, which Surgeries to fetch.
         */
        where: SurgeriesWhereUniqueInput
    };
    /**
     * Surgeries findFirst
     */
    export type SurgeriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * Filter, which Surgeries to fetch.
         */
        where?: SurgeriesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Surgeries to fetch.
         */
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Surgeries.
         */
        cursor?: SurgeriesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Surgeries from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Surgeries.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Surgeries.
         */
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * Surgeries findFirstOrThrow
     */
    export type SurgeriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * Filter, which Surgeries to fetch.
         */
        where?: SurgeriesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Surgeries to fetch.
         */
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for Surgeries.
         */
        cursor?: SurgeriesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Surgeries from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Surgeries.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of Surgeries.
         */
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * Surgeries findMany
     */
    export type SurgeriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * Filter, which Surgeries to fetch.
         */
        where?: SurgeriesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of Surgeries to fetch.
         */
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing Surgeries.
         */
        cursor?: SurgeriesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` Surgeries from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` Surgeries.
         */
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * Surgeries create
     */
    export type SurgeriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * The data needed to create a Surgeries.
         */
        data: XOR<SurgeriesCreateInput, SurgeriesUncheckedCreateInput>
    };
    /**
     * Surgeries createMany
     */
    export type SurgeriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many Surgeries.
         */
        data: SurgeriesCreateManyInput | SurgeriesCreateManyInput[]
    };
    /**
     * Surgeries createManyAndReturn
     */
    export type SurgeriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * The data used to create many Surgeries.
         */
        data: SurgeriesCreateManyInput | SurgeriesCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * Surgeries update
     */
    export type SurgeriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * The data needed to update a Surgeries.
         */
        data: XOR<SurgeriesUpdateInput, SurgeriesUncheckedUpdateInput>
        /**
         * Choose, which Surgeries to update.
         */
        where: SurgeriesWhereUniqueInput
    };
    /**
     * Surgeries updateMany
     */
    export type SurgeriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update Surgeries.
         */
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyInput>
        /**
         * Filter which Surgeries to update
         */
        where?: SurgeriesWhereInput
        /**
         * Limit how many Surgeries to update.
         */
        limit?: number
    };
    /**
     * Surgeries updateManyAndReturn
     */
    export type SurgeriesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * The data used to update Surgeries.
         */
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyInput>
        /**
         * Filter which Surgeries to update
         */
        where?: SurgeriesWhereInput
        /**
         * Limit how many Surgeries to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * Surgeries upsert
     */
    export type SurgeriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * The filter to search for the Surgeries to update in case it exists.
         */
        where: SurgeriesWhereUniqueInput
        /**
         * In case the Surgeries found by the `where` argument doesn't exist, create a new Surgeries with this data.
         */
        create: XOR<SurgeriesCreateInput, SurgeriesUncheckedCreateInput>
        /**
         * In case the Surgeries was found with the provided `where` argument, update it with this data.
         */
        update: XOR<SurgeriesUpdateInput, SurgeriesUncheckedUpdateInput>
    };
    /**
     * Surgeries delete
     */
    export type SurgeriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        /**
         * Filter which Surgeries to delete.
         */
        where: SurgeriesWhereUniqueInput
    };
    /**
     * Surgeries deleteMany
     */
    export type SurgeriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which Surgeries to delete
         */
        where?: SurgeriesWhereInput
        /**
         * Limit how many Surgeries to delete.
         */
        limit?: number
    };
    /**
     * Surgeries.createdByUser
     */
    export type Surgeries$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Surgeries.updatedByUser
     */
    export type Surgeries$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Surgeries.deletedByUser
     */
    export type Surgeries$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * Surgeries.organization
     */
    export type Surgeries$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * Surgeries without action
     */
    export type SurgeriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
    };
    /**
     * Model SurgeriesValues
     */
    export type AggregateSurgeriesValues = {
        _count: SurgeriesValuesCountAggregateOutputType | null
        _min: SurgeriesValuesMinAggregateOutputType | null
        _max: SurgeriesValuesMaxAggregateOutputType | null
    };
    export type SurgeriesValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type SurgeriesValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type SurgeriesValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type SurgeriesValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type SurgeriesValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type SurgeriesValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type SurgeriesValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which SurgeriesValues to aggregate.
         */
        where?: SurgeriesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of SurgeriesValues to fetch.
         */
        orderBy?: SurgeriesValuesOrderByWithRelationInput | SurgeriesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: SurgeriesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` SurgeriesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` SurgeriesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned SurgeriesValues
        **/
        _count?: true | SurgeriesValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: SurgeriesValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: SurgeriesValuesMaxAggregateInputType
    };
    export type GetSurgeriesValuesAggregateType<T extends SurgeriesValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateSurgeriesValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurgeriesValues[P]>
        : GetScalarType<T[P], AggregateSurgeriesValues[P]>
    };
    export type SurgeriesValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: SurgeriesValuesWhereInput
        orderBy?: SurgeriesValuesOrderByWithAggregationInput | SurgeriesValuesOrderByWithAggregationInput[]
        by: SurgeriesValuesScalarFieldEnum[] | SurgeriesValuesScalarFieldEnum
        having?: SurgeriesValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: SurgeriesValuesCountAggregateInputType | true
        _min?: SurgeriesValuesMinAggregateInputType
        _max?: SurgeriesValuesMaxAggregateInputType
    };
    export type SurgeriesValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: SurgeriesValuesCountAggregateOutputType | null
        _min: SurgeriesValuesMinAggregateOutputType | null
        _max: SurgeriesValuesMaxAggregateOutputType | null
    };
    type GetSurgeriesValuesGroupByPayload<T extends SurgeriesValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<SurgeriesValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof SurgeriesValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], SurgeriesValuesGroupByOutputType[P]>
                : GetScalarType<T[P], SurgeriesValuesGroupByOutputType[P]>
            }
        >
    >;
    export type SurgeriesValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        surgeries?: boolean | SurgeriesValues$surgeriesArgs<ExtArgs>
        _count?: boolean | SurgeriesValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["surgeriesValues"]>;
    export type SurgeriesValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["surgeriesValues"]>;
    export type SurgeriesValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["surgeriesValues"]>;
    export type SurgeriesValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type SurgeriesValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["surgeriesValues"]>;
    export type SurgeriesValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        surgeries?: boolean | SurgeriesValues$surgeriesArgs<ExtArgs>
        _count?: boolean | SurgeriesValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type SurgeriesValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type SurgeriesValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $SurgeriesValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "SurgeriesValues"
        objects: {
            surgeries: Prisma.$SurgeriesPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["surgeriesValues"]>
        composites: {}
    };
    type SurgeriesValuesGetPayload<S extends boolean | null | undefined | SurgeriesValuesDefaultArgs> = $Result.GetResult<Prisma.$SurgeriesValuesPayload, S>;
    type SurgeriesValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<SurgeriesValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: SurgeriesValuesCountAggregateInputType | true
    };
    /**
     * SurgeriesValues findUnique
     */
    export type SurgeriesValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * Filter, which SurgeriesValues to fetch.
         */
        where: SurgeriesValuesWhereUniqueInput
    };
    /**
     * SurgeriesValues findUniqueOrThrow
     */
    export type SurgeriesValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * Filter, which SurgeriesValues to fetch.
         */
        where: SurgeriesValuesWhereUniqueInput
    };
    /**
     * SurgeriesValues findFirst
     */
    export type SurgeriesValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * Filter, which SurgeriesValues to fetch.
         */
        where?: SurgeriesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of SurgeriesValues to fetch.
         */
        orderBy?: SurgeriesValuesOrderByWithRelationInput | SurgeriesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for SurgeriesValues.
         */
        cursor?: SurgeriesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` SurgeriesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` SurgeriesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of SurgeriesValues.
         */
        distinct?: SurgeriesValuesScalarFieldEnum | SurgeriesValuesScalarFieldEnum[]
    };
    /**
     * SurgeriesValues findFirstOrThrow
     */
    export type SurgeriesValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * Filter, which SurgeriesValues to fetch.
         */
        where?: SurgeriesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of SurgeriesValues to fetch.
         */
        orderBy?: SurgeriesValuesOrderByWithRelationInput | SurgeriesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for SurgeriesValues.
         */
        cursor?: SurgeriesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` SurgeriesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` SurgeriesValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of SurgeriesValues.
         */
        distinct?: SurgeriesValuesScalarFieldEnum | SurgeriesValuesScalarFieldEnum[]
    };
    /**
     * SurgeriesValues findMany
     */
    export type SurgeriesValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * Filter, which SurgeriesValues to fetch.
         */
        where?: SurgeriesValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of SurgeriesValues to fetch.
         */
        orderBy?: SurgeriesValuesOrderByWithRelationInput | SurgeriesValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing SurgeriesValues.
         */
        cursor?: SurgeriesValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` SurgeriesValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` SurgeriesValues.
         */
        skip?: number
        distinct?: SurgeriesValuesScalarFieldEnum | SurgeriesValuesScalarFieldEnum[]
    };
    /**
     * SurgeriesValues create
     */
    export type SurgeriesValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a SurgeriesValues.
         */
        data: XOR<SurgeriesValuesCreateInput, SurgeriesValuesUncheckedCreateInput>
    };
    /**
     * SurgeriesValues createMany
     */
    export type SurgeriesValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many SurgeriesValues.
         */
        data: SurgeriesValuesCreateManyInput | SurgeriesValuesCreateManyInput[]
    };
    /**
     * SurgeriesValues createManyAndReturn
     */
    export type SurgeriesValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * The data used to create many SurgeriesValues.
         */
        data: SurgeriesValuesCreateManyInput | SurgeriesValuesCreateManyInput[]
    };
    /**
     * SurgeriesValues update
     */
    export type SurgeriesValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a SurgeriesValues.
         */
        data: XOR<SurgeriesValuesUpdateInput, SurgeriesValuesUncheckedUpdateInput>
        /**
         * Choose, which SurgeriesValues to update.
         */
        where: SurgeriesValuesWhereUniqueInput
    };
    /**
     * SurgeriesValues updateMany
     */
    export type SurgeriesValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update SurgeriesValues.
         */
        data: XOR<SurgeriesValuesUpdateManyMutationInput, SurgeriesValuesUncheckedUpdateManyInput>
        /**
         * Filter which SurgeriesValues to update
         */
        where?: SurgeriesValuesWhereInput
        /**
         * Limit how many SurgeriesValues to update.
         */
        limit?: number
    };
    /**
     * SurgeriesValues updateManyAndReturn
     */
    export type SurgeriesValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * The data used to update SurgeriesValues.
         */
        data: XOR<SurgeriesValuesUpdateManyMutationInput, SurgeriesValuesUncheckedUpdateManyInput>
        /**
         * Filter which SurgeriesValues to update
         */
        where?: SurgeriesValuesWhereInput
        /**
         * Limit how many SurgeriesValues to update.
         */
        limit?: number
    };
    /**
     * SurgeriesValues upsert
     */
    export type SurgeriesValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the SurgeriesValues to update in case it exists.
         */
        where: SurgeriesValuesWhereUniqueInput
        /**
         * In case the SurgeriesValues found by the `where` argument doesn't exist, create a new SurgeriesValues with this data.
         */
        create: XOR<SurgeriesValuesCreateInput, SurgeriesValuesUncheckedCreateInput>
        /**
         * In case the SurgeriesValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<SurgeriesValuesUpdateInput, SurgeriesValuesUncheckedUpdateInput>
    };
    /**
     * SurgeriesValues delete
     */
    export type SurgeriesValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
        /**
         * Filter which SurgeriesValues to delete.
         */
        where: SurgeriesValuesWhereUniqueInput
    };
    /**
     * SurgeriesValues deleteMany
     */
    export type SurgeriesValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which SurgeriesValues to delete
         */
        where?: SurgeriesValuesWhereInput
        /**
         * Limit how many SurgeriesValues to delete.
         */
        limit?: number
    };
    /**
     * SurgeriesValues.surgeries
     */
    export type SurgeriesValues$surgeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Surgeries
         */
        select?: SurgeriesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Surgeries
         */
        omit?: SurgeriesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesInclude<ExtArgs> | null
        where?: SurgeriesWhereInput
        orderBy?: SurgeriesOrderByWithRelationInput | SurgeriesOrderByWithRelationInput[]
        cursor?: SurgeriesWhereUniqueInput
        take?: number
        skip?: number
        distinct?: SurgeriesScalarFieldEnum | SurgeriesScalarFieldEnum[]
    };
    /**
     * SurgeriesValues without action
     */
    export type SurgeriesValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the SurgeriesValues
         */
        select?: SurgeriesValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the SurgeriesValues
         */
        omit?: SurgeriesValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: SurgeriesValuesInclude<ExtArgs> | null
    };
    /**
     * Model HealthPlans
     */
    export type AggregateHealthPlans = {
        _count: HealthPlansCountAggregateOutputType | null
        _min: HealthPlansMinAggregateOutputType | null
        _max: HealthPlansMaxAggregateOutputType | null
    };
    export type HealthPlansMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        healthPlansValuesId: string | null
    };
    export type HealthPlansMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        patientId: string | null
        healthPlansValuesId: string | null
    };
    export type HealthPlansCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        patientId: number
        healthPlansValuesId: number
        _all: number
    };
    export type HealthPlansMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        healthPlansValuesId?: true
    };
    export type HealthPlansMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        healthPlansValuesId?: true
    };
    export type HealthPlansCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        patientId?: true
        healthPlansValuesId?: true
        _all?: true
    };
    export type HealthPlansAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which HealthPlans to aggregate.
         */
        where?: HealthPlansWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlans to fetch.
         */
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: HealthPlansWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlans from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlans.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned HealthPlans
        **/
        _count?: true | HealthPlansCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: HealthPlansMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: HealthPlansMaxAggregateInputType
    };
    export type GetHealthPlansAggregateType<T extends HealthPlansAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthPlans]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthPlans[P]>
        : GetScalarType<T[P], AggregateHealthPlans[P]>
    };
    export type HealthPlansGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithAggregationInput | HealthPlansOrderByWithAggregationInput[]
        by: HealthPlansScalarFieldEnum[] | HealthPlansScalarFieldEnum
        having?: HealthPlansScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: HealthPlansCountAggregateInputType | true
        _min?: HealthPlansMinAggregateInputType
        _max?: HealthPlansMaxAggregateInputType
    };
    export type HealthPlansGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        patientId: string
        healthPlansValuesId: string
        _count: HealthPlansCountAggregateOutputType | null
        _min: HealthPlansMinAggregateOutputType | null
        _max: HealthPlansMaxAggregateOutputType | null
    };
    type GetHealthPlansGroupByPayload<T extends HealthPlansGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<HealthPlansGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof HealthPlansGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], HealthPlansGroupByOutputType[P]>
                : GetScalarType<T[P], HealthPlansGroupByOutputType[P]>
            }
        >
    >;
    export type HealthPlansSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        healthPlansValuesId?: boolean
        createdByUser?: boolean | HealthPlans$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | HealthPlans$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | HealthPlans$deletedByUserArgs<ExtArgs>
        organization?: boolean | HealthPlans$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        healthPlansValues?: boolean | HealthPlansValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["healthPlans"]>;
    export type HealthPlansSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        healthPlansValuesId?: boolean
        createdByUser?: boolean | HealthPlans$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | HealthPlans$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | HealthPlans$deletedByUserArgs<ExtArgs>
        organization?: boolean | HealthPlans$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        healthPlansValues?: boolean | HealthPlansValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["healthPlans"]>;
    export type HealthPlansSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        healthPlansValuesId?: boolean
        createdByUser?: boolean | HealthPlans$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | HealthPlans$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | HealthPlans$deletedByUserArgs<ExtArgs>
        organization?: boolean | HealthPlans$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        healthPlansValues?: boolean | HealthPlansValuesDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["healthPlans"]>;
    export type HealthPlansSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        patientId?: boolean
        healthPlansValuesId?: boolean
    };
    export type HealthPlansOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "patientId" | "healthPlansValuesId", ExtArgs["result"]["healthPlans"]>;
    export type HealthPlansInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | HealthPlans$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | HealthPlans$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | HealthPlans$deletedByUserArgs<ExtArgs>
        organization?: boolean | HealthPlans$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        healthPlansValues?: boolean | HealthPlansValuesDefaultArgs<ExtArgs>
    };
    export type HealthPlansIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | HealthPlans$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | HealthPlans$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | HealthPlans$deletedByUserArgs<ExtArgs>
        organization?: boolean | HealthPlans$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        healthPlansValues?: boolean | HealthPlansValuesDefaultArgs<ExtArgs>
    };
    export type HealthPlansIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | HealthPlans$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | HealthPlans$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | HealthPlans$deletedByUserArgs<ExtArgs>
        organization?: boolean | HealthPlans$organizationArgs<ExtArgs>
        patient?: boolean | PatientDefaultArgs<ExtArgs>
        healthPlansValues?: boolean | HealthPlansValuesDefaultArgs<ExtArgs>
    };
    export type $HealthPlansPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "HealthPlans"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            patient: Prisma.$PatientPayload<ExtArgs>
            healthPlansValues: Prisma.$HealthPlansValuesPayload<ExtArgs>
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            patientId: string
            healthPlansValuesId: string
        }, ExtArgs["result"]["healthPlans"]>
        composites: {}
    };
    type HealthPlansGetPayload<S extends boolean | null | undefined | HealthPlansDefaultArgs> = $Result.GetResult<Prisma.$HealthPlansPayload, S>;
    type HealthPlansCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<HealthPlansFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: HealthPlansCountAggregateInputType | true
    };
    /**
     * HealthPlans findUnique
     */
    export type HealthPlansFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlans to fetch.
         */
        where: HealthPlansWhereUniqueInput
    };
    /**
     * HealthPlans findUniqueOrThrow
     */
    export type HealthPlansFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlans to fetch.
         */
        where: HealthPlansWhereUniqueInput
    };
    /**
     * HealthPlans findFirst
     */
    export type HealthPlansFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlans to fetch.
         */
        where?: HealthPlansWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlans to fetch.
         */
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for HealthPlans.
         */
        cursor?: HealthPlansWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlans from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlans.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of HealthPlans.
         */
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * HealthPlans findFirstOrThrow
     */
    export type HealthPlansFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlans to fetch.
         */
        where?: HealthPlansWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlans to fetch.
         */
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for HealthPlans.
         */
        cursor?: HealthPlansWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlans from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlans.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of HealthPlans.
         */
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * HealthPlans findMany
     */
    export type HealthPlansFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlans to fetch.
         */
        where?: HealthPlansWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlans to fetch.
         */
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing HealthPlans.
         */
        cursor?: HealthPlansWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlans from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlans.
         */
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * HealthPlans create
     */
    export type HealthPlansCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * The data needed to create a HealthPlans.
         */
        data: XOR<HealthPlansCreateInput, HealthPlansUncheckedCreateInput>
    };
    /**
     * HealthPlans createMany
     */
    export type HealthPlansCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many HealthPlans.
         */
        data: HealthPlansCreateManyInput | HealthPlansCreateManyInput[]
    };
    /**
     * HealthPlans createManyAndReturn
     */
    export type HealthPlansCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * The data used to create many HealthPlans.
         */
        data: HealthPlansCreateManyInput | HealthPlansCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * HealthPlans update
     */
    export type HealthPlansUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * The data needed to update a HealthPlans.
         */
        data: XOR<HealthPlansUpdateInput, HealthPlansUncheckedUpdateInput>
        /**
         * Choose, which HealthPlans to update.
         */
        where: HealthPlansWhereUniqueInput
    };
    /**
     * HealthPlans updateMany
     */
    export type HealthPlansUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update HealthPlans.
         */
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyInput>
        /**
         * Filter which HealthPlans to update
         */
        where?: HealthPlansWhereInput
        /**
         * Limit how many HealthPlans to update.
         */
        limit?: number
    };
    /**
     * HealthPlans updateManyAndReturn
     */
    export type HealthPlansUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * The data used to update HealthPlans.
         */
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyInput>
        /**
         * Filter which HealthPlans to update
         */
        where?: HealthPlansWhereInput
        /**
         * Limit how many HealthPlans to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * HealthPlans upsert
     */
    export type HealthPlansUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * The filter to search for the HealthPlans to update in case it exists.
         */
        where: HealthPlansWhereUniqueInput
        /**
         * In case the HealthPlans found by the `where` argument doesn't exist, create a new HealthPlans with this data.
         */
        create: XOR<HealthPlansCreateInput, HealthPlansUncheckedCreateInput>
        /**
         * In case the HealthPlans was found with the provided `where` argument, update it with this data.
         */
        update: XOR<HealthPlansUpdateInput, HealthPlansUncheckedUpdateInput>
    };
    /**
     * HealthPlans delete
     */
    export type HealthPlansDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        /**
         * Filter which HealthPlans to delete.
         */
        where: HealthPlansWhereUniqueInput
    };
    /**
     * HealthPlans deleteMany
     */
    export type HealthPlansDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which HealthPlans to delete
         */
        where?: HealthPlansWhereInput
        /**
         * Limit how many HealthPlans to delete.
         */
        limit?: number
    };
    /**
     * HealthPlans.createdByUser
     */
    export type HealthPlans$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * HealthPlans.updatedByUser
     */
    export type HealthPlans$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * HealthPlans.deletedByUser
     */
    export type HealthPlans$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * HealthPlans.organization
     */
    export type HealthPlans$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * HealthPlans without action
     */
    export type HealthPlansDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
    };
    /**
     * Model HealthPlansValues
     */
    export type AggregateHealthPlansValues = {
        _count: HealthPlansValuesCountAggregateOutputType | null
        _min: HealthPlansValuesMinAggregateOutputType | null
        _max: HealthPlansValuesMaxAggregateOutputType | null
    };
    export type HealthPlansValuesMinAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type HealthPlansValuesMaxAggregateOutputType = {
        id: string | null
        value: string | null
        createdAt: Date | null
    };
    export type HealthPlansValuesCountAggregateOutputType = {
        id: number
        value: number
        createdAt: number
        _all: number
    };
    export type HealthPlansValuesMinAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type HealthPlansValuesMaxAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
    };
    export type HealthPlansValuesCountAggregateInputType = {
        id?: true
        value?: true
        createdAt?: true
        _all?: true
    };
    export type HealthPlansValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which HealthPlansValues to aggregate.
         */
        where?: HealthPlansValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlansValues to fetch.
         */
        orderBy?: HealthPlansValuesOrderByWithRelationInput | HealthPlansValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: HealthPlansValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlansValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlansValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned HealthPlansValues
        **/
        _count?: true | HealthPlansValuesCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: HealthPlansValuesMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: HealthPlansValuesMaxAggregateInputType
    };
    export type GetHealthPlansValuesAggregateType<T extends HealthPlansValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthPlansValues]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthPlansValues[P]>
        : GetScalarType<T[P], AggregateHealthPlansValues[P]>
    };
    export type HealthPlansValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: HealthPlansValuesWhereInput
        orderBy?: HealthPlansValuesOrderByWithAggregationInput | HealthPlansValuesOrderByWithAggregationInput[]
        by: HealthPlansValuesScalarFieldEnum[] | HealthPlansValuesScalarFieldEnum
        having?: HealthPlansValuesScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: HealthPlansValuesCountAggregateInputType | true
        _min?: HealthPlansValuesMinAggregateInputType
        _max?: HealthPlansValuesMaxAggregateInputType
    };
    export type HealthPlansValuesGroupByOutputType = {
        id: string
        value: string
        createdAt: Date
        _count: HealthPlansValuesCountAggregateOutputType | null
        _min: HealthPlansValuesMinAggregateOutputType | null
        _max: HealthPlansValuesMaxAggregateOutputType | null
    };
    type GetHealthPlansValuesGroupByPayload<T extends HealthPlansValuesGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<HealthPlansValuesGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof HealthPlansValuesGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], HealthPlansValuesGroupByOutputType[P]>
                : GetScalarType<T[P], HealthPlansValuesGroupByOutputType[P]>
            }
        >
    >;
    export type HealthPlansValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
        healthPlans?: boolean | HealthPlansValues$healthPlansArgs<ExtArgs>
        _count?: boolean | HealthPlansValuesCountOutputTypeDefaultArgs<ExtArgs>
    }, ExtArgs["result"]["healthPlansValues"]>;
    export type HealthPlansValuesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["healthPlansValues"]>;
    export type HealthPlansValuesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        value?: boolean
        createdAt?: boolean
    }, ExtArgs["result"]["healthPlansValues"]>;
    export type HealthPlansValuesSelectScalar = {
        id?: boolean
        value?: boolean
        createdAt?: boolean
    };
    export type HealthPlansValuesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "createdAt", ExtArgs["result"]["healthPlansValues"]>;
    export type HealthPlansValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        healthPlans?: boolean | HealthPlansValues$healthPlansArgs<ExtArgs>
        _count?: boolean | HealthPlansValuesCountOutputTypeDefaultArgs<ExtArgs>
    };
    export type HealthPlansValuesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type HealthPlansValuesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {};
    export type $HealthPlansValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "HealthPlansValues"
        objects: {
            healthPlans: Prisma.$HealthPlansPayload<ExtArgs>[]
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            value: string
            createdAt: Date
        }, ExtArgs["result"]["healthPlansValues"]>
        composites: {}
    };
    type HealthPlansValuesGetPayload<S extends boolean | null | undefined | HealthPlansValuesDefaultArgs> = $Result.GetResult<Prisma.$HealthPlansValuesPayload, S>;
    type HealthPlansValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<HealthPlansValuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: HealthPlansValuesCountAggregateInputType | true
    };
    /**
     * HealthPlansValues findUnique
     */
    export type HealthPlansValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlansValues to fetch.
         */
        where: HealthPlansValuesWhereUniqueInput
    };
    /**
     * HealthPlansValues findUniqueOrThrow
     */
    export type HealthPlansValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlansValues to fetch.
         */
        where: HealthPlansValuesWhereUniqueInput
    };
    /**
     * HealthPlansValues findFirst
     */
    export type HealthPlansValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlansValues to fetch.
         */
        where?: HealthPlansValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlansValues to fetch.
         */
        orderBy?: HealthPlansValuesOrderByWithRelationInput | HealthPlansValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for HealthPlansValues.
         */
        cursor?: HealthPlansValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlansValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlansValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of HealthPlansValues.
         */
        distinct?: HealthPlansValuesScalarFieldEnum | HealthPlansValuesScalarFieldEnum[]
    };
    /**
     * HealthPlansValues findFirstOrThrow
     */
    export type HealthPlansValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlansValues to fetch.
         */
        where?: HealthPlansValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlansValues to fetch.
         */
        orderBy?: HealthPlansValuesOrderByWithRelationInput | HealthPlansValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for HealthPlansValues.
         */
        cursor?: HealthPlansValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlansValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlansValues.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of HealthPlansValues.
         */
        distinct?: HealthPlansValuesScalarFieldEnum | HealthPlansValuesScalarFieldEnum[]
    };
    /**
     * HealthPlansValues findMany
     */
    export type HealthPlansValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * Filter, which HealthPlansValues to fetch.
         */
        where?: HealthPlansValuesWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of HealthPlansValues to fetch.
         */
        orderBy?: HealthPlansValuesOrderByWithRelationInput | HealthPlansValuesOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing HealthPlansValues.
         */
        cursor?: HealthPlansValuesWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` HealthPlansValues from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` HealthPlansValues.
         */
        skip?: number
        distinct?: HealthPlansValuesScalarFieldEnum | HealthPlansValuesScalarFieldEnum[]
    };
    /**
     * HealthPlansValues create
     */
    export type HealthPlansValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * The data needed to create a HealthPlansValues.
         */
        data: XOR<HealthPlansValuesCreateInput, HealthPlansValuesUncheckedCreateInput>
    };
    /**
     * HealthPlansValues createMany
     */
    export type HealthPlansValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many HealthPlansValues.
         */
        data: HealthPlansValuesCreateManyInput | HealthPlansValuesCreateManyInput[]
    };
    /**
     * HealthPlansValues createManyAndReturn
     */
    export type HealthPlansValuesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * The data used to create many HealthPlansValues.
         */
        data: HealthPlansValuesCreateManyInput | HealthPlansValuesCreateManyInput[]
    };
    /**
     * HealthPlansValues update
     */
    export type HealthPlansValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * The data needed to update a HealthPlansValues.
         */
        data: XOR<HealthPlansValuesUpdateInput, HealthPlansValuesUncheckedUpdateInput>
        /**
         * Choose, which HealthPlansValues to update.
         */
        where: HealthPlansValuesWhereUniqueInput
    };
    /**
     * HealthPlansValues updateMany
     */
    export type HealthPlansValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update HealthPlansValues.
         */
        data: XOR<HealthPlansValuesUpdateManyMutationInput, HealthPlansValuesUncheckedUpdateManyInput>
        /**
         * Filter which HealthPlansValues to update
         */
        where?: HealthPlansValuesWhereInput
        /**
         * Limit how many HealthPlansValues to update.
         */
        limit?: number
    };
    /**
     * HealthPlansValues updateManyAndReturn
     */
    export type HealthPlansValuesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * The data used to update HealthPlansValues.
         */
        data: XOR<HealthPlansValuesUpdateManyMutationInput, HealthPlansValuesUncheckedUpdateManyInput>
        /**
         * Filter which HealthPlansValues to update
         */
        where?: HealthPlansValuesWhereInput
        /**
         * Limit how many HealthPlansValues to update.
         */
        limit?: number
    };
    /**
     * HealthPlansValues upsert
     */
    export type HealthPlansValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * The filter to search for the HealthPlansValues to update in case it exists.
         */
        where: HealthPlansValuesWhereUniqueInput
        /**
         * In case the HealthPlansValues found by the `where` argument doesn't exist, create a new HealthPlansValues with this data.
         */
        create: XOR<HealthPlansValuesCreateInput, HealthPlansValuesUncheckedCreateInput>
        /**
         * In case the HealthPlansValues was found with the provided `where` argument, update it with this data.
         */
        update: XOR<HealthPlansValuesUpdateInput, HealthPlansValuesUncheckedUpdateInput>
    };
    /**
     * HealthPlansValues delete
     */
    export type HealthPlansValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
        /**
         * Filter which HealthPlansValues to delete.
         */
        where: HealthPlansValuesWhereUniqueInput
    };
    /**
     * HealthPlansValues deleteMany
     */
    export type HealthPlansValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which HealthPlansValues to delete
         */
        where?: HealthPlansValuesWhereInput
        /**
         * Limit how many HealthPlansValues to delete.
         */
        limit?: number
    };
    /**
     * HealthPlansValues.healthPlans
     */
    export type HealthPlansValues$healthPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlans
         */
        select?: HealthPlansSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlans
         */
        omit?: HealthPlansOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansInclude<ExtArgs> | null
        where?: HealthPlansWhereInput
        orderBy?: HealthPlansOrderByWithRelationInput | HealthPlansOrderByWithRelationInput[]
        cursor?: HealthPlansWhereUniqueInput
        take?: number
        skip?: number
        distinct?: HealthPlansScalarFieldEnum | HealthPlansScalarFieldEnum[]
    };
    /**
     * HealthPlansValues without action
     */
    export type HealthPlansValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the HealthPlansValues
         */
        select?: HealthPlansValuesSelect<ExtArgs> | null
        /**
         * Omit specific fields from the HealthPlansValues
         */
        omit?: HealthPlansValuesOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: HealthPlansValuesInclude<ExtArgs> | null
    };
    /**
     * Model DefaultObjectiveInformation
     */
    export type AggregateDefaultObjectiveInformation = {
        _count: DefaultObjectiveInformationCountAggregateOutputType | null
        _min: DefaultObjectiveInformationMinAggregateOutputType | null
        _max: DefaultObjectiveInformationMaxAggregateOutputType | null
    };
    export type DefaultObjectiveInformationMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        text: string | null
    };
    export type DefaultObjectiveInformationMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        text: string | null
    };
    export type DefaultObjectiveInformationCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        text: number
        _all: number
    };
    export type DefaultObjectiveInformationMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        text?: true
    };
    export type DefaultObjectiveInformationMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        text?: true
    };
    export type DefaultObjectiveInformationCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        text?: true
        _all?: true
    };
    export type DefaultObjectiveInformationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which DefaultObjectiveInformation to aggregate.
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of DefaultObjectiveInformations to fetch.
         */
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` DefaultObjectiveInformations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` DefaultObjectiveInformations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned DefaultObjectiveInformations
        **/
        _count?: true | DefaultObjectiveInformationCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: DefaultObjectiveInformationMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: DefaultObjectiveInformationMaxAggregateInputType
    };
    export type GetDefaultObjectiveInformationAggregateType<T extends DefaultObjectiveInformationAggregateArgs> = {
        [P in keyof T & keyof AggregateDefaultObjectiveInformation]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefaultObjectiveInformation[P]>
        : GetScalarType<T[P], AggregateDefaultObjectiveInformation[P]>
    };
    export type DefaultObjectiveInformationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: DefaultObjectiveInformationWhereInput
        orderBy?: DefaultObjectiveInformationOrderByWithAggregationInput | DefaultObjectiveInformationOrderByWithAggregationInput[]
        by: DefaultObjectiveInformationScalarFieldEnum[] | DefaultObjectiveInformationScalarFieldEnum
        having?: DefaultObjectiveInformationScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: DefaultObjectiveInformationCountAggregateInputType | true
        _min?: DefaultObjectiveInformationMinAggregateInputType
        _max?: DefaultObjectiveInformationMaxAggregateInputType
    };
    export type DefaultObjectiveInformationGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        text: string | null
        _count: DefaultObjectiveInformationCountAggregateOutputType | null
        _min: DefaultObjectiveInformationMinAggregateOutputType | null
        _max: DefaultObjectiveInformationMaxAggregateOutputType | null
    };
    type GetDefaultObjectiveInformationGroupByPayload<T extends DefaultObjectiveInformationGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<DefaultObjectiveInformationGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof DefaultObjectiveInformationGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], DefaultObjectiveInformationGroupByOutputType[P]>
                : GetScalarType<T[P], DefaultObjectiveInformationGroupByOutputType[P]>
            }
        >
    >;
    export type DefaultObjectiveInformationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        text?: boolean
        createdByUser?: boolean | DefaultObjectiveInformation$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>
        organization?: boolean | DefaultObjectiveInformation$organizationArgs<ExtArgs>
    }, ExtArgs["result"]["defaultObjectiveInformation"]>;
    export type DefaultObjectiveInformationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        text?: boolean
        createdByUser?: boolean | DefaultObjectiveInformation$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>
        organization?: boolean | DefaultObjectiveInformation$organizationArgs<ExtArgs>
    }, ExtArgs["result"]["defaultObjectiveInformation"]>;
    export type DefaultObjectiveInformationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        text?: boolean
        createdByUser?: boolean | DefaultObjectiveInformation$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>
        organization?: boolean | DefaultObjectiveInformation$organizationArgs<ExtArgs>
    }, ExtArgs["result"]["defaultObjectiveInformation"]>;
    export type DefaultObjectiveInformationSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        text?: boolean
    };
    export type DefaultObjectiveInformationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "text", ExtArgs["result"]["defaultObjectiveInformation"]>;
    export type DefaultObjectiveInformationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | DefaultObjectiveInformation$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>
        organization?: boolean | DefaultObjectiveInformation$organizationArgs<ExtArgs>
    };
    export type DefaultObjectiveInformationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | DefaultObjectiveInformation$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>
        organization?: boolean | DefaultObjectiveInformation$organizationArgs<ExtArgs>
    };
    export type DefaultObjectiveInformationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | DefaultObjectiveInformation$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | DefaultObjectiveInformation$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | DefaultObjectiveInformation$deletedByUserArgs<ExtArgs>
        organization?: boolean | DefaultObjectiveInformation$organizationArgs<ExtArgs>
    };
    export type $DefaultObjectiveInformationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "DefaultObjectiveInformation"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            text: string | null
        }, ExtArgs["result"]["defaultObjectiveInformation"]>
        composites: {}
    };
    type DefaultObjectiveInformationGetPayload<S extends boolean | null | undefined | DefaultObjectiveInformationDefaultArgs> = $Result.GetResult<Prisma.$DefaultObjectiveInformationPayload, S>;
    type DefaultObjectiveInformationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<DefaultObjectiveInformationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: DefaultObjectiveInformationCountAggregateInputType | true
    };
    /**
     * DefaultObjectiveInformation findUnique
     */
    export type DefaultObjectiveInformationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * Filter, which DefaultObjectiveInformation to fetch.
         */
        where: DefaultObjectiveInformationWhereUniqueInput
    };
    /**
     * DefaultObjectiveInformation findUniqueOrThrow
     */
    export type DefaultObjectiveInformationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * Filter, which DefaultObjectiveInformation to fetch.
         */
        where: DefaultObjectiveInformationWhereUniqueInput
    };
    /**
     * DefaultObjectiveInformation findFirst
     */
    export type DefaultObjectiveInformationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * Filter, which DefaultObjectiveInformation to fetch.
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of DefaultObjectiveInformations to fetch.
         */
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for DefaultObjectiveInformations.
         */
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` DefaultObjectiveInformations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` DefaultObjectiveInformations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of DefaultObjectiveInformations.
         */
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * DefaultObjectiveInformation findFirstOrThrow
     */
    export type DefaultObjectiveInformationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * Filter, which DefaultObjectiveInformation to fetch.
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of DefaultObjectiveInformations to fetch.
         */
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for DefaultObjectiveInformations.
         */
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` DefaultObjectiveInformations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` DefaultObjectiveInformations.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of DefaultObjectiveInformations.
         */
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * DefaultObjectiveInformation findMany
     */
    export type DefaultObjectiveInformationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * Filter, which DefaultObjectiveInformations to fetch.
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of DefaultObjectiveInformations to fetch.
         */
        orderBy?: DefaultObjectiveInformationOrderByWithRelationInput | DefaultObjectiveInformationOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing DefaultObjectiveInformations.
         */
        cursor?: DefaultObjectiveInformationWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` DefaultObjectiveInformations from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` DefaultObjectiveInformations.
         */
        skip?: number
        distinct?: DefaultObjectiveInformationScalarFieldEnum | DefaultObjectiveInformationScalarFieldEnum[]
    };
    /**
     * DefaultObjectiveInformation create
     */
    export type DefaultObjectiveInformationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * The data needed to create a DefaultObjectiveInformation.
         */
        data: XOR<DefaultObjectiveInformationCreateInput, DefaultObjectiveInformationUncheckedCreateInput>
    };
    /**
     * DefaultObjectiveInformation createMany
     */
    export type DefaultObjectiveInformationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many DefaultObjectiveInformations.
         */
        data: DefaultObjectiveInformationCreateManyInput | DefaultObjectiveInformationCreateManyInput[]
    };
    /**
     * DefaultObjectiveInformation createManyAndReturn
     */
    export type DefaultObjectiveInformationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * The data used to create many DefaultObjectiveInformations.
         */
        data: DefaultObjectiveInformationCreateManyInput | DefaultObjectiveInformationCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * DefaultObjectiveInformation update
     */
    export type DefaultObjectiveInformationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * The data needed to update a DefaultObjectiveInformation.
         */
        data: XOR<DefaultObjectiveInformationUpdateInput, DefaultObjectiveInformationUncheckedUpdateInput>
        /**
         * Choose, which DefaultObjectiveInformation to update.
         */
        where: DefaultObjectiveInformationWhereUniqueInput
    };
    /**
     * DefaultObjectiveInformation updateMany
     */
    export type DefaultObjectiveInformationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update DefaultObjectiveInformations.
         */
        data: XOR<DefaultObjectiveInformationUpdateManyMutationInput, DefaultObjectiveInformationUncheckedUpdateManyInput>
        /**
         * Filter which DefaultObjectiveInformations to update
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * Limit how many DefaultObjectiveInformations to update.
         */
        limit?: number
    };
    /**
     * DefaultObjectiveInformation updateManyAndReturn
     */
    export type DefaultObjectiveInformationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * The data used to update DefaultObjectiveInformations.
         */
        data: XOR<DefaultObjectiveInformationUpdateManyMutationInput, DefaultObjectiveInformationUncheckedUpdateManyInput>
        /**
         * Filter which DefaultObjectiveInformations to update
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * Limit how many DefaultObjectiveInformations to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * DefaultObjectiveInformation upsert
     */
    export type DefaultObjectiveInformationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * The filter to search for the DefaultObjectiveInformation to update in case it exists.
         */
        where: DefaultObjectiveInformationWhereUniqueInput
        /**
         * In case the DefaultObjectiveInformation found by the `where` argument doesn't exist, create a new DefaultObjectiveInformation with this data.
         */
        create: XOR<DefaultObjectiveInformationCreateInput, DefaultObjectiveInformationUncheckedCreateInput>
        /**
         * In case the DefaultObjectiveInformation was found with the provided `where` argument, update it with this data.
         */
        update: XOR<DefaultObjectiveInformationUpdateInput, DefaultObjectiveInformationUncheckedUpdateInput>
    };
    /**
     * DefaultObjectiveInformation delete
     */
    export type DefaultObjectiveInformationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
        /**
         * Filter which DefaultObjectiveInformation to delete.
         */
        where: DefaultObjectiveInformationWhereUniqueInput
    };
    /**
     * DefaultObjectiveInformation deleteMany
     */
    export type DefaultObjectiveInformationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which DefaultObjectiveInformations to delete
         */
        where?: DefaultObjectiveInformationWhereInput
        /**
         * Limit how many DefaultObjectiveInformations to delete.
         */
        limit?: number
    };
    /**
     * DefaultObjectiveInformation.createdByUser
     */
    export type DefaultObjectiveInformation$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * DefaultObjectiveInformation.updatedByUser
     */
    export type DefaultObjectiveInformation$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * DefaultObjectiveInformation.deletedByUser
     */
    export type DefaultObjectiveInformation$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * DefaultObjectiveInformation.organization
     */
    export type DefaultObjectiveInformation$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * DefaultObjectiveInformation without action
     */
    export type DefaultObjectiveInformationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the DefaultObjectiveInformation
         */
        select?: DefaultObjectiveInformationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the DefaultObjectiveInformation
         */
        omit?: DefaultObjectiveInformationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: DefaultObjectiveInformationInclude<ExtArgs> | null
    };
    /**
     * Model EventCalendar
     */
    export type AggregateEventCalendar = {
        _count: EventCalendarCountAggregateOutputType | null
        _min: EventCalendarMinAggregateOutputType | null
        _max: EventCalendarMaxAggregateOutputType | null
    };
    export type EventCalendarMinAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        title: string | null
        description: string | null
        start: Date | null
        end: Date | null
        allDay: boolean | null
        eventType: $Enums.EventCalendarType | null
        rrule: string | null
        appointmentId: string | null
    };
    export type EventCalendarMaxAggregateOutputType = {
        id: string | null
        type: string | null
        createdAt: Date | null
        createdById: string | null
        updatedAt: Date | null
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean | null
        organizationId: string | null
        title: string | null
        description: string | null
        start: Date | null
        end: Date | null
        allDay: boolean | null
        eventType: $Enums.EventCalendarType | null
        rrule: string | null
        appointmentId: string | null
    };
    export type EventCalendarCountAggregateOutputType = {
        id: number
        type: number
        createdAt: number
        createdById: number
        updatedAt: number
        updatedById: number
        deletedAt: number
        deletedById: number
        deleted: number
        organizationId: number
        title: number
        description: number
        start: number
        end: number
        allDay: number
        eventType: number
        rrule: number
        appointmentId: number
        _all: number
    };
    export type EventCalendarMinAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        title?: true
        description?: true
        start?: true
        end?: true
        allDay?: true
        eventType?: true
        rrule?: true
        appointmentId?: true
    };
    export type EventCalendarMaxAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        title?: true
        description?: true
        start?: true
        end?: true
        allDay?: true
        eventType?: true
        rrule?: true
        appointmentId?: true
    };
    export type EventCalendarCountAggregateInputType = {
        id?: true
        type?: true
        createdAt?: true
        createdById?: true
        updatedAt?: true
        updatedById?: true
        deletedAt?: true
        deletedById?: true
        deleted?: true
        organizationId?: true
        title?: true
        description?: true
        start?: true
        end?: true
        allDay?: true
        eventType?: true
        rrule?: true
        appointmentId?: true
        _all?: true
    };
    export type EventCalendarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which EventCalendar to aggregate.
         */
        where?: EventCalendarWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of EventCalendars to fetch.
         */
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the start position
         */
        cursor?: EventCalendarWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` EventCalendars from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` EventCalendars.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Count returned EventCalendars
        **/
        _count?: true | EventCalendarCountAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the minimum value
        **/
        _min?: EventCalendarMinAggregateInputType
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
         * 
         * Select which fields to find the maximum value
        **/
        _max?: EventCalendarMaxAggregateInputType
    };
    export type GetEventCalendarAggregateType<T extends EventCalendarAggregateArgs> = {
        [P in keyof T & keyof AggregateEventCalendar]: P extends '_count' | 'count'
        ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventCalendar[P]>
        : GetScalarType<T[P], AggregateEventCalendar[P]>
    };
    export type EventCalendarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        where?: EventCalendarWhereInput
        orderBy?: EventCalendarOrderByWithAggregationInput | EventCalendarOrderByWithAggregationInput[]
        by: EventCalendarScalarFieldEnum[] | EventCalendarScalarFieldEnum
        having?: EventCalendarScalarWhereWithAggregatesInput
        take?: number
        skip?: number
        _count?: EventCalendarCountAggregateInputType | true
        _min?: EventCalendarMinAggregateInputType
        _max?: EventCalendarMaxAggregateInputType
    };
    export type EventCalendarGroupByOutputType = {
        id: string
        type: string
        createdAt: Date
        createdById: string | null
        updatedAt: Date
        updatedById: string | null
        deletedAt: Date | null
        deletedById: string | null
        deleted: boolean
        organizationId: string | null
        title: string
        description: string | null
        start: Date
        end: Date
        allDay: boolean | null
        eventType: $Enums.EventCalendarType | null
        rrule: string | null
        appointmentId: string | null
        _count: EventCalendarCountAggregateOutputType | null
        _min: EventCalendarMinAggregateOutputType | null
        _max: EventCalendarMaxAggregateOutputType | null
    };
    type GetEventCalendarGroupByPayload<T extends EventCalendarGroupByArgs> = Prisma.PrismaPromise<
        Array<
            PickEnumerable<EventCalendarGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof EventCalendarGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : GetScalarType<T[P], EventCalendarGroupByOutputType[P]>
                : GetScalarType<T[P], EventCalendarGroupByOutputType[P]>
            }
        >
    >;
    export type EventCalendarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        title?: boolean
        description?: boolean
        start?: boolean
        end?: boolean
        allDay?: boolean
        eventType?: boolean
        rrule?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | EventCalendar$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | EventCalendar$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | EventCalendar$deletedByUserArgs<ExtArgs>
        organization?: boolean | EventCalendar$organizationArgs<ExtArgs>
        appointment?: boolean | EventCalendar$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["eventCalendar"]>;
    export type EventCalendarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        title?: boolean
        description?: boolean
        start?: boolean
        end?: boolean
        allDay?: boolean
        eventType?: boolean
        rrule?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | EventCalendar$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | EventCalendar$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | EventCalendar$deletedByUserArgs<ExtArgs>
        organization?: boolean | EventCalendar$organizationArgs<ExtArgs>
        appointment?: boolean | EventCalendar$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["eventCalendar"]>;
    export type EventCalendarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        title?: boolean
        description?: boolean
        start?: boolean
        end?: boolean
        allDay?: boolean
        eventType?: boolean
        rrule?: boolean
        appointmentId?: boolean
        createdByUser?: boolean | EventCalendar$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | EventCalendar$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | EventCalendar$deletedByUserArgs<ExtArgs>
        organization?: boolean | EventCalendar$organizationArgs<ExtArgs>
        appointment?: boolean | EventCalendar$appointmentArgs<ExtArgs>
    }, ExtArgs["result"]["eventCalendar"]>;
    export type EventCalendarSelectScalar = {
        id?: boolean
        type?: boolean
        createdAt?: boolean
        createdById?: boolean
        updatedAt?: boolean
        updatedById?: boolean
        deletedAt?: boolean
        deletedById?: boolean
        deleted?: boolean
        organizationId?: boolean
        title?: boolean
        description?: boolean
        start?: boolean
        end?: boolean
        allDay?: boolean
        eventType?: boolean
        rrule?: boolean
        appointmentId?: boolean
    };
    export type EventCalendarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "createdById" | "updatedAt" | "updatedById" | "deletedAt" | "deletedById" | "deleted" | "organizationId" | "title" | "description" | "start" | "end" | "allDay" | "eventType" | "rrule" | "appointmentId", ExtArgs["result"]["eventCalendar"]>;
    export type EventCalendarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | EventCalendar$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | EventCalendar$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | EventCalendar$deletedByUserArgs<ExtArgs>
        organization?: boolean | EventCalendar$organizationArgs<ExtArgs>
        appointment?: boolean | EventCalendar$appointmentArgs<ExtArgs>
    };
    export type EventCalendarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | EventCalendar$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | EventCalendar$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | EventCalendar$deletedByUserArgs<ExtArgs>
        organization?: boolean | EventCalendar$organizationArgs<ExtArgs>
        appointment?: boolean | EventCalendar$appointmentArgs<ExtArgs>
    };
    export type EventCalendarIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        createdByUser?: boolean | EventCalendar$createdByUserArgs<ExtArgs>
        updatedByUser?: boolean | EventCalendar$updatedByUserArgs<ExtArgs>
        deletedByUser?: boolean | EventCalendar$deletedByUserArgs<ExtArgs>
        organization?: boolean | EventCalendar$organizationArgs<ExtArgs>
        appointment?: boolean | EventCalendar$appointmentArgs<ExtArgs>
    };
    export type $EventCalendarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        name: "EventCalendar"
        objects: {
            createdByUser: Prisma.$UserPayload<ExtArgs> | null
            updatedByUser: Prisma.$UserPayload<ExtArgs> | null
            deletedByUser: Prisma.$UserPayload<ExtArgs> | null
            organization: Prisma.$OrganizationPayload<ExtArgs> | null
            appointment: Prisma.$AppointmentPayload<ExtArgs> | null
        }
        scalars: $Extensions.GetPayloadResult<{
            id: string
            type: string
            createdAt: Date
            createdById: string | null
            updatedAt: Date
            updatedById: string | null
            deletedAt: Date | null
            deletedById: string | null
            /**
             * @omit
             */
            deleted: boolean
            /**
             * @allow('update', false)
             */
            organizationId: string | null
            title: string
            description: string | null
            start: Date
            end: Date
            allDay: boolean | null
            eventType: $Enums.EventCalendarType | null
            rrule: string | null
            appointmentId: string | null
        }, ExtArgs["result"]["eventCalendar"]>
        composites: {}
    };
    type EventCalendarGetPayload<S extends boolean | null | undefined | EventCalendarDefaultArgs> = $Result.GetResult<Prisma.$EventCalendarPayload, S>;
    type EventCalendarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<EventCalendarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
        select?: EventCalendarCountAggregateInputType | true
    };
    /**
     * EventCalendar findUnique
     */
    export type EventCalendarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * Filter, which EventCalendar to fetch.
         */
        where: EventCalendarWhereUniqueInput
    };
    /**
     * EventCalendar findUniqueOrThrow
     */
    export type EventCalendarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * Filter, which EventCalendar to fetch.
         */
        where: EventCalendarWhereUniqueInput
    };
    /**
     * EventCalendar findFirst
     */
    export type EventCalendarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * Filter, which EventCalendar to fetch.
         */
        where?: EventCalendarWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of EventCalendars to fetch.
         */
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for EventCalendars.
         */
        cursor?: EventCalendarWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` EventCalendars from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` EventCalendars.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of EventCalendars.
         */
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * EventCalendar findFirstOrThrow
     */
    export type EventCalendarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * Filter, which EventCalendar to fetch.
         */
        where?: EventCalendarWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of EventCalendars to fetch.
         */
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for searching for EventCalendars.
         */
        cursor?: EventCalendarWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` EventCalendars from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` EventCalendars.
         */
        skip?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
         * 
         * Filter by unique combinations of EventCalendars.
         */
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * EventCalendar findMany
     */
    export type EventCalendarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * Filter, which EventCalendars to fetch.
         */
        where?: EventCalendarWhereInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
         * 
         * Determine the order of EventCalendars to fetch.
         */
        orderBy?: EventCalendarOrderByWithRelationInput | EventCalendarOrderByWithRelationInput[]
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
         * 
         * Sets the position for listing EventCalendars.
         */
        cursor?: EventCalendarWhereUniqueInput
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Take `±n` EventCalendars from the position of the cursor.
         */
        take?: number
        /**
         * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
         * 
         * Skip the first `n` EventCalendars.
         */
        skip?: number
        distinct?: EventCalendarScalarFieldEnum | EventCalendarScalarFieldEnum[]
    };
    /**
     * EventCalendar create
     */
    export type EventCalendarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * The data needed to create a EventCalendar.
         */
        data: XOR<EventCalendarCreateInput, EventCalendarUncheckedCreateInput>
    };
    /**
     * EventCalendar createMany
     */
    export type EventCalendarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to create many EventCalendars.
         */
        data: EventCalendarCreateManyInput | EventCalendarCreateManyInput[]
    };
    /**
     * EventCalendar createManyAndReturn
     */
    export type EventCalendarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelectCreateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * The data used to create many EventCalendars.
         */
        data: EventCalendarCreateManyInput | EventCalendarCreateManyInput[]
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarIncludeCreateManyAndReturn<ExtArgs> | null
    };
    /**
     * EventCalendar update
     */
    export type EventCalendarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * The data needed to update a EventCalendar.
         */
        data: XOR<EventCalendarUpdateInput, EventCalendarUncheckedUpdateInput>
        /**
         * Choose, which EventCalendar to update.
         */
        where: EventCalendarWhereUniqueInput
    };
    /**
     * EventCalendar updateMany
     */
    export type EventCalendarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * The data used to update EventCalendars.
         */
        data: XOR<EventCalendarUpdateManyMutationInput, EventCalendarUncheckedUpdateManyInput>
        /**
         * Filter which EventCalendars to update
         */
        where?: EventCalendarWhereInput
        /**
         * Limit how many EventCalendars to update.
         */
        limit?: number
    };
    /**
     * EventCalendar updateManyAndReturn
     */
    export type EventCalendarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelectUpdateManyAndReturn<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * The data used to update EventCalendars.
         */
        data: XOR<EventCalendarUpdateManyMutationInput, EventCalendarUncheckedUpdateManyInput>
        /**
         * Filter which EventCalendars to update
         */
        where?: EventCalendarWhereInput
        /**
         * Limit how many EventCalendars to update.
         */
        limit?: number
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarIncludeUpdateManyAndReturn<ExtArgs> | null
    };
    /**
     * EventCalendar upsert
     */
    export type EventCalendarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * The filter to search for the EventCalendar to update in case it exists.
         */
        where: EventCalendarWhereUniqueInput
        /**
         * In case the EventCalendar found by the `where` argument doesn't exist, create a new EventCalendar with this data.
         */
        create: XOR<EventCalendarCreateInput, EventCalendarUncheckedCreateInput>
        /**
         * In case the EventCalendar was found with the provided `where` argument, update it with this data.
         */
        update: XOR<EventCalendarUpdateInput, EventCalendarUncheckedUpdateInput>
    };
    /**
     * EventCalendar delete
     */
    export type EventCalendarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
        /**
         * Filter which EventCalendar to delete.
         */
        where: EventCalendarWhereUniqueInput
    };
    /**
     * EventCalendar deleteMany
     */
    export type EventCalendarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Filter which EventCalendars to delete
         */
        where?: EventCalendarWhereInput
        /**
         * Limit how many EventCalendars to delete.
         */
        limit?: number
    };
    /**
     * EventCalendar.createdByUser
     */
    export type EventCalendar$createdByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * EventCalendar.updatedByUser
     */
    export type EventCalendar$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * EventCalendar.deletedByUser
     */
    export type EventCalendar$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the User
         */
        select?: UserSelect<ExtArgs> | null
        /**
         * Omit specific fields from the User
         */
        omit?: UserOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: UserInclude<ExtArgs> | null
        where?: UserWhereInput
    };
    /**
     * EventCalendar.organization
     */
    export type EventCalendar$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Organization
         */
        select?: OrganizationSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Organization
         */
        omit?: OrganizationOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: OrganizationInclude<ExtArgs> | null
        where?: OrganizationWhereInput
    };
    /**
     * EventCalendar.appointment
     */
    export type EventCalendar$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the Appointment
         */
        select?: AppointmentSelect<ExtArgs> | null
        /**
         * Omit specific fields from the Appointment
         */
        omit?: AppointmentOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: AppointmentInclude<ExtArgs> | null
        where?: AppointmentWhereInput
    };
    /**
     * EventCalendar without action
     */
    export type EventCalendarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
        /**
         * Select specific fields to fetch from the EventCalendar
         */
        select?: EventCalendarSelect<ExtArgs> | null
        /**
         * Omit specific fields from the EventCalendar
         */
        omit?: EventCalendarOmit<ExtArgs> | null
        /**
         * Choose, which related nodes to fetch as well
         */
        include?: EventCalendarInclude<ExtArgs> | null
    };
    export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];
    export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];
    export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum];
    export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];
    export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];
    export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum];
    export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum];
    export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum];
    export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum];
    export type CidScalarFieldEnum = (typeof CidScalarFieldEnum)[keyof typeof CidScalarFieldEnum];
    export type AppointmentCidScalarFieldEnum = (typeof AppointmentCidScalarFieldEnum)[keyof typeof AppointmentCidScalarFieldEnum];
    export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum];
    export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum];
    export type VaccinationsScalarFieldEnum = (typeof VaccinationsScalarFieldEnum)[keyof typeof VaccinationsScalarFieldEnum];
    export type VaccinationsValuesScalarFieldEnum = (typeof VaccinationsValuesScalarFieldEnum)[keyof typeof VaccinationsValuesScalarFieldEnum];
    export type AllergiesScalarFieldEnum = (typeof AllergiesScalarFieldEnum)[keyof typeof AllergiesScalarFieldEnum];
    export type AllergiesValuesScalarFieldEnum = (typeof AllergiesValuesScalarFieldEnum)[keyof typeof AllergiesValuesScalarFieldEnum];
    export type MedicationsScalarFieldEnum = (typeof MedicationsScalarFieldEnum)[keyof typeof MedicationsScalarFieldEnum];
    export type MedicationsValuesScalarFieldEnum = (typeof MedicationsValuesScalarFieldEnum)[keyof typeof MedicationsValuesScalarFieldEnum];
    export type ExamResultsScalarFieldEnum = (typeof ExamResultsScalarFieldEnum)[keyof typeof ExamResultsScalarFieldEnum];
    export type ExamResultsValuesScalarFieldEnum = (typeof ExamResultsValuesScalarFieldEnum)[keyof typeof ExamResultsValuesScalarFieldEnum];
    export type ComorbiditiesScalarFieldEnum = (typeof ComorbiditiesScalarFieldEnum)[keyof typeof ComorbiditiesScalarFieldEnum];
    export type ComorbiditiesValuesScalarFieldEnum = (typeof ComorbiditiesValuesScalarFieldEnum)[keyof typeof ComorbiditiesValuesScalarFieldEnum];
    export type SurgeriesScalarFieldEnum = (typeof SurgeriesScalarFieldEnum)[keyof typeof SurgeriesScalarFieldEnum];
    export type SurgeriesValuesScalarFieldEnum = (typeof SurgeriesValuesScalarFieldEnum)[keyof typeof SurgeriesValuesScalarFieldEnum];
    export type HealthPlansScalarFieldEnum = (typeof HealthPlansScalarFieldEnum)[keyof typeof HealthPlansScalarFieldEnum];
    export type HealthPlansValuesScalarFieldEnum = (typeof HealthPlansValuesScalarFieldEnum)[keyof typeof HealthPlansValuesScalarFieldEnum];
    export type DefaultObjectiveInformationScalarFieldEnum = (typeof DefaultObjectiveInformationScalarFieldEnum)[keyof typeof DefaultObjectiveInformationScalarFieldEnum];
    export type EventCalendarScalarFieldEnum = (typeof EventCalendarScalarFieldEnum)[keyof typeof EventCalendarScalarFieldEnum];
    export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
    export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];
    /**
     * Field references
     */
    /**
     * Reference to a field of type 'String'
     */
    export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>;
    /**
     * Reference to a field of type 'Boolean'
     */
    export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>;
    /**
     * Reference to a field of type 'DateTime'
     */
    export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>;
    /**
     * Reference to a field of type 'UserRole'
     */
    export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>;
    /**
     * Reference to a field of type 'Int'
     */
    export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>;
    /**
     * Reference to a field of type 'AppointmentCategory'
     */
    export type EnumAppointmentCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentCategory'>;
    /**
     * Reference to a field of type 'AppointmentStatus'
     */
    export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>;
    /**
     * Reference to a field of type 'Sex'
     */
    export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>;
    /**
     * Reference to a field of type 'Race'
     */
    export type EnumRaceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Race'>;
    /**
     * Reference to a field of type 'CivilStatus'
     */
    export type EnumCivilStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CivilStatus'>;
    /**
     * Reference to a field of type 'BloodType'
     */
    export type EnumBloodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BloodType'>;
    /**
     * Reference to a field of type 'GenderIdentity'
     */
    export type EnumGenderIdentityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenderIdentity'>;
    /**
     * Reference to a field of type 'EventCalendarType'
     */
    export type EnumEventCalendarTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventCalendarType'>;
    /**
     * Reference to a field of type 'Float'
     */
    export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>;
    /**
     * Deep Input Types
     */
    export type UserWhereInput = {
        AND?: UserWhereInput | UserWhereInput[]
        OR?: UserWhereInput[]
        NOT?: UserWhereInput | UserWhereInput[]
        id?: StringFilter<"User"> | string
        name?: StringFilter<"User"> | string
        email?: StringFilter<"User"> | string
        emailVerified?: BoolFilter<"User"> | boolean
        image?: StringNullableFilter<"User"> | string | null
        createdAt?: DateTimeFilter<"User"> | Date | string
        updatedAt?: DateTimeFilter<"User"> | Date | string
        username?: StringNullableFilter<"User"> | string | null
        displayUsername?: StringNullableFilter<"User"> | string | null
        role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
        banned?: BoolNullableFilter<"User"> | boolean | null
        banReason?: StringNullableFilter<"User"> | string | null
        banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
        changePassword?: BoolNullableFilter<"User"> | boolean | null
        sessions?: SessionListRelationFilter
        accounts?: AccountListRelationFilter
        members?: MemberListRelationFilter
        invitations?: InvitationListRelationFilter
        patientUser?: PatientListRelationFilter
        createdAssets?: AssetListRelationFilter
        updatedAssets?: AssetListRelationFilter
        deletedAssets?: AssetListRelationFilter
    };
    export type UserOrderByWithRelationInput = {
        id?: SortOrder
        name?: SortOrder
        email?: SortOrder
        emailVerified?: SortOrder
        image?: SortOrderInput | SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        username?: SortOrderInput | SortOrder
        displayUsername?: SortOrderInput | SortOrder
        role?: SortOrderInput | SortOrder
        banned?: SortOrderInput | SortOrder
        banReason?: SortOrderInput | SortOrder
        banExpires?: SortOrderInput | SortOrder
        changePassword?: SortOrderInput | SortOrder
        sessions?: SessionOrderByRelationAggregateInput
        accounts?: AccountOrderByRelationAggregateInput
        members?: MemberOrderByRelationAggregateInput
        invitations?: InvitationOrderByRelationAggregateInput
        patientUser?: PatientOrderByRelationAggregateInput
        createdAssets?: AssetOrderByRelationAggregateInput
        updatedAssets?: AssetOrderByRelationAggregateInput
        deletedAssets?: AssetOrderByRelationAggregateInput
    };
    export type UserWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        email?: string
        AND?: UserWhereInput | UserWhereInput[]
        OR?: UserWhereInput[]
        NOT?: UserWhereInput | UserWhereInput[]
        name?: StringFilter<"User"> | string
        emailVerified?: BoolFilter<"User"> | boolean
        image?: StringNullableFilter<"User"> | string | null
        createdAt?: DateTimeFilter<"User"> | Date | string
        updatedAt?: DateTimeFilter<"User"> | Date | string
        username?: StringNullableFilter<"User"> | string | null
        displayUsername?: StringNullableFilter<"User"> | string | null
        role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
        banned?: BoolNullableFilter<"User"> | boolean | null
        banReason?: StringNullableFilter<"User"> | string | null
        banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
        changePassword?: BoolNullableFilter<"User"> | boolean | null
        sessions?: SessionListRelationFilter
        accounts?: AccountListRelationFilter
        members?: MemberListRelationFilter
        invitations?: InvitationListRelationFilter
        patientUser?: PatientListRelationFilter
        createdAssets?: AssetListRelationFilter
        updatedAssets?: AssetListRelationFilter
        deletedAssets?: AssetListRelationFilter
    }, "id" | "email">;
    export type UserOrderByWithAggregationInput = {
        id?: SortOrder
        name?: SortOrder
        email?: SortOrder
        emailVerified?: SortOrder
        image?: SortOrderInput | SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        username?: SortOrderInput | SortOrder
        displayUsername?: SortOrderInput | SortOrder
        role?: SortOrderInput | SortOrder
        banned?: SortOrderInput | SortOrder
        banReason?: SortOrderInput | SortOrder
        banExpires?: SortOrderInput | SortOrder
        changePassword?: SortOrderInput | SortOrder
        _count?: UserCountOrderByAggregateInput
        _max?: UserMaxOrderByAggregateInput
        _min?: UserMinOrderByAggregateInput
    };
    export type UserScalarWhereWithAggregatesInput = {
        AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
        OR?: UserScalarWhereWithAggregatesInput[]
        NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"User"> | string
        name?: StringWithAggregatesFilter<"User"> | string
        email?: StringWithAggregatesFilter<"User"> | string
        emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
        image?: StringNullableWithAggregatesFilter<"User"> | string | null
        createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
        updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
        username?: StringNullableWithAggregatesFilter<"User"> | string | null
        displayUsername?: StringNullableWithAggregatesFilter<"User"> | string | null
        role?: EnumUserRoleNullableWithAggregatesFilter<"User"> | $Enums.UserRole | null
        banned?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
        banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
        banExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
        changePassword?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    };
    export type AssetWhereInput = {
        AND?: AssetWhereInput | AssetWhereInput[]
        OR?: AssetWhereInput[]
        NOT?: AssetWhereInput | AssetWhereInput[]
        id?: StringFilter<"Asset"> | string
        type?: StringFilter<"Asset"> | string
        createdAt?: DateTimeFilter<"Asset"> | Date | string
        createdById?: StringNullableFilter<"Asset"> | string | null
        updatedAt?: DateTimeFilter<"Asset"> | Date | string
        updatedById?: StringNullableFilter<"Asset"> | string | null
        deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
        deletedById?: StringNullableFilter<"Asset"> | string | null
        deleted?: BoolFilter<"Asset"> | boolean
        organizationId?: StringNullableFilter<"Asset"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    };
    export type AssetOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
    };
    export type AssetWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: AssetWhereInput | AssetWhereInput[]
        OR?: AssetWhereInput[]
        NOT?: AssetWhereInput | AssetWhereInput[]
        type?: StringFilter<"Asset"> | string
        createdAt?: DateTimeFilter<"Asset"> | Date | string
        createdById?: StringNullableFilter<"Asset"> | string | null
        updatedAt?: DateTimeFilter<"Asset"> | Date | string
        updatedById?: StringNullableFilter<"Asset"> | string | null
        deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
        deletedById?: StringNullableFilter<"Asset"> | string | null
        deleted?: BoolFilter<"Asset"> | boolean
        organizationId?: StringNullableFilter<"Asset"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    }, "id">;
    export type AssetOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        _count?: AssetCountOrderByAggregateInput
        _max?: AssetMaxOrderByAggregateInput
        _min?: AssetMinOrderByAggregateInput
    };
    export type AssetScalarWhereWithAggregatesInput = {
        AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
        OR?: AssetScalarWhereWithAggregatesInput[]
        NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Asset"> | string
        type?: StringWithAggregatesFilter<"Asset"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Asset"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Asset"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Asset"> | string | null
        deleted?: BoolWithAggregatesFilter<"Asset"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    };
    export type SessionWhereInput = {
        AND?: SessionWhereInput | SessionWhereInput[]
        OR?: SessionWhereInput[]
        NOT?: SessionWhereInput | SessionWhereInput[]
        id?: StringFilter<"Session"> | string
        expiresAt?: DateTimeFilter<"Session"> | Date | string
        token?: StringFilter<"Session"> | string
        createdAt?: DateTimeFilter<"Session"> | Date | string
        updatedAt?: DateTimeFilter<"Session"> | Date | string
        ipAddress?: StringNullableFilter<"Session"> | string | null
        userAgent?: StringNullableFilter<"Session"> | string | null
        userId?: StringFilter<"Session"> | string
        impersonatedBy?: StringNullableFilter<"Session"> | string | null
        activeOrganizationId?: StringNullableFilter<"Session"> | string | null
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    };
    export type SessionOrderByWithRelationInput = {
        id?: SortOrder
        expiresAt?: SortOrder
        token?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        ipAddress?: SortOrderInput | SortOrder
        userAgent?: SortOrderInput | SortOrder
        userId?: SortOrder
        impersonatedBy?: SortOrderInput | SortOrder
        activeOrganizationId?: SortOrderInput | SortOrder
        user?: UserOrderByWithRelationInput
    };
    export type SessionWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        token?: string
        AND?: SessionWhereInput | SessionWhereInput[]
        OR?: SessionWhereInput[]
        NOT?: SessionWhereInput | SessionWhereInput[]
        expiresAt?: DateTimeFilter<"Session"> | Date | string
        createdAt?: DateTimeFilter<"Session"> | Date | string
        updatedAt?: DateTimeFilter<"Session"> | Date | string
        ipAddress?: StringNullableFilter<"Session"> | string | null
        userAgent?: StringNullableFilter<"Session"> | string | null
        userId?: StringFilter<"Session"> | string
        impersonatedBy?: StringNullableFilter<"Session"> | string | null
        activeOrganizationId?: StringNullableFilter<"Session"> | string | null
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    }, "id" | "token">;
    export type SessionOrderByWithAggregationInput = {
        id?: SortOrder
        expiresAt?: SortOrder
        token?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        ipAddress?: SortOrderInput | SortOrder
        userAgent?: SortOrderInput | SortOrder
        userId?: SortOrder
        impersonatedBy?: SortOrderInput | SortOrder
        activeOrganizationId?: SortOrderInput | SortOrder
        _count?: SessionCountOrderByAggregateInput
        _max?: SessionMaxOrderByAggregateInput
        _min?: SessionMinOrderByAggregateInput
    };
    export type SessionScalarWhereWithAggregatesInput = {
        AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
        OR?: SessionScalarWhereWithAggregatesInput[]
        NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Session"> | string
        expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
        token?: StringWithAggregatesFilter<"Session"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
        updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
        ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
        userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
        userId?: StringWithAggregatesFilter<"Session"> | string
        impersonatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
        activeOrganizationId?: StringNullableWithAggregatesFilter<"Session"> | string | null
    };
    export type AccountWhereInput = {
        AND?: AccountWhereInput | AccountWhereInput[]
        OR?: AccountWhereInput[]
        NOT?: AccountWhereInput | AccountWhereInput[]
        id?: StringFilter<"Account"> | string
        accountId?: StringFilter<"Account"> | string
        providerId?: StringFilter<"Account"> | string
        userId?: StringFilter<"Account"> | string
        accessToken?: StringNullableFilter<"Account"> | string | null
        refreshToken?: StringNullableFilter<"Account"> | string | null
        idToken?: StringNullableFilter<"Account"> | string | null
        accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
        refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
        scope?: StringNullableFilter<"Account"> | string | null
        password?: StringNullableFilter<"Account"> | string | null
        createdAt?: DateTimeFilter<"Account"> | Date | string
        updatedAt?: DateTimeFilter<"Account"> | Date | string
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    };
    export type AccountOrderByWithRelationInput = {
        id?: SortOrder
        accountId?: SortOrder
        providerId?: SortOrder
        userId?: SortOrder
        accessToken?: SortOrderInput | SortOrder
        refreshToken?: SortOrderInput | SortOrder
        idToken?: SortOrderInput | SortOrder
        accessTokenExpiresAt?: SortOrderInput | SortOrder
        refreshTokenExpiresAt?: SortOrderInput | SortOrder
        scope?: SortOrderInput | SortOrder
        password?: SortOrderInput | SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        user?: UserOrderByWithRelationInput
    };
    export type AccountWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: AccountWhereInput | AccountWhereInput[]
        OR?: AccountWhereInput[]
        NOT?: AccountWhereInput | AccountWhereInput[]
        accountId?: StringFilter<"Account"> | string
        providerId?: StringFilter<"Account"> | string
        userId?: StringFilter<"Account"> | string
        accessToken?: StringNullableFilter<"Account"> | string | null
        refreshToken?: StringNullableFilter<"Account"> | string | null
        idToken?: StringNullableFilter<"Account"> | string | null
        accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
        refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
        scope?: StringNullableFilter<"Account"> | string | null
        password?: StringNullableFilter<"Account"> | string | null
        createdAt?: DateTimeFilter<"Account"> | Date | string
        updatedAt?: DateTimeFilter<"Account"> | Date | string
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    }, "id">;
    export type AccountOrderByWithAggregationInput = {
        id?: SortOrder
        accountId?: SortOrder
        providerId?: SortOrder
        userId?: SortOrder
        accessToken?: SortOrderInput | SortOrder
        refreshToken?: SortOrderInput | SortOrder
        idToken?: SortOrderInput | SortOrder
        accessTokenExpiresAt?: SortOrderInput | SortOrder
        refreshTokenExpiresAt?: SortOrderInput | SortOrder
        scope?: SortOrderInput | SortOrder
        password?: SortOrderInput | SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        _count?: AccountCountOrderByAggregateInput
        _max?: AccountMaxOrderByAggregateInput
        _min?: AccountMinOrderByAggregateInput
    };
    export type AccountScalarWhereWithAggregatesInput = {
        AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
        OR?: AccountScalarWhereWithAggregatesInput[]
        NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Account"> | string
        accountId?: StringWithAggregatesFilter<"Account"> | string
        providerId?: StringWithAggregatesFilter<"Account"> | string
        userId?: StringWithAggregatesFilter<"Account"> | string
        accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
        refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
        idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
        accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
        refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
        scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
        password?: StringNullableWithAggregatesFilter<"Account"> | string | null
        createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
        updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    };
    export type VerificationWhereInput = {
        AND?: VerificationWhereInput | VerificationWhereInput[]
        OR?: VerificationWhereInput[]
        NOT?: VerificationWhereInput | VerificationWhereInput[]
        id?: StringFilter<"Verification"> | string
        identifier?: StringFilter<"Verification"> | string
        value?: StringFilter<"Verification"> | string
        expiresAt?: DateTimeFilter<"Verification"> | Date | string
        createdAt?: DateTimeFilter<"Verification"> | Date | string
        updatedAt?: DateTimeFilter<"Verification"> | Date | string
    };
    export type VerificationOrderByWithRelationInput = {
        id?: SortOrder
        identifier?: SortOrder
        value?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type VerificationWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: VerificationWhereInput | VerificationWhereInput[]
        OR?: VerificationWhereInput[]
        NOT?: VerificationWhereInput | VerificationWhereInput[]
        identifier?: StringFilter<"Verification"> | string
        value?: StringFilter<"Verification"> | string
        expiresAt?: DateTimeFilter<"Verification"> | Date | string
        createdAt?: DateTimeFilter<"Verification"> | Date | string
        updatedAt?: DateTimeFilter<"Verification"> | Date | string
    }, "id">;
    export type VerificationOrderByWithAggregationInput = {
        id?: SortOrder
        identifier?: SortOrder
        value?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        _count?: VerificationCountOrderByAggregateInput
        _max?: VerificationMaxOrderByAggregateInput
        _min?: VerificationMinOrderByAggregateInput
    };
    export type VerificationScalarWhereWithAggregatesInput = {
        AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
        OR?: VerificationScalarWhereWithAggregatesInput[]
        NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Verification"> | string
        identifier?: StringWithAggregatesFilter<"Verification"> | string
        value?: StringWithAggregatesFilter<"Verification"> | string
        expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
        createdAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
        updatedAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    };
    export type OrganizationWhereInput = {
        AND?: OrganizationWhereInput | OrganizationWhereInput[]
        OR?: OrganizationWhereInput[]
        NOT?: OrganizationWhereInput | OrganizationWhereInput[]
        id?: StringFilter<"Organization"> | string
        name?: StringFilter<"Organization"> | string
        slug?: StringNullableFilter<"Organization"> | string | null
        logo?: StringNullableFilter<"Organization"> | string | null
        createdAt?: DateTimeFilter<"Organization"> | Date | string
        updatedAt?: DateTimeFilter<"Organization"> | Date | string
        metadata?: StringNullableFilter<"Organization"> | string | null
        members?: MemberListRelationFilter
        invitations?: InvitationListRelationFilter
        assets?: AssetListRelationFilter
    };
    export type OrganizationOrderByWithRelationInput = {
        id?: SortOrder
        name?: SortOrder
        slug?: SortOrderInput | SortOrder
        logo?: SortOrderInput | SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        metadata?: SortOrderInput | SortOrder
        members?: MemberOrderByRelationAggregateInput
        invitations?: InvitationOrderByRelationAggregateInput
        assets?: AssetOrderByRelationAggregateInput
    };
    export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        slug?: string
        AND?: OrganizationWhereInput | OrganizationWhereInput[]
        OR?: OrganizationWhereInput[]
        NOT?: OrganizationWhereInput | OrganizationWhereInput[]
        name?: StringFilter<"Organization"> | string
        logo?: StringNullableFilter<"Organization"> | string | null
        createdAt?: DateTimeFilter<"Organization"> | Date | string
        updatedAt?: DateTimeFilter<"Organization"> | Date | string
        metadata?: StringNullableFilter<"Organization"> | string | null
        members?: MemberListRelationFilter
        invitations?: InvitationListRelationFilter
        assets?: AssetListRelationFilter
    }, "id" | "slug">;
    export type OrganizationOrderByWithAggregationInput = {
        id?: SortOrder
        name?: SortOrder
        slug?: SortOrderInput | SortOrder
        logo?: SortOrderInput | SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        metadata?: SortOrderInput | SortOrder
        _count?: OrganizationCountOrderByAggregateInput
        _max?: OrganizationMaxOrderByAggregateInput
        _min?: OrganizationMinOrderByAggregateInput
    };
    export type OrganizationScalarWhereWithAggregatesInput = {
        AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
        OR?: OrganizationScalarWhereWithAggregatesInput[]
        NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Organization"> | string
        name?: StringWithAggregatesFilter<"Organization"> | string
        slug?: StringNullableWithAggregatesFilter<"Organization"> | string | null
        logo?: StringNullableWithAggregatesFilter<"Organization"> | string | null
        createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
        updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
        metadata?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    };
    export type MemberWhereInput = {
        AND?: MemberWhereInput | MemberWhereInput[]
        OR?: MemberWhereInput[]
        NOT?: MemberWhereInput | MemberWhereInput[]
        id?: StringFilter<"Member"> | string
        organizationId?: StringFilter<"Member"> | string
        userId?: StringFilter<"Member"> | string
        role?: StringFilter<"Member"> | string
        createdAt?: DateTimeFilter<"Member"> | Date | string
        updatedAt?: DateTimeFilter<"Member"> | Date | string
        organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    };
    export type MemberOrderByWithRelationInput = {
        id?: SortOrder
        organizationId?: SortOrder
        userId?: SortOrder
        role?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        organization?: OrganizationOrderByWithRelationInput
        user?: UserOrderByWithRelationInput
    };
    export type MemberWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: MemberWhereInput | MemberWhereInput[]
        OR?: MemberWhereInput[]
        NOT?: MemberWhereInput | MemberWhereInput[]
        organizationId?: StringFilter<"Member"> | string
        userId?: StringFilter<"Member"> | string
        role?: StringFilter<"Member"> | string
        createdAt?: DateTimeFilter<"Member"> | Date | string
        updatedAt?: DateTimeFilter<"Member"> | Date | string
        organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    }, "id">;
    export type MemberOrderByWithAggregationInput = {
        id?: SortOrder
        organizationId?: SortOrder
        userId?: SortOrder
        role?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        _count?: MemberCountOrderByAggregateInput
        _max?: MemberMaxOrderByAggregateInput
        _min?: MemberMinOrderByAggregateInput
    };
    export type MemberScalarWhereWithAggregatesInput = {
        AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
        OR?: MemberScalarWhereWithAggregatesInput[]
        NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Member"> | string
        organizationId?: StringWithAggregatesFilter<"Member"> | string
        userId?: StringWithAggregatesFilter<"Member"> | string
        role?: StringWithAggregatesFilter<"Member"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
        updatedAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    };
    export type InvitationWhereInput = {
        AND?: InvitationWhereInput | InvitationWhereInput[]
        OR?: InvitationWhereInput[]
        NOT?: InvitationWhereInput | InvitationWhereInput[]
        id?: StringFilter<"Invitation"> | string
        organizationId?: StringFilter<"Invitation"> | string
        email?: StringFilter<"Invitation"> | string
        role?: StringNullableFilter<"Invitation"> | string | null
        status?: StringFilter<"Invitation"> | string
        expiresAt?: DateTimeFilter<"Invitation"> | Date | string
        createdAt?: DateTimeFilter<"Invitation"> | Date | string
        updatedAt?: DateTimeNullableFilter<"Invitation"> | Date | string | null
        inviterId?: StringFilter<"Invitation"> | string
        organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    };
    export type InvitationOrderByWithRelationInput = {
        id?: SortOrder
        organizationId?: SortOrder
        email?: SortOrder
        role?: SortOrderInput | SortOrder
        status?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrderInput | SortOrder
        inviterId?: SortOrder
        organization?: OrganizationOrderByWithRelationInput
        user?: UserOrderByWithRelationInput
    };
    export type InvitationWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: InvitationWhereInput | InvitationWhereInput[]
        OR?: InvitationWhereInput[]
        NOT?: InvitationWhereInput | InvitationWhereInput[]
        organizationId?: StringFilter<"Invitation"> | string
        email?: StringFilter<"Invitation"> | string
        role?: StringNullableFilter<"Invitation"> | string | null
        status?: StringFilter<"Invitation"> | string
        expiresAt?: DateTimeFilter<"Invitation"> | Date | string
        createdAt?: DateTimeFilter<"Invitation"> | Date | string
        updatedAt?: DateTimeNullableFilter<"Invitation"> | Date | string | null
        inviterId?: StringFilter<"Invitation"> | string
        organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
        user?: XOR<UserScalarRelationFilter, UserWhereInput>
    }, "id">;
    export type InvitationOrderByWithAggregationInput = {
        id?: SortOrder
        organizationId?: SortOrder
        email?: SortOrder
        role?: SortOrderInput | SortOrder
        status?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrderInput | SortOrder
        inviterId?: SortOrder
        _count?: InvitationCountOrderByAggregateInput
        _max?: InvitationMaxOrderByAggregateInput
        _min?: InvitationMinOrderByAggregateInput
    };
    export type InvitationScalarWhereWithAggregatesInput = {
        AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
        OR?: InvitationScalarWhereWithAggregatesInput[]
        NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Invitation"> | string
        organizationId?: StringWithAggregatesFilter<"Invitation"> | string
        email?: StringWithAggregatesFilter<"Invitation"> | string
        role?: StringNullableWithAggregatesFilter<"Invitation"> | string | null
        status?: StringWithAggregatesFilter<"Invitation"> | string
        expiresAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
        createdAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
        updatedAt?: DateTimeNullableWithAggregatesFilter<"Invitation"> | Date | string | null
        inviterId?: StringWithAggregatesFilter<"Invitation"> | string
    };
    export type CidWhereInput = {
        AND?: CidWhereInput | CidWhereInput[]
        OR?: CidWhereInput[]
        NOT?: CidWhereInput | CidWhereInput[]
        id?: StringFilter<"Cid"> | string
        code?: StringFilter<"Cid"> | string
        description?: StringFilter<"Cid"> | string
        createdAt?: DateTimeFilter<"Cid"> | Date | string
        updatedAt?: DateTimeNullableFilter<"Cid"> | Date | string | null
        appointmentCid?: AppointmentCidListRelationFilter
    };
    export type CidOrderByWithRelationInput = {
        id?: SortOrder
        code?: SortOrder
        description?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrderInput | SortOrder
        appointmentCid?: AppointmentCidOrderByRelationAggregateInput
    };
    export type CidWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        code?: string
        AND?: CidWhereInput | CidWhereInput[]
        OR?: CidWhereInput[]
        NOT?: CidWhereInput | CidWhereInput[]
        description?: StringFilter<"Cid"> | string
        createdAt?: DateTimeFilter<"Cid"> | Date | string
        updatedAt?: DateTimeNullableFilter<"Cid"> | Date | string | null
        appointmentCid?: AppointmentCidListRelationFilter
    }, "id" | "code">;
    export type CidOrderByWithAggregationInput = {
        id?: SortOrder
        code?: SortOrder
        description?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrderInput | SortOrder
        _count?: CidCountOrderByAggregateInput
        _max?: CidMaxOrderByAggregateInput
        _min?: CidMinOrderByAggregateInput
    };
    export type CidScalarWhereWithAggregatesInput = {
        AND?: CidScalarWhereWithAggregatesInput | CidScalarWhereWithAggregatesInput[]
        OR?: CidScalarWhereWithAggregatesInput[]
        NOT?: CidScalarWhereWithAggregatesInput | CidScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Cid"> | string
        code?: StringWithAggregatesFilter<"Cid"> | string
        description?: StringWithAggregatesFilter<"Cid"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Cid"> | Date | string
        updatedAt?: DateTimeNullableWithAggregatesFilter<"Cid"> | Date | string | null
    };
    export type AppointmentCidWhereInput = {
        AND?: AppointmentCidWhereInput | AppointmentCidWhereInput[]
        OR?: AppointmentCidWhereInput[]
        NOT?: AppointmentCidWhereInput | AppointmentCidWhereInput[]
        id?: StringFilter<"AppointmentCid"> | string
        type?: StringFilter<"AppointmentCid"> | string
        createdAt?: DateTimeFilter<"AppointmentCid"> | Date | string
        createdById?: StringNullableFilter<"AppointmentCid"> | string | null
        updatedAt?: DateTimeFilter<"AppointmentCid"> | Date | string
        updatedById?: StringNullableFilter<"AppointmentCid"> | string | null
        deletedAt?: DateTimeNullableFilter<"AppointmentCid"> | Date | string | null
        deletedById?: StringNullableFilter<"AppointmentCid"> | string | null
        deleted?: BoolFilter<"AppointmentCid"> | boolean
        organizationId?: StringNullableFilter<"AppointmentCid"> | string | null
        appointmentId?: StringFilter<"AppointmentCid"> | string
        cidId?: StringFilter<"AppointmentCid"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
        cid?: XOR<CidScalarRelationFilter, CidWhereInput>
    };
    export type AppointmentCidOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        appointmentId?: SortOrder
        cidId?: SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        appointment?: AppointmentOrderByWithRelationInput
        cid?: CidOrderByWithRelationInput
    };
    export type AppointmentCidWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        appointmentId_cidId?: AppointmentCidAppointmentIdCidIdCompoundUniqueInput
        AND?: AppointmentCidWhereInput | AppointmentCidWhereInput[]
        OR?: AppointmentCidWhereInput[]
        NOT?: AppointmentCidWhereInput | AppointmentCidWhereInput[]
        type?: StringFilter<"AppointmentCid"> | string
        createdAt?: DateTimeFilter<"AppointmentCid"> | Date | string
        createdById?: StringNullableFilter<"AppointmentCid"> | string | null
        updatedAt?: DateTimeFilter<"AppointmentCid"> | Date | string
        updatedById?: StringNullableFilter<"AppointmentCid"> | string | null
        deletedAt?: DateTimeNullableFilter<"AppointmentCid"> | Date | string | null
        deletedById?: StringNullableFilter<"AppointmentCid"> | string | null
        deleted?: BoolFilter<"AppointmentCid"> | boolean
        organizationId?: StringNullableFilter<"AppointmentCid"> | string | null
        appointmentId?: StringFilter<"AppointmentCid"> | string
        cidId?: StringFilter<"AppointmentCid"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
        cid?: XOR<CidScalarRelationFilter, CidWhereInput>
    }, "id" | "appointmentId_cidId">;
    export type AppointmentCidOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        appointmentId?: SortOrder
        cidId?: SortOrder
        _count?: AppointmentCidCountOrderByAggregateInput
        _max?: AppointmentCidMaxOrderByAggregateInput
        _min?: AppointmentCidMinOrderByAggregateInput
    };
    export type AppointmentCidScalarWhereWithAggregatesInput = {
        AND?: AppointmentCidScalarWhereWithAggregatesInput | AppointmentCidScalarWhereWithAggregatesInput[]
        OR?: AppointmentCidScalarWhereWithAggregatesInput[]
        NOT?: AppointmentCidScalarWhereWithAggregatesInput | AppointmentCidScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"AppointmentCid"> | string
        type?: StringWithAggregatesFilter<"AppointmentCid"> | string
        createdAt?: DateTimeWithAggregatesFilter<"AppointmentCid"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"AppointmentCid"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"AppointmentCid"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"AppointmentCid"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"AppointmentCid"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"AppointmentCid"> | string | null
        deleted?: BoolWithAggregatesFilter<"AppointmentCid"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"AppointmentCid"> | string | null
        appointmentId?: StringWithAggregatesFilter<"AppointmentCid"> | string
        cidId?: StringWithAggregatesFilter<"AppointmentCid"> | string
    };
    export type AppointmentWhereInput = {
        AND?: AppointmentWhereInput | AppointmentWhereInput[]
        OR?: AppointmentWhereInput[]
        NOT?: AppointmentWhereInput | AppointmentWhereInput[]
        id?: StringFilter<"Appointment"> | string
        type?: StringFilter<"Appointment"> | string
        createdAt?: DateTimeFilter<"Appointment"> | Date | string
        createdById?: StringNullableFilter<"Appointment"> | string | null
        updatedAt?: DateTimeFilter<"Appointment"> | Date | string
        updatedById?: StringNullableFilter<"Appointment"> | string | null
        deletedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        deletedById?: StringNullableFilter<"Appointment"> | string | null
        deleted?: BoolFilter<"Appointment"> | boolean
        organizationId?: StringNullableFilter<"Appointment"> | string | null
        motive?: StringFilter<"Appointment"> | string
        subjective?: StringFilter<"Appointment"> | string
        objective?: StringFilter<"Appointment"> | string
        evaluation?: StringFilter<"Appointment"> | string
        plan?: StringFilter<"Appointment"> | string
        startDate?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        endDate?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        sickNoteDays?: IntNullableFilter<"Appointment"> | number | null
        category?: EnumAppointmentCategoryNullableFilter<"Appointment"> | $Enums.AppointmentCategory | null
        status?: EnumAppointmentStatusNullableFilter<"Appointment"> | $Enums.AppointmentStatus | null
        followUpId?: StringNullableFilter<"Appointment"> | string | null
        patientId?: StringFilter<"Appointment"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        followUp?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
        predecessorFollowUp?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
        cids?: AppointmentCidListRelationFilter
        allergies?: AllergiesListRelationFilter
        medications?: MedicationsListRelationFilter
        comorbidities?: ComorbiditiesListRelationFilter
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        eventCalendar?: XOR<EventCalendarNullableScalarRelationFilter, EventCalendarWhereInput> | null
    };
    export type AppointmentOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        motive?: SortOrder
        subjective?: SortOrder
        objective?: SortOrder
        evaluation?: SortOrder
        plan?: SortOrder
        startDate?: SortOrderInput | SortOrder
        endDate?: SortOrderInput | SortOrder
        sickNoteDays?: SortOrderInput | SortOrder
        category?: SortOrderInput | SortOrder
        status?: SortOrderInput | SortOrder
        followUpId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        followUp?: AppointmentOrderByWithRelationInput
        predecessorFollowUp?: AppointmentOrderByWithRelationInput
        cids?: AppointmentCidOrderByRelationAggregateInput
        allergies?: AllergiesOrderByRelationAggregateInput
        medications?: MedicationsOrderByRelationAggregateInput
        comorbidities?: ComorbiditiesOrderByRelationAggregateInput
        patient?: PatientOrderByWithRelationInput
        eventCalendar?: EventCalendarOrderByWithRelationInput
    };
    export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        followUpId?: string
        AND?: AppointmentWhereInput | AppointmentWhereInput[]
        OR?: AppointmentWhereInput[]
        NOT?: AppointmentWhereInput | AppointmentWhereInput[]
        type?: StringFilter<"Appointment"> | string
        createdAt?: DateTimeFilter<"Appointment"> | Date | string
        createdById?: StringNullableFilter<"Appointment"> | string | null
        updatedAt?: DateTimeFilter<"Appointment"> | Date | string
        updatedById?: StringNullableFilter<"Appointment"> | string | null
        deletedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        deletedById?: StringNullableFilter<"Appointment"> | string | null
        deleted?: BoolFilter<"Appointment"> | boolean
        organizationId?: StringNullableFilter<"Appointment"> | string | null
        motive?: StringFilter<"Appointment"> | string
        subjective?: StringFilter<"Appointment"> | string
        objective?: StringFilter<"Appointment"> | string
        evaluation?: StringFilter<"Appointment"> | string
        plan?: StringFilter<"Appointment"> | string
        startDate?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        endDate?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        sickNoteDays?: IntNullableFilter<"Appointment"> | number | null
        category?: EnumAppointmentCategoryNullableFilter<"Appointment"> | $Enums.AppointmentCategory | null
        status?: EnumAppointmentStatusNullableFilter<"Appointment"> | $Enums.AppointmentStatus | null
        patientId?: StringFilter<"Appointment"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        followUp?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
        predecessorFollowUp?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
        cids?: AppointmentCidListRelationFilter
        allergies?: AllergiesListRelationFilter
        medications?: MedicationsListRelationFilter
        comorbidities?: ComorbiditiesListRelationFilter
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        eventCalendar?: XOR<EventCalendarNullableScalarRelationFilter, EventCalendarWhereInput> | null
    }, "id" | "followUpId">;
    export type AppointmentOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        motive?: SortOrder
        subjective?: SortOrder
        objective?: SortOrder
        evaluation?: SortOrder
        plan?: SortOrder
        startDate?: SortOrderInput | SortOrder
        endDate?: SortOrderInput | SortOrder
        sickNoteDays?: SortOrderInput | SortOrder
        category?: SortOrderInput | SortOrder
        status?: SortOrderInput | SortOrder
        followUpId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        _count?: AppointmentCountOrderByAggregateInput
        _avg?: AppointmentAvgOrderByAggregateInput
        _max?: AppointmentMaxOrderByAggregateInput
        _min?: AppointmentMinOrderByAggregateInput
        _sum?: AppointmentSumOrderByAggregateInput
    };
    export type AppointmentScalarWhereWithAggregatesInput = {
        AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
        OR?: AppointmentScalarWhereWithAggregatesInput[]
        NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Appointment"> | string
        type?: StringWithAggregatesFilter<"Appointment"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
        deleted?: BoolWithAggregatesFilter<"Appointment"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
        motive?: StringWithAggregatesFilter<"Appointment"> | string
        subjective?: StringWithAggregatesFilter<"Appointment"> | string
        objective?: StringWithAggregatesFilter<"Appointment"> | string
        evaluation?: StringWithAggregatesFilter<"Appointment"> | string
        plan?: StringWithAggregatesFilter<"Appointment"> | string
        startDate?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
        endDate?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
        sickNoteDays?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
        category?: EnumAppointmentCategoryNullableWithAggregatesFilter<"Appointment"> | $Enums.AppointmentCategory | null
        status?: EnumAppointmentStatusNullableWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus | null
        followUpId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
        patientId?: StringWithAggregatesFilter<"Appointment"> | string
    };
    export type PatientWhereInput = {
        AND?: PatientWhereInput | PatientWhereInput[]
        OR?: PatientWhereInput[]
        NOT?: PatientWhereInput | PatientWhereInput[]
        id?: StringFilter<"Patient"> | string
        type?: StringFilter<"Patient"> | string
        createdAt?: DateTimeFilter<"Patient"> | Date | string
        createdById?: StringNullableFilter<"Patient"> | string | null
        updatedAt?: DateTimeFilter<"Patient"> | Date | string
        updatedById?: StringNullableFilter<"Patient"> | string | null
        deletedAt?: DateTimeNullableFilter<"Patient"> | Date | string | null
        deletedById?: StringNullableFilter<"Patient"> | string | null
        deleted?: BoolFilter<"Patient"> | boolean
        organizationId?: StringNullableFilter<"Patient"> | string | null
        name?: StringFilter<"Patient"> | string
        cpf?: StringFilter<"Patient"> | string
        cellphone?: StringFilter<"Patient"> | string
        email?: StringFilter<"Patient"> | string
        sex?: EnumSexNullableFilter<"Patient"> | $Enums.Sex | null
        responsible?: StringNullableFilter<"Patient"> | string | null
        nationality?: StringFilter<"Patient"> | string
        race?: EnumRaceNullableFilter<"Patient"> | $Enums.Race | null
        state?: StringFilter<"Patient"> | string
        city?: StringFilter<"Patient"> | string
        zipcode?: StringFilter<"Patient"> | string
        neighborhood?: StringFilter<"Patient"> | string
        street?: StringFilter<"Patient"> | string
        number?: StringFilter<"Patient"> | string
        complement?: StringNullableFilter<"Patient"> | string | null
        occupation?: StringFilter<"Patient"> | string
        sexualOrientation?: StringNullableFilter<"Patient"> | string | null
        civilStatus?: EnumCivilStatusNullableFilter<"Patient"> | $Enums.CivilStatus | null
        bloodType?: EnumBloodTypeNullableFilter<"Patient"> | $Enums.BloodType | null
        genderIdentity?: EnumGenderIdentityNullableFilter<"Patient"> | $Enums.GenderIdentity | null
        password?: StringNullableFilter<"Patient"> | string | null
        userId?: StringNullableFilter<"Patient"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        appointments?: AppointmentListRelationFilter
        vaccinations?: VaccinationsListRelationFilter
        allergies?: AllergiesListRelationFilter
        medications?: MedicationsListRelationFilter
        examResults?: ExamResultsListRelationFilter
        comorbidities?: ComorbiditiesListRelationFilter
        surgeries?: SurgeriesListRelationFilter
        healthPlans?: HealthPlansListRelationFilter
    };
    export type PatientOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        name?: SortOrder
        cpf?: SortOrder
        cellphone?: SortOrder
        email?: SortOrder
        sex?: SortOrderInput | SortOrder
        responsible?: SortOrderInput | SortOrder
        nationality?: SortOrder
        race?: SortOrderInput | SortOrder
        state?: SortOrder
        city?: SortOrder
        zipcode?: SortOrder
        neighborhood?: SortOrder
        street?: SortOrder
        number?: SortOrder
        complement?: SortOrderInput | SortOrder
        occupation?: SortOrder
        sexualOrientation?: SortOrderInput | SortOrder
        civilStatus?: SortOrderInput | SortOrder
        bloodType?: SortOrderInput | SortOrder
        genderIdentity?: SortOrderInput | SortOrder
        password?: SortOrderInput | SortOrder
        userId?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        user?: UserOrderByWithRelationInput
        appointments?: AppointmentOrderByRelationAggregateInput
        vaccinations?: VaccinationsOrderByRelationAggregateInput
        allergies?: AllergiesOrderByRelationAggregateInput
        medications?: MedicationsOrderByRelationAggregateInput
        examResults?: ExamResultsOrderByRelationAggregateInput
        comorbidities?: ComorbiditiesOrderByRelationAggregateInput
        surgeries?: SurgeriesOrderByRelationAggregateInput
        healthPlans?: HealthPlansOrderByRelationAggregateInput
    };
    export type PatientWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: PatientWhereInput | PatientWhereInput[]
        OR?: PatientWhereInput[]
        NOT?: PatientWhereInput | PatientWhereInput[]
        type?: StringFilter<"Patient"> | string
        createdAt?: DateTimeFilter<"Patient"> | Date | string
        createdById?: StringNullableFilter<"Patient"> | string | null
        updatedAt?: DateTimeFilter<"Patient"> | Date | string
        updatedById?: StringNullableFilter<"Patient"> | string | null
        deletedAt?: DateTimeNullableFilter<"Patient"> | Date | string | null
        deletedById?: StringNullableFilter<"Patient"> | string | null
        deleted?: BoolFilter<"Patient"> | boolean
        organizationId?: StringNullableFilter<"Patient"> | string | null
        name?: StringFilter<"Patient"> | string
        cpf?: StringFilter<"Patient"> | string
        cellphone?: StringFilter<"Patient"> | string
        email?: StringFilter<"Patient"> | string
        sex?: EnumSexNullableFilter<"Patient"> | $Enums.Sex | null
        responsible?: StringNullableFilter<"Patient"> | string | null
        nationality?: StringFilter<"Patient"> | string
        race?: EnumRaceNullableFilter<"Patient"> | $Enums.Race | null
        state?: StringFilter<"Patient"> | string
        city?: StringFilter<"Patient"> | string
        zipcode?: StringFilter<"Patient"> | string
        neighborhood?: StringFilter<"Patient"> | string
        street?: StringFilter<"Patient"> | string
        number?: StringFilter<"Patient"> | string
        complement?: StringNullableFilter<"Patient"> | string | null
        occupation?: StringFilter<"Patient"> | string
        sexualOrientation?: StringNullableFilter<"Patient"> | string | null
        civilStatus?: EnumCivilStatusNullableFilter<"Patient"> | $Enums.CivilStatus | null
        bloodType?: EnumBloodTypeNullableFilter<"Patient"> | $Enums.BloodType | null
        genderIdentity?: EnumGenderIdentityNullableFilter<"Patient"> | $Enums.GenderIdentity | null
        password?: StringNullableFilter<"Patient"> | string | null
        userId?: StringNullableFilter<"Patient"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        appointments?: AppointmentListRelationFilter
        vaccinations?: VaccinationsListRelationFilter
        allergies?: AllergiesListRelationFilter
        medications?: MedicationsListRelationFilter
        examResults?: ExamResultsListRelationFilter
        comorbidities?: ComorbiditiesListRelationFilter
        surgeries?: SurgeriesListRelationFilter
        healthPlans?: HealthPlansListRelationFilter
    }, "id">;
    export type PatientOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        name?: SortOrder
        cpf?: SortOrder
        cellphone?: SortOrder
        email?: SortOrder
        sex?: SortOrderInput | SortOrder
        responsible?: SortOrderInput | SortOrder
        nationality?: SortOrder
        race?: SortOrderInput | SortOrder
        state?: SortOrder
        city?: SortOrder
        zipcode?: SortOrder
        neighborhood?: SortOrder
        street?: SortOrder
        number?: SortOrder
        complement?: SortOrderInput | SortOrder
        occupation?: SortOrder
        sexualOrientation?: SortOrderInput | SortOrder
        civilStatus?: SortOrderInput | SortOrder
        bloodType?: SortOrderInput | SortOrder
        genderIdentity?: SortOrderInput | SortOrder
        password?: SortOrderInput | SortOrder
        userId?: SortOrderInput | SortOrder
        _count?: PatientCountOrderByAggregateInput
        _max?: PatientMaxOrderByAggregateInput
        _min?: PatientMinOrderByAggregateInput
    };
    export type PatientScalarWhereWithAggregatesInput = {
        AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
        OR?: PatientScalarWhereWithAggregatesInput[]
        NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Patient"> | string
        type?: StringWithAggregatesFilter<"Patient"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        deleted?: BoolWithAggregatesFilter<"Patient"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        name?: StringWithAggregatesFilter<"Patient"> | string
        cpf?: StringWithAggregatesFilter<"Patient"> | string
        cellphone?: StringWithAggregatesFilter<"Patient"> | string
        email?: StringWithAggregatesFilter<"Patient"> | string
        sex?: EnumSexNullableWithAggregatesFilter<"Patient"> | $Enums.Sex | null
        responsible?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        nationality?: StringWithAggregatesFilter<"Patient"> | string
        race?: EnumRaceNullableWithAggregatesFilter<"Patient"> | $Enums.Race | null
        state?: StringWithAggregatesFilter<"Patient"> | string
        city?: StringWithAggregatesFilter<"Patient"> | string
        zipcode?: StringWithAggregatesFilter<"Patient"> | string
        neighborhood?: StringWithAggregatesFilter<"Patient"> | string
        street?: StringWithAggregatesFilter<"Patient"> | string
        number?: StringWithAggregatesFilter<"Patient"> | string
        complement?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        occupation?: StringWithAggregatesFilter<"Patient"> | string
        sexualOrientation?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        civilStatus?: EnumCivilStatusNullableWithAggregatesFilter<"Patient"> | $Enums.CivilStatus | null
        bloodType?: EnumBloodTypeNullableWithAggregatesFilter<"Patient"> | $Enums.BloodType | null
        genderIdentity?: EnumGenderIdentityNullableWithAggregatesFilter<"Patient"> | $Enums.GenderIdentity | null
        password?: StringNullableWithAggregatesFilter<"Patient"> | string | null
        userId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    };
    export type VaccinationsWhereInput = {
        AND?: VaccinationsWhereInput | VaccinationsWhereInput[]
        OR?: VaccinationsWhereInput[]
        NOT?: VaccinationsWhereInput | VaccinationsWhereInput[]
        id?: StringFilter<"Vaccinations"> | string
        type?: StringFilter<"Vaccinations"> | string
        createdAt?: DateTimeFilter<"Vaccinations"> | Date | string
        createdById?: StringNullableFilter<"Vaccinations"> | string | null
        updatedAt?: DateTimeFilter<"Vaccinations"> | Date | string
        updatedById?: StringNullableFilter<"Vaccinations"> | string | null
        deletedAt?: DateTimeNullableFilter<"Vaccinations"> | Date | string | null
        deletedById?: StringNullableFilter<"Vaccinations"> | string | null
        deleted?: BoolFilter<"Vaccinations"> | boolean
        organizationId?: StringNullableFilter<"Vaccinations"> | string | null
        patientId?: StringFilter<"Vaccinations"> | string
        vaccinationsValuesId?: StringFilter<"Vaccinations"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        vaccinationsValues?: XOR<VaccinationsValuesScalarRelationFilter, VaccinationsValuesWhereInput>
    };
    export type VaccinationsOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        vaccinationsValuesId?: SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        vaccinationsValues?: VaccinationsValuesOrderByWithRelationInput
    };
    export type VaccinationsWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: VaccinationsWhereInput | VaccinationsWhereInput[]
        OR?: VaccinationsWhereInput[]
        NOT?: VaccinationsWhereInput | VaccinationsWhereInput[]
        type?: StringFilter<"Vaccinations"> | string
        createdAt?: DateTimeFilter<"Vaccinations"> | Date | string
        createdById?: StringNullableFilter<"Vaccinations"> | string | null
        updatedAt?: DateTimeFilter<"Vaccinations"> | Date | string
        updatedById?: StringNullableFilter<"Vaccinations"> | string | null
        deletedAt?: DateTimeNullableFilter<"Vaccinations"> | Date | string | null
        deletedById?: StringNullableFilter<"Vaccinations"> | string | null
        deleted?: BoolFilter<"Vaccinations"> | boolean
        organizationId?: StringNullableFilter<"Vaccinations"> | string | null
        patientId?: StringFilter<"Vaccinations"> | string
        vaccinationsValuesId?: StringFilter<"Vaccinations"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        vaccinationsValues?: XOR<VaccinationsValuesScalarRelationFilter, VaccinationsValuesWhereInput>
    }, "id">;
    export type VaccinationsOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        vaccinationsValuesId?: SortOrder
        _count?: VaccinationsCountOrderByAggregateInput
        _max?: VaccinationsMaxOrderByAggregateInput
        _min?: VaccinationsMinOrderByAggregateInput
    };
    export type VaccinationsScalarWhereWithAggregatesInput = {
        AND?: VaccinationsScalarWhereWithAggregatesInput | VaccinationsScalarWhereWithAggregatesInput[]
        OR?: VaccinationsScalarWhereWithAggregatesInput[]
        NOT?: VaccinationsScalarWhereWithAggregatesInput | VaccinationsScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Vaccinations"> | string
        type?: StringWithAggregatesFilter<"Vaccinations"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Vaccinations"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Vaccinations"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Vaccinations"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Vaccinations"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Vaccinations"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Vaccinations"> | string | null
        deleted?: BoolWithAggregatesFilter<"Vaccinations"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Vaccinations"> | string | null
        patientId?: StringWithAggregatesFilter<"Vaccinations"> | string
        vaccinationsValuesId?: StringWithAggregatesFilter<"Vaccinations"> | string
    };
    export type VaccinationsValuesWhereInput = {
        AND?: VaccinationsValuesWhereInput | VaccinationsValuesWhereInput[]
        OR?: VaccinationsValuesWhereInput[]
        NOT?: VaccinationsValuesWhereInput | VaccinationsValuesWhereInput[]
        id?: StringFilter<"VaccinationsValues"> | string
        value?: StringFilter<"VaccinationsValues"> | string
        createdAt?: DateTimeFilter<"VaccinationsValues"> | Date | string
        vaccinations?: VaccinationsListRelationFilter
    };
    export type VaccinationsValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        vaccinations?: VaccinationsOrderByRelationAggregateInput
    };
    export type VaccinationsValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: VaccinationsValuesWhereInput | VaccinationsValuesWhereInput[]
        OR?: VaccinationsValuesWhereInput[]
        NOT?: VaccinationsValuesWhereInput | VaccinationsValuesWhereInput[]
        createdAt?: DateTimeFilter<"VaccinationsValues"> | Date | string
        vaccinations?: VaccinationsListRelationFilter
    }, "id" | "value">;
    export type VaccinationsValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: VaccinationsValuesCountOrderByAggregateInput
        _max?: VaccinationsValuesMaxOrderByAggregateInput
        _min?: VaccinationsValuesMinOrderByAggregateInput
    };
    export type VaccinationsValuesScalarWhereWithAggregatesInput = {
        AND?: VaccinationsValuesScalarWhereWithAggregatesInput | VaccinationsValuesScalarWhereWithAggregatesInput[]
        OR?: VaccinationsValuesScalarWhereWithAggregatesInput[]
        NOT?: VaccinationsValuesScalarWhereWithAggregatesInput | VaccinationsValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"VaccinationsValues"> | string
        value?: StringWithAggregatesFilter<"VaccinationsValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"VaccinationsValues"> | Date | string
    };
    export type AllergiesWhereInput = {
        AND?: AllergiesWhereInput | AllergiesWhereInput[]
        OR?: AllergiesWhereInput[]
        NOT?: AllergiesWhereInput | AllergiesWhereInput[]
        id?: StringFilter<"Allergies"> | string
        type?: StringFilter<"Allergies"> | string
        createdAt?: DateTimeFilter<"Allergies"> | Date | string
        createdById?: StringNullableFilter<"Allergies"> | string | null
        updatedAt?: DateTimeFilter<"Allergies"> | Date | string
        updatedById?: StringNullableFilter<"Allergies"> | string | null
        deletedAt?: DateTimeNullableFilter<"Allergies"> | Date | string | null
        deletedById?: StringNullableFilter<"Allergies"> | string | null
        deleted?: BoolFilter<"Allergies"> | boolean
        organizationId?: StringNullableFilter<"Allergies"> | string | null
        patientId?: StringNullableFilter<"Allergies"> | string | null
        allergiesValuesId?: StringFilter<"Allergies"> | string
        appointmentId?: StringNullableFilter<"Allergies"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
        allergiesValues?: XOR<AllergiesValuesScalarRelationFilter, AllergiesValuesWhereInput>
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    };
    export type AllergiesOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrderInput | SortOrder
        allergiesValuesId?: SortOrder
        appointmentId?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        allergiesValues?: AllergiesValuesOrderByWithRelationInput
        appointment?: AppointmentOrderByWithRelationInput
    };
    export type AllergiesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: AllergiesWhereInput | AllergiesWhereInput[]
        OR?: AllergiesWhereInput[]
        NOT?: AllergiesWhereInput | AllergiesWhereInput[]
        type?: StringFilter<"Allergies"> | string
        createdAt?: DateTimeFilter<"Allergies"> | Date | string
        createdById?: StringNullableFilter<"Allergies"> | string | null
        updatedAt?: DateTimeFilter<"Allergies"> | Date | string
        updatedById?: StringNullableFilter<"Allergies"> | string | null
        deletedAt?: DateTimeNullableFilter<"Allergies"> | Date | string | null
        deletedById?: StringNullableFilter<"Allergies"> | string | null
        deleted?: BoolFilter<"Allergies"> | boolean
        organizationId?: StringNullableFilter<"Allergies"> | string | null
        patientId?: StringNullableFilter<"Allergies"> | string | null
        allergiesValuesId?: StringFilter<"Allergies"> | string
        appointmentId?: StringNullableFilter<"Allergies"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
        allergiesValues?: XOR<AllergiesValuesScalarRelationFilter, AllergiesValuesWhereInput>
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    }, "id">;
    export type AllergiesOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrderInput | SortOrder
        allergiesValuesId?: SortOrder
        appointmentId?: SortOrderInput | SortOrder
        _count?: AllergiesCountOrderByAggregateInput
        _max?: AllergiesMaxOrderByAggregateInput
        _min?: AllergiesMinOrderByAggregateInput
    };
    export type AllergiesScalarWhereWithAggregatesInput = {
        AND?: AllergiesScalarWhereWithAggregatesInput | AllergiesScalarWhereWithAggregatesInput[]
        OR?: AllergiesScalarWhereWithAggregatesInput[]
        NOT?: AllergiesScalarWhereWithAggregatesInput | AllergiesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Allergies"> | string
        type?: StringWithAggregatesFilter<"Allergies"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Allergies"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Allergies"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Allergies"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Allergies"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Allergies"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Allergies"> | string | null
        deleted?: BoolWithAggregatesFilter<"Allergies"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Allergies"> | string | null
        patientId?: StringNullableWithAggregatesFilter<"Allergies"> | string | null
        allergiesValuesId?: StringWithAggregatesFilter<"Allergies"> | string
        appointmentId?: StringNullableWithAggregatesFilter<"Allergies"> | string | null
    };
    export type AllergiesValuesWhereInput = {
        AND?: AllergiesValuesWhereInput | AllergiesValuesWhereInput[]
        OR?: AllergiesValuesWhereInput[]
        NOT?: AllergiesValuesWhereInput | AllergiesValuesWhereInput[]
        id?: StringFilter<"AllergiesValues"> | string
        value?: StringFilter<"AllergiesValues"> | string
        createdAt?: DateTimeFilter<"AllergiesValues"> | Date | string
        allergies?: AllergiesListRelationFilter
    };
    export type AllergiesValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        allergies?: AllergiesOrderByRelationAggregateInput
    };
    export type AllergiesValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: AllergiesValuesWhereInput | AllergiesValuesWhereInput[]
        OR?: AllergiesValuesWhereInput[]
        NOT?: AllergiesValuesWhereInput | AllergiesValuesWhereInput[]
        createdAt?: DateTimeFilter<"AllergiesValues"> | Date | string
        allergies?: AllergiesListRelationFilter
    }, "id" | "value">;
    export type AllergiesValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: AllergiesValuesCountOrderByAggregateInput
        _max?: AllergiesValuesMaxOrderByAggregateInput
        _min?: AllergiesValuesMinOrderByAggregateInput
    };
    export type AllergiesValuesScalarWhereWithAggregatesInput = {
        AND?: AllergiesValuesScalarWhereWithAggregatesInput | AllergiesValuesScalarWhereWithAggregatesInput[]
        OR?: AllergiesValuesScalarWhereWithAggregatesInput[]
        NOT?: AllergiesValuesScalarWhereWithAggregatesInput | AllergiesValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"AllergiesValues"> | string
        value?: StringWithAggregatesFilter<"AllergiesValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"AllergiesValues"> | Date | string
    };
    export type MedicationsWhereInput = {
        AND?: MedicationsWhereInput | MedicationsWhereInput[]
        OR?: MedicationsWhereInput[]
        NOT?: MedicationsWhereInput | MedicationsWhereInput[]
        id?: StringFilter<"Medications"> | string
        type?: StringFilter<"Medications"> | string
        createdAt?: DateTimeFilter<"Medications"> | Date | string
        createdById?: StringNullableFilter<"Medications"> | string | null
        updatedAt?: DateTimeFilter<"Medications"> | Date | string
        updatedById?: StringNullableFilter<"Medications"> | string | null
        deletedAt?: DateTimeNullableFilter<"Medications"> | Date | string | null
        deletedById?: StringNullableFilter<"Medications"> | string | null
        deleted?: BoolFilter<"Medications"> | boolean
        organizationId?: StringNullableFilter<"Medications"> | string | null
        patientId?: StringNullableFilter<"Medications"> | string | null
        medicationsValuesId?: StringFilter<"Medications"> | string
        appointmentId?: StringNullableFilter<"Medications"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
        medicationsValues?: XOR<MedicationsValuesScalarRelationFilter, MedicationsValuesWhereInput>
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    };
    export type MedicationsOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrderInput | SortOrder
        medicationsValuesId?: SortOrder
        appointmentId?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        medicationsValues?: MedicationsValuesOrderByWithRelationInput
        appointment?: AppointmentOrderByWithRelationInput
    };
    export type MedicationsWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: MedicationsWhereInput | MedicationsWhereInput[]
        OR?: MedicationsWhereInput[]
        NOT?: MedicationsWhereInput | MedicationsWhereInput[]
        type?: StringFilter<"Medications"> | string
        createdAt?: DateTimeFilter<"Medications"> | Date | string
        createdById?: StringNullableFilter<"Medications"> | string | null
        updatedAt?: DateTimeFilter<"Medications"> | Date | string
        updatedById?: StringNullableFilter<"Medications"> | string | null
        deletedAt?: DateTimeNullableFilter<"Medications"> | Date | string | null
        deletedById?: StringNullableFilter<"Medications"> | string | null
        deleted?: BoolFilter<"Medications"> | boolean
        organizationId?: StringNullableFilter<"Medications"> | string | null
        patientId?: StringNullableFilter<"Medications"> | string | null
        medicationsValuesId?: StringFilter<"Medications"> | string
        appointmentId?: StringNullableFilter<"Medications"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
        medicationsValues?: XOR<MedicationsValuesScalarRelationFilter, MedicationsValuesWhereInput>
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    }, "id">;
    export type MedicationsOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrderInput | SortOrder
        medicationsValuesId?: SortOrder
        appointmentId?: SortOrderInput | SortOrder
        _count?: MedicationsCountOrderByAggregateInput
        _max?: MedicationsMaxOrderByAggregateInput
        _min?: MedicationsMinOrderByAggregateInput
    };
    export type MedicationsScalarWhereWithAggregatesInput = {
        AND?: MedicationsScalarWhereWithAggregatesInput | MedicationsScalarWhereWithAggregatesInput[]
        OR?: MedicationsScalarWhereWithAggregatesInput[]
        NOT?: MedicationsScalarWhereWithAggregatesInput | MedicationsScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Medications"> | string
        type?: StringWithAggregatesFilter<"Medications"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Medications"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Medications"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Medications"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Medications"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Medications"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Medications"> | string | null
        deleted?: BoolWithAggregatesFilter<"Medications"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Medications"> | string | null
        patientId?: StringNullableWithAggregatesFilter<"Medications"> | string | null
        medicationsValuesId?: StringWithAggregatesFilter<"Medications"> | string
        appointmentId?: StringNullableWithAggregatesFilter<"Medications"> | string | null
    };
    export type MedicationsValuesWhereInput = {
        AND?: MedicationsValuesWhereInput | MedicationsValuesWhereInput[]
        OR?: MedicationsValuesWhereInput[]
        NOT?: MedicationsValuesWhereInput | MedicationsValuesWhereInput[]
        id?: StringFilter<"MedicationsValues"> | string
        value?: StringFilter<"MedicationsValues"> | string
        createdAt?: DateTimeFilter<"MedicationsValues"> | Date | string
        medications?: MedicationsListRelationFilter
    };
    export type MedicationsValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        medications?: MedicationsOrderByRelationAggregateInput
    };
    export type MedicationsValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: MedicationsValuesWhereInput | MedicationsValuesWhereInput[]
        OR?: MedicationsValuesWhereInput[]
        NOT?: MedicationsValuesWhereInput | MedicationsValuesWhereInput[]
        createdAt?: DateTimeFilter<"MedicationsValues"> | Date | string
        medications?: MedicationsListRelationFilter
    }, "id" | "value">;
    export type MedicationsValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: MedicationsValuesCountOrderByAggregateInput
        _max?: MedicationsValuesMaxOrderByAggregateInput
        _min?: MedicationsValuesMinOrderByAggregateInput
    };
    export type MedicationsValuesScalarWhereWithAggregatesInput = {
        AND?: MedicationsValuesScalarWhereWithAggregatesInput | MedicationsValuesScalarWhereWithAggregatesInput[]
        OR?: MedicationsValuesScalarWhereWithAggregatesInput[]
        NOT?: MedicationsValuesScalarWhereWithAggregatesInput | MedicationsValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"MedicationsValues"> | string
        value?: StringWithAggregatesFilter<"MedicationsValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"MedicationsValues"> | Date | string
    };
    export type ExamResultsWhereInput = {
        AND?: ExamResultsWhereInput | ExamResultsWhereInput[]
        OR?: ExamResultsWhereInput[]
        NOT?: ExamResultsWhereInput | ExamResultsWhereInput[]
        id?: StringFilter<"ExamResults"> | string
        type?: StringFilter<"ExamResults"> | string
        createdAt?: DateTimeFilter<"ExamResults"> | Date | string
        createdById?: StringNullableFilter<"ExamResults"> | string | null
        updatedAt?: DateTimeFilter<"ExamResults"> | Date | string
        updatedById?: StringNullableFilter<"ExamResults"> | string | null
        deletedAt?: DateTimeNullableFilter<"ExamResults"> | Date | string | null
        deletedById?: StringNullableFilter<"ExamResults"> | string | null
        deleted?: BoolFilter<"ExamResults"> | boolean
        organizationId?: StringNullableFilter<"ExamResults"> | string | null
        patientId?: StringFilter<"ExamResults"> | string
        examResultsValuesId?: StringFilter<"ExamResults"> | string
        result?: StringFilter<"ExamResults"> | string
        date?: DateTimeFilter<"ExamResults"> | Date | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        examResultsValues?: XOR<ExamResultsValuesScalarRelationFilter, ExamResultsValuesWhereInput>
    };
    export type ExamResultsOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        examResultsValuesId?: SortOrder
        result?: SortOrder
        date?: SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        examResultsValues?: ExamResultsValuesOrderByWithRelationInput
    };
    export type ExamResultsWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: ExamResultsWhereInput | ExamResultsWhereInput[]
        OR?: ExamResultsWhereInput[]
        NOT?: ExamResultsWhereInput | ExamResultsWhereInput[]
        type?: StringFilter<"ExamResults"> | string
        createdAt?: DateTimeFilter<"ExamResults"> | Date | string
        createdById?: StringNullableFilter<"ExamResults"> | string | null
        updatedAt?: DateTimeFilter<"ExamResults"> | Date | string
        updatedById?: StringNullableFilter<"ExamResults"> | string | null
        deletedAt?: DateTimeNullableFilter<"ExamResults"> | Date | string | null
        deletedById?: StringNullableFilter<"ExamResults"> | string | null
        deleted?: BoolFilter<"ExamResults"> | boolean
        organizationId?: StringNullableFilter<"ExamResults"> | string | null
        patientId?: StringFilter<"ExamResults"> | string
        examResultsValuesId?: StringFilter<"ExamResults"> | string
        result?: StringFilter<"ExamResults"> | string
        date?: DateTimeFilter<"ExamResults"> | Date | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        examResultsValues?: XOR<ExamResultsValuesScalarRelationFilter, ExamResultsValuesWhereInput>
    }, "id">;
    export type ExamResultsOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        examResultsValuesId?: SortOrder
        result?: SortOrder
        date?: SortOrder
        _count?: ExamResultsCountOrderByAggregateInput
        _max?: ExamResultsMaxOrderByAggregateInput
        _min?: ExamResultsMinOrderByAggregateInput
    };
    export type ExamResultsScalarWhereWithAggregatesInput = {
        AND?: ExamResultsScalarWhereWithAggregatesInput | ExamResultsScalarWhereWithAggregatesInput[]
        OR?: ExamResultsScalarWhereWithAggregatesInput[]
        NOT?: ExamResultsScalarWhereWithAggregatesInput | ExamResultsScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"ExamResults"> | string
        type?: StringWithAggregatesFilter<"ExamResults"> | string
        createdAt?: DateTimeWithAggregatesFilter<"ExamResults"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"ExamResults"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"ExamResults"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"ExamResults"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"ExamResults"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"ExamResults"> | string | null
        deleted?: BoolWithAggregatesFilter<"ExamResults"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"ExamResults"> | string | null
        patientId?: StringWithAggregatesFilter<"ExamResults"> | string
        examResultsValuesId?: StringWithAggregatesFilter<"ExamResults"> | string
        result?: StringWithAggregatesFilter<"ExamResults"> | string
        date?: DateTimeWithAggregatesFilter<"ExamResults"> | Date | string
    };
    export type ExamResultsValuesWhereInput = {
        AND?: ExamResultsValuesWhereInput | ExamResultsValuesWhereInput[]
        OR?: ExamResultsValuesWhereInput[]
        NOT?: ExamResultsValuesWhereInput | ExamResultsValuesWhereInput[]
        id?: StringFilter<"ExamResultsValues"> | string
        value?: StringFilter<"ExamResultsValues"> | string
        createdAt?: DateTimeFilter<"ExamResultsValues"> | Date | string
        examResults?: ExamResultsListRelationFilter
    };
    export type ExamResultsValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        examResults?: ExamResultsOrderByRelationAggregateInput
    };
    export type ExamResultsValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: ExamResultsValuesWhereInput | ExamResultsValuesWhereInput[]
        OR?: ExamResultsValuesWhereInput[]
        NOT?: ExamResultsValuesWhereInput | ExamResultsValuesWhereInput[]
        createdAt?: DateTimeFilter<"ExamResultsValues"> | Date | string
        examResults?: ExamResultsListRelationFilter
    }, "id" | "value">;
    export type ExamResultsValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: ExamResultsValuesCountOrderByAggregateInput
        _max?: ExamResultsValuesMaxOrderByAggregateInput
        _min?: ExamResultsValuesMinOrderByAggregateInput
    };
    export type ExamResultsValuesScalarWhereWithAggregatesInput = {
        AND?: ExamResultsValuesScalarWhereWithAggregatesInput | ExamResultsValuesScalarWhereWithAggregatesInput[]
        OR?: ExamResultsValuesScalarWhereWithAggregatesInput[]
        NOT?: ExamResultsValuesScalarWhereWithAggregatesInput | ExamResultsValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"ExamResultsValues"> | string
        value?: StringWithAggregatesFilter<"ExamResultsValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"ExamResultsValues"> | Date | string
    };
    export type ComorbiditiesWhereInput = {
        AND?: ComorbiditiesWhereInput | ComorbiditiesWhereInput[]
        OR?: ComorbiditiesWhereInput[]
        NOT?: ComorbiditiesWhereInput | ComorbiditiesWhereInput[]
        id?: StringFilter<"Comorbidities"> | string
        type?: StringFilter<"Comorbidities"> | string
        createdAt?: DateTimeFilter<"Comorbidities"> | Date | string
        createdById?: StringNullableFilter<"Comorbidities"> | string | null
        updatedAt?: DateTimeFilter<"Comorbidities"> | Date | string
        updatedById?: StringNullableFilter<"Comorbidities"> | string | null
        deletedAt?: DateTimeNullableFilter<"Comorbidities"> | Date | string | null
        deletedById?: StringNullableFilter<"Comorbidities"> | string | null
        deleted?: BoolFilter<"Comorbidities"> | boolean
        organizationId?: StringNullableFilter<"Comorbidities"> | string | null
        patientId?: StringNullableFilter<"Comorbidities"> | string | null
        comorbiditiesValuesId?: StringFilter<"Comorbidities"> | string
        appointmentId?: StringNullableFilter<"Comorbidities"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
        comorbiditiesValues?: XOR<ComorbiditiesValuesScalarRelationFilter, ComorbiditiesValuesWhereInput>
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    };
    export type ComorbiditiesOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrderInput | SortOrder
        comorbiditiesValuesId?: SortOrder
        appointmentId?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        comorbiditiesValues?: ComorbiditiesValuesOrderByWithRelationInput
        appointment?: AppointmentOrderByWithRelationInput
    };
    export type ComorbiditiesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: ComorbiditiesWhereInput | ComorbiditiesWhereInput[]
        OR?: ComorbiditiesWhereInput[]
        NOT?: ComorbiditiesWhereInput | ComorbiditiesWhereInput[]
        type?: StringFilter<"Comorbidities"> | string
        createdAt?: DateTimeFilter<"Comorbidities"> | Date | string
        createdById?: StringNullableFilter<"Comorbidities"> | string | null
        updatedAt?: DateTimeFilter<"Comorbidities"> | Date | string
        updatedById?: StringNullableFilter<"Comorbidities"> | string | null
        deletedAt?: DateTimeNullableFilter<"Comorbidities"> | Date | string | null
        deletedById?: StringNullableFilter<"Comorbidities"> | string | null
        deleted?: BoolFilter<"Comorbidities"> | boolean
        organizationId?: StringNullableFilter<"Comorbidities"> | string | null
        patientId?: StringNullableFilter<"Comorbidities"> | string | null
        comorbiditiesValuesId?: StringFilter<"Comorbidities"> | string
        appointmentId?: StringNullableFilter<"Comorbidities"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
        comorbiditiesValues?: XOR<ComorbiditiesValuesScalarRelationFilter, ComorbiditiesValuesWhereInput>
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    }, "id">;
    export type ComorbiditiesOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrderInput | SortOrder
        comorbiditiesValuesId?: SortOrder
        appointmentId?: SortOrderInput | SortOrder
        _count?: ComorbiditiesCountOrderByAggregateInput
        _max?: ComorbiditiesMaxOrderByAggregateInput
        _min?: ComorbiditiesMinOrderByAggregateInput
    };
    export type ComorbiditiesScalarWhereWithAggregatesInput = {
        AND?: ComorbiditiesScalarWhereWithAggregatesInput | ComorbiditiesScalarWhereWithAggregatesInput[]
        OR?: ComorbiditiesScalarWhereWithAggregatesInput[]
        NOT?: ComorbiditiesScalarWhereWithAggregatesInput | ComorbiditiesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Comorbidities"> | string
        type?: StringWithAggregatesFilter<"Comorbidities"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Comorbidities"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Comorbidities"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Comorbidities"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Comorbidities"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Comorbidities"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Comorbidities"> | string | null
        deleted?: BoolWithAggregatesFilter<"Comorbidities"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Comorbidities"> | string | null
        patientId?: StringNullableWithAggregatesFilter<"Comorbidities"> | string | null
        comorbiditiesValuesId?: StringWithAggregatesFilter<"Comorbidities"> | string
        appointmentId?: StringNullableWithAggregatesFilter<"Comorbidities"> | string | null
    };
    export type ComorbiditiesValuesWhereInput = {
        AND?: ComorbiditiesValuesWhereInput | ComorbiditiesValuesWhereInput[]
        OR?: ComorbiditiesValuesWhereInput[]
        NOT?: ComorbiditiesValuesWhereInput | ComorbiditiesValuesWhereInput[]
        id?: StringFilter<"ComorbiditiesValues"> | string
        value?: StringFilter<"ComorbiditiesValues"> | string
        createdAt?: DateTimeFilter<"ComorbiditiesValues"> | Date | string
        comorbidities?: ComorbiditiesListRelationFilter
    };
    export type ComorbiditiesValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        comorbidities?: ComorbiditiesOrderByRelationAggregateInput
    };
    export type ComorbiditiesValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: ComorbiditiesValuesWhereInput | ComorbiditiesValuesWhereInput[]
        OR?: ComorbiditiesValuesWhereInput[]
        NOT?: ComorbiditiesValuesWhereInput | ComorbiditiesValuesWhereInput[]
        createdAt?: DateTimeFilter<"ComorbiditiesValues"> | Date | string
        comorbidities?: ComorbiditiesListRelationFilter
    }, "id" | "value">;
    export type ComorbiditiesValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: ComorbiditiesValuesCountOrderByAggregateInput
        _max?: ComorbiditiesValuesMaxOrderByAggregateInput
        _min?: ComorbiditiesValuesMinOrderByAggregateInput
    };
    export type ComorbiditiesValuesScalarWhereWithAggregatesInput = {
        AND?: ComorbiditiesValuesScalarWhereWithAggregatesInput | ComorbiditiesValuesScalarWhereWithAggregatesInput[]
        OR?: ComorbiditiesValuesScalarWhereWithAggregatesInput[]
        NOT?: ComorbiditiesValuesScalarWhereWithAggregatesInput | ComorbiditiesValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"ComorbiditiesValues"> | string
        value?: StringWithAggregatesFilter<"ComorbiditiesValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"ComorbiditiesValues"> | Date | string
    };
    export type SurgeriesWhereInput = {
        AND?: SurgeriesWhereInput | SurgeriesWhereInput[]
        OR?: SurgeriesWhereInput[]
        NOT?: SurgeriesWhereInput | SurgeriesWhereInput[]
        id?: StringFilter<"Surgeries"> | string
        type?: StringFilter<"Surgeries"> | string
        createdAt?: DateTimeFilter<"Surgeries"> | Date | string
        createdById?: StringNullableFilter<"Surgeries"> | string | null
        updatedAt?: DateTimeFilter<"Surgeries"> | Date | string
        updatedById?: StringNullableFilter<"Surgeries"> | string | null
        deletedAt?: DateTimeNullableFilter<"Surgeries"> | Date | string | null
        deletedById?: StringNullableFilter<"Surgeries"> | string | null
        deleted?: BoolFilter<"Surgeries"> | boolean
        organizationId?: StringNullableFilter<"Surgeries"> | string | null
        patientId?: StringFilter<"Surgeries"> | string
        surgeriesValuesId?: StringFilter<"Surgeries"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        surgeriesValues?: XOR<SurgeriesValuesScalarRelationFilter, SurgeriesValuesWhereInput>
    };
    export type SurgeriesOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        surgeriesValuesId?: SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        surgeriesValues?: SurgeriesValuesOrderByWithRelationInput
    };
    export type SurgeriesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: SurgeriesWhereInput | SurgeriesWhereInput[]
        OR?: SurgeriesWhereInput[]
        NOT?: SurgeriesWhereInput | SurgeriesWhereInput[]
        type?: StringFilter<"Surgeries"> | string
        createdAt?: DateTimeFilter<"Surgeries"> | Date | string
        createdById?: StringNullableFilter<"Surgeries"> | string | null
        updatedAt?: DateTimeFilter<"Surgeries"> | Date | string
        updatedById?: StringNullableFilter<"Surgeries"> | string | null
        deletedAt?: DateTimeNullableFilter<"Surgeries"> | Date | string | null
        deletedById?: StringNullableFilter<"Surgeries"> | string | null
        deleted?: BoolFilter<"Surgeries"> | boolean
        organizationId?: StringNullableFilter<"Surgeries"> | string | null
        patientId?: StringFilter<"Surgeries"> | string
        surgeriesValuesId?: StringFilter<"Surgeries"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        surgeriesValues?: XOR<SurgeriesValuesScalarRelationFilter, SurgeriesValuesWhereInput>
    }, "id">;
    export type SurgeriesOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        surgeriesValuesId?: SortOrder
        _count?: SurgeriesCountOrderByAggregateInput
        _max?: SurgeriesMaxOrderByAggregateInput
        _min?: SurgeriesMinOrderByAggregateInput
    };
    export type SurgeriesScalarWhereWithAggregatesInput = {
        AND?: SurgeriesScalarWhereWithAggregatesInput | SurgeriesScalarWhereWithAggregatesInput[]
        OR?: SurgeriesScalarWhereWithAggregatesInput[]
        NOT?: SurgeriesScalarWhereWithAggregatesInput | SurgeriesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"Surgeries"> | string
        type?: StringWithAggregatesFilter<"Surgeries"> | string
        createdAt?: DateTimeWithAggregatesFilter<"Surgeries"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"Surgeries"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"Surgeries"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"Surgeries"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"Surgeries"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"Surgeries"> | string | null
        deleted?: BoolWithAggregatesFilter<"Surgeries"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"Surgeries"> | string | null
        patientId?: StringWithAggregatesFilter<"Surgeries"> | string
        surgeriesValuesId?: StringWithAggregatesFilter<"Surgeries"> | string
    };
    export type SurgeriesValuesWhereInput = {
        AND?: SurgeriesValuesWhereInput | SurgeriesValuesWhereInput[]
        OR?: SurgeriesValuesWhereInput[]
        NOT?: SurgeriesValuesWhereInput | SurgeriesValuesWhereInput[]
        id?: StringFilter<"SurgeriesValues"> | string
        value?: StringFilter<"SurgeriesValues"> | string
        createdAt?: DateTimeFilter<"SurgeriesValues"> | Date | string
        surgeries?: SurgeriesListRelationFilter
    };
    export type SurgeriesValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        surgeries?: SurgeriesOrderByRelationAggregateInput
    };
    export type SurgeriesValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: SurgeriesValuesWhereInput | SurgeriesValuesWhereInput[]
        OR?: SurgeriesValuesWhereInput[]
        NOT?: SurgeriesValuesWhereInput | SurgeriesValuesWhereInput[]
        createdAt?: DateTimeFilter<"SurgeriesValues"> | Date | string
        surgeries?: SurgeriesListRelationFilter
    }, "id" | "value">;
    export type SurgeriesValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: SurgeriesValuesCountOrderByAggregateInput
        _max?: SurgeriesValuesMaxOrderByAggregateInput
        _min?: SurgeriesValuesMinOrderByAggregateInput
    };
    export type SurgeriesValuesScalarWhereWithAggregatesInput = {
        AND?: SurgeriesValuesScalarWhereWithAggregatesInput | SurgeriesValuesScalarWhereWithAggregatesInput[]
        OR?: SurgeriesValuesScalarWhereWithAggregatesInput[]
        NOT?: SurgeriesValuesScalarWhereWithAggregatesInput | SurgeriesValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"SurgeriesValues"> | string
        value?: StringWithAggregatesFilter<"SurgeriesValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"SurgeriesValues"> | Date | string
    };
    export type HealthPlansWhereInput = {
        AND?: HealthPlansWhereInput | HealthPlansWhereInput[]
        OR?: HealthPlansWhereInput[]
        NOT?: HealthPlansWhereInput | HealthPlansWhereInput[]
        id?: StringFilter<"HealthPlans"> | string
        type?: StringFilter<"HealthPlans"> | string
        createdAt?: DateTimeFilter<"HealthPlans"> | Date | string
        createdById?: StringNullableFilter<"HealthPlans"> | string | null
        updatedAt?: DateTimeFilter<"HealthPlans"> | Date | string
        updatedById?: StringNullableFilter<"HealthPlans"> | string | null
        deletedAt?: DateTimeNullableFilter<"HealthPlans"> | Date | string | null
        deletedById?: StringNullableFilter<"HealthPlans"> | string | null
        deleted?: BoolFilter<"HealthPlans"> | boolean
        organizationId?: StringNullableFilter<"HealthPlans"> | string | null
        patientId?: StringFilter<"HealthPlans"> | string
        healthPlansValuesId?: StringFilter<"HealthPlans"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        healthPlansValues?: XOR<HealthPlansValuesScalarRelationFilter, HealthPlansValuesWhereInput>
    };
    export type HealthPlansOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        healthPlansValuesId?: SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        patient?: PatientOrderByWithRelationInput
        healthPlansValues?: HealthPlansValuesOrderByWithRelationInput
    };
    export type HealthPlansWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: HealthPlansWhereInput | HealthPlansWhereInput[]
        OR?: HealthPlansWhereInput[]
        NOT?: HealthPlansWhereInput | HealthPlansWhereInput[]
        type?: StringFilter<"HealthPlans"> | string
        createdAt?: DateTimeFilter<"HealthPlans"> | Date | string
        createdById?: StringNullableFilter<"HealthPlans"> | string | null
        updatedAt?: DateTimeFilter<"HealthPlans"> | Date | string
        updatedById?: StringNullableFilter<"HealthPlans"> | string | null
        deletedAt?: DateTimeNullableFilter<"HealthPlans"> | Date | string | null
        deletedById?: StringNullableFilter<"HealthPlans"> | string | null
        deleted?: BoolFilter<"HealthPlans"> | boolean
        organizationId?: StringNullableFilter<"HealthPlans"> | string | null
        patientId?: StringFilter<"HealthPlans"> | string
        healthPlansValuesId?: StringFilter<"HealthPlans"> | string
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
        healthPlansValues?: XOR<HealthPlansValuesScalarRelationFilter, HealthPlansValuesWhereInput>
    }, "id">;
    export type HealthPlansOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        patientId?: SortOrder
        healthPlansValuesId?: SortOrder
        _count?: HealthPlansCountOrderByAggregateInput
        _max?: HealthPlansMaxOrderByAggregateInput
        _min?: HealthPlansMinOrderByAggregateInput
    };
    export type HealthPlansScalarWhereWithAggregatesInput = {
        AND?: HealthPlansScalarWhereWithAggregatesInput | HealthPlansScalarWhereWithAggregatesInput[]
        OR?: HealthPlansScalarWhereWithAggregatesInput[]
        NOT?: HealthPlansScalarWhereWithAggregatesInput | HealthPlansScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"HealthPlans"> | string
        type?: StringWithAggregatesFilter<"HealthPlans"> | string
        createdAt?: DateTimeWithAggregatesFilter<"HealthPlans"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"HealthPlans"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"HealthPlans"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"HealthPlans"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"HealthPlans"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"HealthPlans"> | string | null
        deleted?: BoolWithAggregatesFilter<"HealthPlans"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"HealthPlans"> | string | null
        patientId?: StringWithAggregatesFilter<"HealthPlans"> | string
        healthPlansValuesId?: StringWithAggregatesFilter<"HealthPlans"> | string
    };
    export type HealthPlansValuesWhereInput = {
        AND?: HealthPlansValuesWhereInput | HealthPlansValuesWhereInput[]
        OR?: HealthPlansValuesWhereInput[]
        NOT?: HealthPlansValuesWhereInput | HealthPlansValuesWhereInput[]
        id?: StringFilter<"HealthPlansValues"> | string
        value?: StringFilter<"HealthPlansValues"> | string
        createdAt?: DateTimeFilter<"HealthPlansValues"> | Date | string
        healthPlans?: HealthPlansListRelationFilter
    };
    export type HealthPlansValuesOrderByWithRelationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        healthPlans?: HealthPlansOrderByRelationAggregateInput
    };
    export type HealthPlansValuesWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        value?: string
        AND?: HealthPlansValuesWhereInput | HealthPlansValuesWhereInput[]
        OR?: HealthPlansValuesWhereInput[]
        NOT?: HealthPlansValuesWhereInput | HealthPlansValuesWhereInput[]
        createdAt?: DateTimeFilter<"HealthPlansValues"> | Date | string
        healthPlans?: HealthPlansListRelationFilter
    }, "id" | "value">;
    export type HealthPlansValuesOrderByWithAggregationInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
        _count?: HealthPlansValuesCountOrderByAggregateInput
        _max?: HealthPlansValuesMaxOrderByAggregateInput
        _min?: HealthPlansValuesMinOrderByAggregateInput
    };
    export type HealthPlansValuesScalarWhereWithAggregatesInput = {
        AND?: HealthPlansValuesScalarWhereWithAggregatesInput | HealthPlansValuesScalarWhereWithAggregatesInput[]
        OR?: HealthPlansValuesScalarWhereWithAggregatesInput[]
        NOT?: HealthPlansValuesScalarWhereWithAggregatesInput | HealthPlansValuesScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"HealthPlansValues"> | string
        value?: StringWithAggregatesFilter<"HealthPlansValues"> | string
        createdAt?: DateTimeWithAggregatesFilter<"HealthPlansValues"> | Date | string
    };
    export type DefaultObjectiveInformationWhereInput = {
        AND?: DefaultObjectiveInformationWhereInput | DefaultObjectiveInformationWhereInput[]
        OR?: DefaultObjectiveInformationWhereInput[]
        NOT?: DefaultObjectiveInformationWhereInput | DefaultObjectiveInformationWhereInput[]
        id?: StringFilter<"DefaultObjectiveInformation"> | string
        type?: StringFilter<"DefaultObjectiveInformation"> | string
        createdAt?: DateTimeFilter<"DefaultObjectiveInformation"> | Date | string
        createdById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        updatedAt?: DateTimeFilter<"DefaultObjectiveInformation"> | Date | string
        updatedById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        deletedAt?: DateTimeNullableFilter<"DefaultObjectiveInformation"> | Date | string | null
        deletedById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        deleted?: BoolFilter<"DefaultObjectiveInformation"> | boolean
        organizationId?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        text?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    };
    export type DefaultObjectiveInformationOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        text?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
    };
    export type DefaultObjectiveInformationWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        AND?: DefaultObjectiveInformationWhereInput | DefaultObjectiveInformationWhereInput[]
        OR?: DefaultObjectiveInformationWhereInput[]
        NOT?: DefaultObjectiveInformationWhereInput | DefaultObjectiveInformationWhereInput[]
        type?: StringFilter<"DefaultObjectiveInformation"> | string
        createdAt?: DateTimeFilter<"DefaultObjectiveInformation"> | Date | string
        createdById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        updatedAt?: DateTimeFilter<"DefaultObjectiveInformation"> | Date | string
        updatedById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        deletedAt?: DateTimeNullableFilter<"DefaultObjectiveInformation"> | Date | string | null
        deletedById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        deleted?: BoolFilter<"DefaultObjectiveInformation"> | boolean
        organizationId?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        text?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    }, "id">;
    export type DefaultObjectiveInformationOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        text?: SortOrderInput | SortOrder
        _count?: DefaultObjectiveInformationCountOrderByAggregateInput
        _max?: DefaultObjectiveInformationMaxOrderByAggregateInput
        _min?: DefaultObjectiveInformationMinOrderByAggregateInput
    };
    export type DefaultObjectiveInformationScalarWhereWithAggregatesInput = {
        AND?: DefaultObjectiveInformationScalarWhereWithAggregatesInput | DefaultObjectiveInformationScalarWhereWithAggregatesInput[]
        OR?: DefaultObjectiveInformationScalarWhereWithAggregatesInput[]
        NOT?: DefaultObjectiveInformationScalarWhereWithAggregatesInput | DefaultObjectiveInformationScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"DefaultObjectiveInformation"> | string
        type?: StringWithAggregatesFilter<"DefaultObjectiveInformation"> | string
        createdAt?: DateTimeWithAggregatesFilter<"DefaultObjectiveInformation"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"DefaultObjectiveInformation"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"DefaultObjectiveInformation"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"DefaultObjectiveInformation"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"DefaultObjectiveInformation"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"DefaultObjectiveInformation"> | string | null
        deleted?: BoolWithAggregatesFilter<"DefaultObjectiveInformation"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"DefaultObjectiveInformation"> | string | null
        text?: StringNullableWithAggregatesFilter<"DefaultObjectiveInformation"> | string | null
    };
    export type EventCalendarWhereInput = {
        AND?: EventCalendarWhereInput | EventCalendarWhereInput[]
        OR?: EventCalendarWhereInput[]
        NOT?: EventCalendarWhereInput | EventCalendarWhereInput[]
        id?: StringFilter<"EventCalendar"> | string
        type?: StringFilter<"EventCalendar"> | string
        createdAt?: DateTimeFilter<"EventCalendar"> | Date | string
        createdById?: StringNullableFilter<"EventCalendar"> | string | null
        updatedAt?: DateTimeFilter<"EventCalendar"> | Date | string
        updatedById?: StringNullableFilter<"EventCalendar"> | string | null
        deletedAt?: DateTimeNullableFilter<"EventCalendar"> | Date | string | null
        deletedById?: StringNullableFilter<"EventCalendar"> | string | null
        deleted?: BoolFilter<"EventCalendar"> | boolean
        organizationId?: StringNullableFilter<"EventCalendar"> | string | null
        title?: StringFilter<"EventCalendar"> | string
        description?: StringNullableFilter<"EventCalendar"> | string | null
        start?: DateTimeFilter<"EventCalendar"> | Date | string
        end?: DateTimeFilter<"EventCalendar"> | Date | string
        allDay?: BoolNullableFilter<"EventCalendar"> | boolean | null
        eventType?: EnumEventCalendarTypeNullableFilter<"EventCalendar"> | $Enums.EventCalendarType | null
        rrule?: StringNullableFilter<"EventCalendar"> | string | null
        appointmentId?: StringNullableFilter<"EventCalendar"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    };
    export type EventCalendarOrderByWithRelationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        title?: SortOrder
        description?: SortOrderInput | SortOrder
        start?: SortOrder
        end?: SortOrder
        allDay?: SortOrderInput | SortOrder
        eventType?: SortOrderInput | SortOrder
        rrule?: SortOrderInput | SortOrder
        appointmentId?: SortOrderInput | SortOrder
        createdByUser?: UserOrderByWithRelationInput
        updatedByUser?: UserOrderByWithRelationInput
        deletedByUser?: UserOrderByWithRelationInput
        organization?: OrganizationOrderByWithRelationInput
        appointment?: AppointmentOrderByWithRelationInput
    };
    export type EventCalendarWhereUniqueInput = Prisma.AtLeast<{
        id?: string
        appointmentId?: string
        AND?: EventCalendarWhereInput | EventCalendarWhereInput[]
        OR?: EventCalendarWhereInput[]
        NOT?: EventCalendarWhereInput | EventCalendarWhereInput[]
        type?: StringFilter<"EventCalendar"> | string
        createdAt?: DateTimeFilter<"EventCalendar"> | Date | string
        createdById?: StringNullableFilter<"EventCalendar"> | string | null
        updatedAt?: DateTimeFilter<"EventCalendar"> | Date | string
        updatedById?: StringNullableFilter<"EventCalendar"> | string | null
        deletedAt?: DateTimeNullableFilter<"EventCalendar"> | Date | string | null
        deletedById?: StringNullableFilter<"EventCalendar"> | string | null
        deleted?: BoolFilter<"EventCalendar"> | boolean
        organizationId?: StringNullableFilter<"EventCalendar"> | string | null
        title?: StringFilter<"EventCalendar"> | string
        description?: StringNullableFilter<"EventCalendar"> | string | null
        start?: DateTimeFilter<"EventCalendar"> | Date | string
        end?: DateTimeFilter<"EventCalendar"> | Date | string
        allDay?: BoolNullableFilter<"EventCalendar"> | boolean | null
        eventType?: EnumEventCalendarTypeNullableFilter<"EventCalendar"> | $Enums.EventCalendarType | null
        rrule?: StringNullableFilter<"EventCalendar"> | string | null
        createdByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
        organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
        appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    }, "id" | "appointmentId">;
    export type EventCalendarOrderByWithAggregationInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrderInput | SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrderInput | SortOrder
        deletedAt?: SortOrderInput | SortOrder
        deletedById?: SortOrderInput | SortOrder
        deleted?: SortOrder
        organizationId?: SortOrderInput | SortOrder
        title?: SortOrder
        description?: SortOrderInput | SortOrder
        start?: SortOrder
        end?: SortOrder
        allDay?: SortOrderInput | SortOrder
        eventType?: SortOrderInput | SortOrder
        rrule?: SortOrderInput | SortOrder
        appointmentId?: SortOrderInput | SortOrder
        _count?: EventCalendarCountOrderByAggregateInput
        _max?: EventCalendarMaxOrderByAggregateInput
        _min?: EventCalendarMinOrderByAggregateInput
    };
    export type EventCalendarScalarWhereWithAggregatesInput = {
        AND?: EventCalendarScalarWhereWithAggregatesInput | EventCalendarScalarWhereWithAggregatesInput[]
        OR?: EventCalendarScalarWhereWithAggregatesInput[]
        NOT?: EventCalendarScalarWhereWithAggregatesInput | EventCalendarScalarWhereWithAggregatesInput[]
        id?: StringWithAggregatesFilter<"EventCalendar"> | string
        type?: StringWithAggregatesFilter<"EventCalendar"> | string
        createdAt?: DateTimeWithAggregatesFilter<"EventCalendar"> | Date | string
        createdById?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
        updatedAt?: DateTimeWithAggregatesFilter<"EventCalendar"> | Date | string
        updatedById?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
        deletedAt?: DateTimeNullableWithAggregatesFilter<"EventCalendar"> | Date | string | null
        deletedById?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
        deleted?: BoolWithAggregatesFilter<"EventCalendar"> | boolean
        organizationId?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
        title?: StringWithAggregatesFilter<"EventCalendar"> | string
        description?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
        start?: DateTimeWithAggregatesFilter<"EventCalendar"> | Date | string
        end?: DateTimeWithAggregatesFilter<"EventCalendar"> | Date | string
        allDay?: BoolNullableWithAggregatesFilter<"EventCalendar"> | boolean | null
        eventType?: EnumEventCalendarTypeNullableWithAggregatesFilter<"EventCalendar"> | $Enums.EventCalendarType | null
        rrule?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
        appointmentId?: StringNullableWithAggregatesFilter<"EventCalendar"> | string | null
    };
    export type UserCreateInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserCreateManyInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
    };
    export type UserUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
    };
    export type UserUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
    };
    export type AssetCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutCreatedAssetsInput
        updatedByUser?: UserCreateNestedOneWithoutUpdatedAssetsInput
        deletedByUser?: UserCreateNestedOneWithoutDeletedAssetsInput
        organization?: OrganizationCreateNestedOneWithoutAssetsInput
    };
    export type AssetUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutCreatedAssetsNestedInput
        updatedByUser?: UserUpdateOneWithoutUpdatedAssetsNestedInput
        deletedByUser?: UserUpdateOneWithoutDeletedAssetsNestedInput
        organization?: OrganizationUpdateOneWithoutAssetsNestedInput
    };
    export type AssetUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type AssetUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SessionCreateInput = {
        id?: string
        expiresAt: Date | string
        token: string
        createdAt?: Date | string
        updatedAt?: Date | string
        ipAddress?: string | null
        userAgent?: string | null
        impersonatedBy?: string | null
        activeOrganizationId?: string | null
        user: UserCreateNestedOneWithoutSessionsInput
    };
    export type SessionUncheckedCreateInput = {
        id?: string
        expiresAt: Date | string
        token: string
        createdAt?: Date | string
        updatedAt?: Date | string
        ipAddress?: string | null
        userAgent?: string | null
        userId: string
        impersonatedBy?: string | null
        activeOrganizationId?: string | null
    };
    export type SessionUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
        user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    };
    export type SessionUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: StringFieldUpdateOperationsInput | string
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SessionCreateManyInput = {
        id?: string
        expiresAt: Date | string
        token: string
        createdAt?: Date | string
        updatedAt?: Date | string
        ipAddress?: string | null
        userAgent?: string | null
        userId: string
        impersonatedBy?: string | null
        activeOrganizationId?: string | null
    };
    export type SessionUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SessionUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: StringFieldUpdateOperationsInput | string
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AccountCreateInput = {
        id?: string
        accountId: string
        providerId: string
        accessToken?: string | null
        refreshToken?: string | null
        idToken?: string | null
        accessTokenExpiresAt?: Date | string | null
        refreshTokenExpiresAt?: Date | string | null
        scope?: string | null
        password?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        user: UserCreateNestedOneWithoutAccountsInput
    };
    export type AccountUncheckedCreateInput = {
        id?: string
        accountId: string
        providerId: string
        userId: string
        accessToken?: string | null
        refreshToken?: string | null
        idToken?: string | null
        accessTokenExpiresAt?: Date | string | null
        refreshTokenExpiresAt?: Date | string | null
        scope?: string | null
        password?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type AccountUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    };
    export type AccountUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        userId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AccountCreateManyInput = {
        id?: string
        accountId: string
        providerId: string
        userId: string
        accessToken?: string | null
        refreshToken?: string | null
        idToken?: string | null
        accessTokenExpiresAt?: Date | string | null
        refreshTokenExpiresAt?: Date | string | null
        scope?: string | null
        password?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type AccountUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AccountUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        userId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VerificationCreateInput = {
        id?: string
        identifier: string
        value: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type VerificationUncheckedCreateInput = {
        id?: string
        identifier: string
        value: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type VerificationUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        identifier?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VerificationUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        identifier?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VerificationCreateManyInput = {
        id?: string
        identifier: string
        value: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type VerificationUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        identifier?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VerificationUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        identifier?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type OrganizationCreateInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
        assets?: AssetCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
        assets?: AssetUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
        assets?: AssetUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
        assets?: AssetUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationCreateManyInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
    };
    export type OrganizationUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type OrganizationUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MemberCreateInput = {
        id?: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
        organization: OrganizationCreateNestedOneWithoutMembersInput
        user: UserCreateNestedOneWithoutMembersInput
    };
    export type MemberUncheckedCreateInput = {
        id?: string
        organizationId: string
        userId: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type MemberUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
        user?: UserUpdateOneRequiredWithoutMembersNestedInput
    };
    export type MemberUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        userId?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MemberCreateManyInput = {
        id?: string
        organizationId: string
        userId: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type MemberUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MemberUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        userId?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type InvitationCreateInput = {
        id?: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        organization: OrganizationCreateNestedOneWithoutInvitationsInput
        user: UserCreateNestedOneWithoutInvitationsInput
    };
    export type InvitationUncheckedCreateInput = {
        id?: string
        organizationId: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        inviterId: string
    };
    export type InvitationUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
        user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
    };
    export type InvitationUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        inviterId?: StringFieldUpdateOperationsInput | string
    };
    export type InvitationCreateManyInput = {
        id?: string
        organizationId: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        inviterId: string
    };
    export type InvitationUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type InvitationUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        inviterId?: StringFieldUpdateOperationsInput | string
    };
    export type CidCreateInput = {
        id?: string
        code: string
        description: string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        appointmentCid?: AppointmentCidCreateNestedManyWithoutCidInput
    };
    export type CidUncheckedCreateInput = {
        id?: string
        code: string
        description: string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        appointmentCid?: AppointmentCidUncheckedCreateNestedManyWithoutCidInput
    };
    export type CidUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        code?: StringFieldUpdateOperationsInput | string
        description?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        appointmentCid?: AppointmentCidUpdateManyWithoutCidNestedInput
    };
    export type CidUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        code?: StringFieldUpdateOperationsInput | string
        description?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        appointmentCid?: AppointmentCidUncheckedUpdateManyWithoutCidNestedInput
    };
    export type CidCreateManyInput = {
        id?: string
        code: string
        description: string
        createdAt?: Date | string
        updatedAt?: Date | string | null
    };
    export type CidUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        code?: StringFieldUpdateOperationsInput | string
        description?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type CidUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        code?: StringFieldUpdateOperationsInput | string
        description?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type AppointmentCidCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input
        appointment: AppointmentCreateNestedOneWithoutCidsInput
        cid: CidCreateNestedOneWithoutAppointmentCidInput
    };
    export type AppointmentCidUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput
        appointment?: AppointmentUpdateOneRequiredWithoutCidsNestedInput
        cid?: CidUpdateOneRequiredWithoutAppointmentCidNestedInput
    };
    export type AppointmentCidUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type AppointmentCidUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
    };
    export type AppointmentUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
    };
    export type AppointmentUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type PatientCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type PatientCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
    };
    export type PatientUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type PatientUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type VaccinationsCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input
        patient: PatientCreateNestedOneWithoutVaccinationsInput
        vaccinationsValues: VaccinationsValuesCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type VaccinationsUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutVaccinationsNestedInput
        vaccinationsValues?: VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type VaccinationsUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type VaccinationsUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        vaccinations?: VaccinationsCreateNestedManyWithoutVaccinationsValuesInput
    };
    export type VaccinationsValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutVaccinationsValuesInput
    };
    export type VaccinationsValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        vaccinations?: VaccinationsUpdateManyWithoutVaccinationsValuesNestedInput
    };
    export type VaccinationsValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutVaccinationsValuesNestedInput
    };
    export type VaccinationsValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type VaccinationsValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VaccinationsValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AllergiesCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type AllergiesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        allergies?: AllergiesCreateNestedManyWithoutAllergiesValuesInput
    };
    export type AllergiesValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAllergiesValuesInput
    };
    export type AllergiesValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        allergies?: AllergiesUpdateManyWithoutAllergiesValuesNestedInput
    };
    export type AllergiesValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        allergies?: AllergiesUncheckedUpdateManyWithoutAllergiesValuesNestedInput
    };
    export type AllergiesValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type AllergiesValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AllergiesValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MedicationsCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type MedicationsUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        medications?: MedicationsCreateNestedManyWithoutMedicationsValuesInput
    };
    export type MedicationsValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        medications?: MedicationsUncheckedCreateNestedManyWithoutMedicationsValuesInput
    };
    export type MedicationsValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        medications?: MedicationsUpdateManyWithoutMedicationsValuesNestedInput
    };
    export type MedicationsValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        medications?: MedicationsUncheckedUpdateManyWithoutMedicationsValuesNestedInput
    };
    export type MedicationsValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type MedicationsValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MedicationsValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input
        patient: PatientCreateNestedOneWithoutExamResultsInput
        examResultsValues: ExamResultsValuesCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutExamResultsNestedInput
        examResultsValues?: ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        examResults?: ExamResultsCreateNestedManyWithoutExamResultsValuesInput
    };
    export type ExamResultsValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutExamResultsValuesInput
    };
    export type ExamResultsValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        examResults?: ExamResultsUpdateManyWithoutExamResultsValuesNestedInput
    };
    export type ExamResultsValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        examResults?: ExamResultsUncheckedUpdateManyWithoutExamResultsValuesNestedInput
    };
    export type ExamResultsValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type ExamResultsValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type ComorbiditiesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        comorbidities?: ComorbiditiesCreateNestedManyWithoutComorbiditiesValuesInput
    };
    export type ComorbiditiesValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutComorbiditiesValuesInput
    };
    export type ComorbiditiesValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        comorbidities?: ComorbiditiesUpdateManyWithoutComorbiditiesValuesNestedInput
    };
    export type ComorbiditiesValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutComorbiditiesValuesNestedInput
    };
    export type ComorbiditiesValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type ComorbiditiesValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type SurgeriesCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input
        patient: PatientCreateNestedOneWithoutSurgeriesInput
        surgeriesValues: SurgeriesValuesCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type SurgeriesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutSurgeriesNestedInput
        surgeriesValues?: SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type SurgeriesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type SurgeriesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        surgeries?: SurgeriesCreateNestedManyWithoutSurgeriesValuesInput
    };
    export type SurgeriesValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutSurgeriesValuesInput
    };
    export type SurgeriesValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        surgeries?: SurgeriesUpdateManyWithoutSurgeriesValuesNestedInput
    };
    export type SurgeriesValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        surgeries?: SurgeriesUncheckedUpdateManyWithoutSurgeriesValuesNestedInput
    };
    export type SurgeriesValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type SurgeriesValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type SurgeriesValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type HealthPlansCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input
        patient: PatientCreateNestedOneWithoutHealthPlansInput
        healthPlansValues: HealthPlansValuesCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type HealthPlansUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutHealthPlansNestedInput
        healthPlansValues?: HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type HealthPlansUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type HealthPlansUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansValuesCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        healthPlans?: HealthPlansCreateNestedManyWithoutHealthPlansValuesInput
    };
    export type HealthPlansValuesUncheckedCreateInput = {
        id?: string
        value: string
        createdAt?: Date | string
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutHealthPlansValuesInput
    };
    export type HealthPlansValuesUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        healthPlans?: HealthPlansUpdateManyWithoutHealthPlansValuesNestedInput
    };
    export type HealthPlansValuesUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutHealthPlansValuesNestedInput
    };
    export type HealthPlansValuesCreateManyInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type HealthPlansValuesUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type HealthPlansValuesUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type DefaultObjectiveInformationCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        text?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Defau_0Input
    };
    export type DefaultObjectiveInformationUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type DefaultObjectiveInformationUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Defaul_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Defaul_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Defaul_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Defau_0NestedInput
    };
    export type DefaultObjectiveInformationUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type DefaultObjectiveInformationCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type DefaultObjectiveInformationUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarCreateInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_EventC_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Event_0Input
        appointment?: AppointmentCreateNestedOneWithoutEventCalendarInput
    };
    export type EventCalendarUncheckedCreateInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type EventCalendarUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_EventC_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_EventC_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_EventC_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Event_0NestedInput
        appointment?: AppointmentUpdateOneWithoutEventCalendarNestedInput
    };
    export type EventCalendarUncheckedUpdateInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarCreateManyInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type EventCalendarUpdateManyMutationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUncheckedUpdateManyInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type StringFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel>
        in?: string[]
        notIn?: string[]
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringFilter<$PrismaModel> | string
    };
    export type BoolFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel>
        not?: NestedBoolFilter<$PrismaModel> | boolean
    };
    export type StringNullableFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel> | null
        in?: string[] | null
        notIn?: string[] | null
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringNullableFilter<$PrismaModel> | string | null
    };
    export type DateTimeFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        in?: Date[] | string[]
        notIn?: Date[] | string[]
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeFilter<$PrismaModel> | Date | string
    };
    export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
        in?: $Enums.UserRole[] | null
        notIn?: $Enums.UserRole[] | null
        not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
    };
    export type BoolNullableFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
        not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
    };
    export type DateTimeNullableFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
        in?: Date[] | string[] | null
        notIn?: Date[] | string[] | null
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    };
    export type SessionListRelationFilter = {
        every?: SessionWhereInput
        some?: SessionWhereInput
        none?: SessionWhereInput
    };
    export type AccountListRelationFilter = {
        every?: AccountWhereInput
        some?: AccountWhereInput
        none?: AccountWhereInput
    };
    export type MemberListRelationFilter = {
        every?: MemberWhereInput
        some?: MemberWhereInput
        none?: MemberWhereInput
    };
    export type InvitationListRelationFilter = {
        every?: InvitationWhereInput
        some?: InvitationWhereInput
        none?: InvitationWhereInput
    };
    export type PatientListRelationFilter = {
        every?: PatientWhereInput
        some?: PatientWhereInput
        none?: PatientWhereInput
    };
    export type AssetListRelationFilter = {
        every?: AssetWhereInput
        some?: AssetWhereInput
        none?: AssetWhereInput
    };
    export type AppointmentCidListRelationFilter = {
        every?: AppointmentCidWhereInput
        some?: AppointmentCidWhereInput
        none?: AppointmentCidWhereInput
    };
    export type AppointmentListRelationFilter = {
        every?: AppointmentWhereInput
        some?: AppointmentWhereInput
        none?: AppointmentWhereInput
    };
    export type VaccinationsListRelationFilter = {
        every?: VaccinationsWhereInput
        some?: VaccinationsWhereInput
        none?: VaccinationsWhereInput
    };
    export type AllergiesListRelationFilter = {
        every?: AllergiesWhereInput
        some?: AllergiesWhereInput
        none?: AllergiesWhereInput
    };
    export type MedicationsListRelationFilter = {
        every?: MedicationsWhereInput
        some?: MedicationsWhereInput
        none?: MedicationsWhereInput
    };
    export type ExamResultsListRelationFilter = {
        every?: ExamResultsWhereInput
        some?: ExamResultsWhereInput
        none?: ExamResultsWhereInput
    };
    export type ComorbiditiesListRelationFilter = {
        every?: ComorbiditiesWhereInput
        some?: ComorbiditiesWhereInput
        none?: ComorbiditiesWhereInput
    };
    export type SurgeriesListRelationFilter = {
        every?: SurgeriesWhereInput
        some?: SurgeriesWhereInput
        none?: SurgeriesWhereInput
    };
    export type HealthPlansListRelationFilter = {
        every?: HealthPlansWhereInput
        some?: HealthPlansWhereInput
        none?: HealthPlansWhereInput
    };
    export type DefaultObjectiveInformationListRelationFilter = {
        every?: DefaultObjectiveInformationWhereInput
        some?: DefaultObjectiveInformationWhereInput
        none?: DefaultObjectiveInformationWhereInput
    };
    export type EventCalendarListRelationFilter = {
        every?: EventCalendarWhereInput
        some?: EventCalendarWhereInput
        none?: EventCalendarWhereInput
    };
    export type SortOrderInput = {
        sort: SortOrder
        nulls?: NullsOrder
    };
    export type SessionOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type AccountOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type MemberOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type InvitationOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type PatientOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type AssetOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type AppointmentCidOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type AppointmentOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type VaccinationsOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type AllergiesOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type MedicationsOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type ExamResultsOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type ComorbiditiesOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type SurgeriesOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type HealthPlansOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type DefaultObjectiveInformationOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type EventCalendarOrderByRelationAggregateInput = {
        _count?: SortOrder
    };
    export type UserCountOrderByAggregateInput = {
        id?: SortOrder
        name?: SortOrder
        email?: SortOrder
        emailVerified?: SortOrder
        image?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        username?: SortOrder
        displayUsername?: SortOrder
        role?: SortOrder
        banned?: SortOrder
        banReason?: SortOrder
        banExpires?: SortOrder
        changePassword?: SortOrder
    };
    export type UserMaxOrderByAggregateInput = {
        id?: SortOrder
        name?: SortOrder
        email?: SortOrder
        emailVerified?: SortOrder
        image?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        username?: SortOrder
        displayUsername?: SortOrder
        role?: SortOrder
        banned?: SortOrder
        banReason?: SortOrder
        banExpires?: SortOrder
        changePassword?: SortOrder
    };
    export type UserMinOrderByAggregateInput = {
        id?: SortOrder
        name?: SortOrder
        email?: SortOrder
        emailVerified?: SortOrder
        image?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        username?: SortOrder
        displayUsername?: SortOrder
        role?: SortOrder
        banned?: SortOrder
        banReason?: SortOrder
        banExpires?: SortOrder
        changePassword?: SortOrder
    };
    export type StringWithAggregatesFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel>
        in?: string[]
        notIn?: string[]
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
        _count?: NestedIntFilter<$PrismaModel>
        _min?: NestedStringFilter<$PrismaModel>
        _max?: NestedStringFilter<$PrismaModel>
    };
    export type BoolWithAggregatesFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel>
        not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
        _count?: NestedIntFilter<$PrismaModel>
        _min?: NestedBoolFilter<$PrismaModel>
        _max?: NestedBoolFilter<$PrismaModel>
    };
    export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel> | null
        in?: string[] | null
        notIn?: string[] | null
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedStringNullableFilter<$PrismaModel>
        _max?: NestedStringNullableFilter<$PrismaModel>
    };
    export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        in?: Date[] | string[]
        notIn?: Date[] | string[]
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
        _count?: NestedIntFilter<$PrismaModel>
        _min?: NestedDateTimeFilter<$PrismaModel>
        _max?: NestedDateTimeFilter<$PrismaModel>
    };
    export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
        in?: $Enums.UserRole[] | null
        notIn?: $Enums.UserRole[] | null
        not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
        _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    };
    export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
        not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedBoolNullableFilter<$PrismaModel>
        _max?: NestedBoolNullableFilter<$PrismaModel>
    };
    export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
        in?: Date[] | string[] | null
        notIn?: Date[] | string[] | null
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedDateTimeNullableFilter<$PrismaModel>
        _max?: NestedDateTimeNullableFilter<$PrismaModel>
    };
    export type UserNullableScalarRelationFilter = {
        is?: UserWhereInput | null
        isNot?: UserWhereInput | null
    };
    export type OrganizationNullableScalarRelationFilter = {
        is?: OrganizationWhereInput | null
        isNot?: OrganizationWhereInput | null
    };
    export type AssetCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
    };
    export type AssetMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
    };
    export type AssetMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
    };
    export type UserScalarRelationFilter = {
        is?: UserWhereInput
        isNot?: UserWhereInput
    };
    export type SessionCountOrderByAggregateInput = {
        id?: SortOrder
        expiresAt?: SortOrder
        token?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        ipAddress?: SortOrder
        userAgent?: SortOrder
        userId?: SortOrder
        impersonatedBy?: SortOrder
        activeOrganizationId?: SortOrder
    };
    export type SessionMaxOrderByAggregateInput = {
        id?: SortOrder
        expiresAt?: SortOrder
        token?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        ipAddress?: SortOrder
        userAgent?: SortOrder
        userId?: SortOrder
        impersonatedBy?: SortOrder
        activeOrganizationId?: SortOrder
    };
    export type SessionMinOrderByAggregateInput = {
        id?: SortOrder
        expiresAt?: SortOrder
        token?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        ipAddress?: SortOrder
        userAgent?: SortOrder
        userId?: SortOrder
        impersonatedBy?: SortOrder
        activeOrganizationId?: SortOrder
    };
    export type AccountCountOrderByAggregateInput = {
        id?: SortOrder
        accountId?: SortOrder
        providerId?: SortOrder
        userId?: SortOrder
        accessToken?: SortOrder
        refreshToken?: SortOrder
        idToken?: SortOrder
        accessTokenExpiresAt?: SortOrder
        refreshTokenExpiresAt?: SortOrder
        scope?: SortOrder
        password?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type AccountMaxOrderByAggregateInput = {
        id?: SortOrder
        accountId?: SortOrder
        providerId?: SortOrder
        userId?: SortOrder
        accessToken?: SortOrder
        refreshToken?: SortOrder
        idToken?: SortOrder
        accessTokenExpiresAt?: SortOrder
        refreshTokenExpiresAt?: SortOrder
        scope?: SortOrder
        password?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type AccountMinOrderByAggregateInput = {
        id?: SortOrder
        accountId?: SortOrder
        providerId?: SortOrder
        userId?: SortOrder
        accessToken?: SortOrder
        refreshToken?: SortOrder
        idToken?: SortOrder
        accessTokenExpiresAt?: SortOrder
        refreshTokenExpiresAt?: SortOrder
        scope?: SortOrder
        password?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type VerificationCountOrderByAggregateInput = {
        id?: SortOrder
        identifier?: SortOrder
        value?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type VerificationMaxOrderByAggregateInput = {
        id?: SortOrder
        identifier?: SortOrder
        value?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type VerificationMinOrderByAggregateInput = {
        id?: SortOrder
        identifier?: SortOrder
        value?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type OrganizationCountOrderByAggregateInput = {
        id?: SortOrder
        name?: SortOrder
        slug?: SortOrder
        logo?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        metadata?: SortOrder
    };
    export type OrganizationMaxOrderByAggregateInput = {
        id?: SortOrder
        name?: SortOrder
        slug?: SortOrder
        logo?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        metadata?: SortOrder
    };
    export type OrganizationMinOrderByAggregateInput = {
        id?: SortOrder
        name?: SortOrder
        slug?: SortOrder
        logo?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        metadata?: SortOrder
    };
    export type OrganizationScalarRelationFilter = {
        is?: OrganizationWhereInput
        isNot?: OrganizationWhereInput
    };
    export type MemberCountOrderByAggregateInput = {
        id?: SortOrder
        organizationId?: SortOrder
        userId?: SortOrder
        role?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type MemberMaxOrderByAggregateInput = {
        id?: SortOrder
        organizationId?: SortOrder
        userId?: SortOrder
        role?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type MemberMinOrderByAggregateInput = {
        id?: SortOrder
        organizationId?: SortOrder
        userId?: SortOrder
        role?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type InvitationCountOrderByAggregateInput = {
        id?: SortOrder
        organizationId?: SortOrder
        email?: SortOrder
        role?: SortOrder
        status?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        inviterId?: SortOrder
    };
    export type InvitationMaxOrderByAggregateInput = {
        id?: SortOrder
        organizationId?: SortOrder
        email?: SortOrder
        role?: SortOrder
        status?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        inviterId?: SortOrder
    };
    export type InvitationMinOrderByAggregateInput = {
        id?: SortOrder
        organizationId?: SortOrder
        email?: SortOrder
        role?: SortOrder
        status?: SortOrder
        expiresAt?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
        inviterId?: SortOrder
    };
    export type CidCountOrderByAggregateInput = {
        id?: SortOrder
        code?: SortOrder
        description?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type CidMaxOrderByAggregateInput = {
        id?: SortOrder
        code?: SortOrder
        description?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type CidMinOrderByAggregateInput = {
        id?: SortOrder
        code?: SortOrder
        description?: SortOrder
        createdAt?: SortOrder
        updatedAt?: SortOrder
    };
    export type AppointmentScalarRelationFilter = {
        is?: AppointmentWhereInput
        isNot?: AppointmentWhereInput
    };
    export type CidScalarRelationFilter = {
        is?: CidWhereInput
        isNot?: CidWhereInput
    };
    export type AppointmentCidAppointmentIdCidIdCompoundUniqueInput = {
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        appointmentId?: SortOrder
        cidId?: SortOrder
    };
    export type AppointmentCidMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        appointmentId?: SortOrder
        cidId?: SortOrder
    };
    export type AppointmentCidMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        appointmentId?: SortOrder
        cidId?: SortOrder
    };
    export type IntNullableFilter<$PrismaModel = never> = {
        equals?: number | IntFieldRefInput<$PrismaModel> | null
        in?: number[] | null
        notIn?: number[] | null
        lt?: number | IntFieldRefInput<$PrismaModel>
        lte?: number | IntFieldRefInput<$PrismaModel>
        gt?: number | IntFieldRefInput<$PrismaModel>
        gte?: number | IntFieldRefInput<$PrismaModel>
        not?: NestedIntNullableFilter<$PrismaModel> | number | null
    };
    export type EnumAppointmentCategoryNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentCategory | EnumAppointmentCategoryFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentCategory[] | null
        notIn?: $Enums.AppointmentCategory[] | null
        not?: NestedEnumAppointmentCategoryNullableFilter<$PrismaModel> | $Enums.AppointmentCategory | null
    };
    export type EnumAppointmentStatusNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentStatus[] | null
        notIn?: $Enums.AppointmentStatus[] | null
        not?: NestedEnumAppointmentStatusNullableFilter<$PrismaModel> | $Enums.AppointmentStatus | null
    };
    export type AppointmentNullableScalarRelationFilter = {
        is?: AppointmentWhereInput | null
        isNot?: AppointmentWhereInput | null
    };
    export type PatientScalarRelationFilter = {
        is?: PatientWhereInput
        isNot?: PatientWhereInput
    };
    export type EventCalendarNullableScalarRelationFilter = {
        is?: EventCalendarWhereInput | null
        isNot?: EventCalendarWhereInput | null
    };
    export type AppointmentCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        motive?: SortOrder
        subjective?: SortOrder
        objective?: SortOrder
        evaluation?: SortOrder
        plan?: SortOrder
        startDate?: SortOrder
        endDate?: SortOrder
        sickNoteDays?: SortOrder
        category?: SortOrder
        status?: SortOrder
        followUpId?: SortOrder
        patientId?: SortOrder
    };
    export type AppointmentAvgOrderByAggregateInput = {
        sickNoteDays?: SortOrder
    };
    export type AppointmentMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        motive?: SortOrder
        subjective?: SortOrder
        objective?: SortOrder
        evaluation?: SortOrder
        plan?: SortOrder
        startDate?: SortOrder
        endDate?: SortOrder
        sickNoteDays?: SortOrder
        category?: SortOrder
        status?: SortOrder
        followUpId?: SortOrder
        patientId?: SortOrder
    };
    export type AppointmentMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        motive?: SortOrder
        subjective?: SortOrder
        objective?: SortOrder
        evaluation?: SortOrder
        plan?: SortOrder
        startDate?: SortOrder
        endDate?: SortOrder
        sickNoteDays?: SortOrder
        category?: SortOrder
        status?: SortOrder
        followUpId?: SortOrder
        patientId?: SortOrder
    };
    export type AppointmentSumOrderByAggregateInput = {
        sickNoteDays?: SortOrder
    };
    export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: number | IntFieldRefInput<$PrismaModel> | null
        in?: number[] | null
        notIn?: number[] | null
        lt?: number | IntFieldRefInput<$PrismaModel>
        lte?: number | IntFieldRefInput<$PrismaModel>
        gt?: number | IntFieldRefInput<$PrismaModel>
        gte?: number | IntFieldRefInput<$PrismaModel>
        not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _avg?: NestedFloatNullableFilter<$PrismaModel>
        _sum?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedIntNullableFilter<$PrismaModel>
        _max?: NestedIntNullableFilter<$PrismaModel>
    };
    export type EnumAppointmentCategoryNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentCategory | EnumAppointmentCategoryFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentCategory[] | null
        notIn?: $Enums.AppointmentCategory[] | null
        not?: NestedEnumAppointmentCategoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentCategory | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumAppointmentCategoryNullableFilter<$PrismaModel>
        _max?: NestedEnumAppointmentCategoryNullableFilter<$PrismaModel>
    };
    export type EnumAppointmentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentStatus[] | null
        notIn?: $Enums.AppointmentStatus[] | null
        not?: NestedEnumAppointmentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumAppointmentStatusNullableFilter<$PrismaModel>
        _max?: NestedEnumAppointmentStatusNullableFilter<$PrismaModel>
    };
    export type EnumSexNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
        in?: $Enums.Sex[] | null
        notIn?: $Enums.Sex[] | null
        not?: NestedEnumSexNullableFilter<$PrismaModel> | $Enums.Sex | null
    };
    export type EnumRaceNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.Race | EnumRaceFieldRefInput<$PrismaModel> | null
        in?: $Enums.Race[] | null
        notIn?: $Enums.Race[] | null
        not?: NestedEnumRaceNullableFilter<$PrismaModel> | $Enums.Race | null
    };
    export type EnumCivilStatusNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.CivilStatus[] | null
        notIn?: $Enums.CivilStatus[] | null
        not?: NestedEnumCivilStatusNullableFilter<$PrismaModel> | $Enums.CivilStatus | null
    };
    export type EnumBloodTypeNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.BloodType[] | null
        notIn?: $Enums.BloodType[] | null
        not?: NestedEnumBloodTypeNullableFilter<$PrismaModel> | $Enums.BloodType | null
    };
    export type EnumGenderIdentityNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.GenderIdentity | EnumGenderIdentityFieldRefInput<$PrismaModel> | null
        in?: $Enums.GenderIdentity[] | null
        notIn?: $Enums.GenderIdentity[] | null
        not?: NestedEnumGenderIdentityNullableFilter<$PrismaModel> | $Enums.GenderIdentity | null
    };
    export type PatientCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        name?: SortOrder
        cpf?: SortOrder
        cellphone?: SortOrder
        email?: SortOrder
        sex?: SortOrder
        responsible?: SortOrder
        nationality?: SortOrder
        race?: SortOrder
        state?: SortOrder
        city?: SortOrder
        zipcode?: SortOrder
        neighborhood?: SortOrder
        street?: SortOrder
        number?: SortOrder
        complement?: SortOrder
        occupation?: SortOrder
        sexualOrientation?: SortOrder
        civilStatus?: SortOrder
        bloodType?: SortOrder
        genderIdentity?: SortOrder
        password?: SortOrder
        userId?: SortOrder
    };
    export type PatientMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        name?: SortOrder
        cpf?: SortOrder
        cellphone?: SortOrder
        email?: SortOrder
        sex?: SortOrder
        responsible?: SortOrder
        nationality?: SortOrder
        race?: SortOrder
        state?: SortOrder
        city?: SortOrder
        zipcode?: SortOrder
        neighborhood?: SortOrder
        street?: SortOrder
        number?: SortOrder
        complement?: SortOrder
        occupation?: SortOrder
        sexualOrientation?: SortOrder
        civilStatus?: SortOrder
        bloodType?: SortOrder
        genderIdentity?: SortOrder
        password?: SortOrder
        userId?: SortOrder
    };
    export type PatientMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        name?: SortOrder
        cpf?: SortOrder
        cellphone?: SortOrder
        email?: SortOrder
        sex?: SortOrder
        responsible?: SortOrder
        nationality?: SortOrder
        race?: SortOrder
        state?: SortOrder
        city?: SortOrder
        zipcode?: SortOrder
        neighborhood?: SortOrder
        street?: SortOrder
        number?: SortOrder
        complement?: SortOrder
        occupation?: SortOrder
        sexualOrientation?: SortOrder
        civilStatus?: SortOrder
        bloodType?: SortOrder
        genderIdentity?: SortOrder
        password?: SortOrder
        userId?: SortOrder
    };
    export type EnumSexNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
        in?: $Enums.Sex[] | null
        notIn?: $Enums.Sex[] | null
        not?: NestedEnumSexNullableWithAggregatesFilter<$PrismaModel> | $Enums.Sex | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumSexNullableFilter<$PrismaModel>
        _max?: NestedEnumSexNullableFilter<$PrismaModel>
    };
    export type EnumRaceNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.Race | EnumRaceFieldRefInput<$PrismaModel> | null
        in?: $Enums.Race[] | null
        notIn?: $Enums.Race[] | null
        not?: NestedEnumRaceNullableWithAggregatesFilter<$PrismaModel> | $Enums.Race | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumRaceNullableFilter<$PrismaModel>
        _max?: NestedEnumRaceNullableFilter<$PrismaModel>
    };
    export type EnumCivilStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.CivilStatus[] | null
        notIn?: $Enums.CivilStatus[] | null
        not?: NestedEnumCivilStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.CivilStatus | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
        _max?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
    };
    export type EnumBloodTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.BloodType[] | null
        notIn?: $Enums.BloodType[] | null
        not?: NestedEnumBloodTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BloodType | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
        _max?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
    };
    export type EnumGenderIdentityNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.GenderIdentity | EnumGenderIdentityFieldRefInput<$PrismaModel> | null
        in?: $Enums.GenderIdentity[] | null
        notIn?: $Enums.GenderIdentity[] | null
        not?: NestedEnumGenderIdentityNullableWithAggregatesFilter<$PrismaModel> | $Enums.GenderIdentity | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumGenderIdentityNullableFilter<$PrismaModel>
        _max?: NestedEnumGenderIdentityNullableFilter<$PrismaModel>
    };
    export type VaccinationsValuesScalarRelationFilter = {
        is?: VaccinationsValuesWhereInput
        isNot?: VaccinationsValuesWhereInput
    };
    export type VaccinationsCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        vaccinationsValuesId?: SortOrder
    };
    export type VaccinationsMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        vaccinationsValuesId?: SortOrder
    };
    export type VaccinationsMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        vaccinationsValuesId?: SortOrder
    };
    export type VaccinationsValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type VaccinationsValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type VaccinationsValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type PatientNullableScalarRelationFilter = {
        is?: PatientWhereInput | null
        isNot?: PatientWhereInput | null
    };
    export type AllergiesValuesScalarRelationFilter = {
        is?: AllergiesValuesWhereInput
        isNot?: AllergiesValuesWhereInput
    };
    export type AllergiesCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        allergiesValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type AllergiesMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        allergiesValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type AllergiesMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        allergiesValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type AllergiesValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type AllergiesValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type AllergiesValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type MedicationsValuesScalarRelationFilter = {
        is?: MedicationsValuesWhereInput
        isNot?: MedicationsValuesWhereInput
    };
    export type MedicationsCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        medicationsValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type MedicationsMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        medicationsValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type MedicationsMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        medicationsValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type MedicationsValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type MedicationsValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type MedicationsValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type ExamResultsValuesScalarRelationFilter = {
        is?: ExamResultsValuesWhereInput
        isNot?: ExamResultsValuesWhereInput
    };
    export type ExamResultsCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        examResultsValuesId?: SortOrder
        result?: SortOrder
        date?: SortOrder
    };
    export type ExamResultsMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        examResultsValuesId?: SortOrder
        result?: SortOrder
        date?: SortOrder
    };
    export type ExamResultsMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        examResultsValuesId?: SortOrder
        result?: SortOrder
        date?: SortOrder
    };
    export type ExamResultsValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type ExamResultsValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type ExamResultsValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type ComorbiditiesValuesScalarRelationFilter = {
        is?: ComorbiditiesValuesWhereInput
        isNot?: ComorbiditiesValuesWhereInput
    };
    export type ComorbiditiesCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        comorbiditiesValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type ComorbiditiesMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        comorbiditiesValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type ComorbiditiesMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        comorbiditiesValuesId?: SortOrder
        appointmentId?: SortOrder
    };
    export type ComorbiditiesValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type ComorbiditiesValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type ComorbiditiesValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type SurgeriesValuesScalarRelationFilter = {
        is?: SurgeriesValuesWhereInput
        isNot?: SurgeriesValuesWhereInput
    };
    export type SurgeriesCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        surgeriesValuesId?: SortOrder
    };
    export type SurgeriesMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        surgeriesValuesId?: SortOrder
    };
    export type SurgeriesMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        surgeriesValuesId?: SortOrder
    };
    export type SurgeriesValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type SurgeriesValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type SurgeriesValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type HealthPlansValuesScalarRelationFilter = {
        is?: HealthPlansValuesWhereInput
        isNot?: HealthPlansValuesWhereInput
    };
    export type HealthPlansCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        healthPlansValuesId?: SortOrder
    };
    export type HealthPlansMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        healthPlansValuesId?: SortOrder
    };
    export type HealthPlansMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        patientId?: SortOrder
        healthPlansValuesId?: SortOrder
    };
    export type HealthPlansValuesCountOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type HealthPlansValuesMaxOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type HealthPlansValuesMinOrderByAggregateInput = {
        id?: SortOrder
        value?: SortOrder
        createdAt?: SortOrder
    };
    export type DefaultObjectiveInformationCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        text?: SortOrder
    };
    export type DefaultObjectiveInformationMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        text?: SortOrder
    };
    export type DefaultObjectiveInformationMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        text?: SortOrder
    };
    export type EnumEventCalendarTypeNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.EventCalendarType | EnumEventCalendarTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.EventCalendarType[] | null
        notIn?: $Enums.EventCalendarType[] | null
        not?: NestedEnumEventCalendarTypeNullableFilter<$PrismaModel> | $Enums.EventCalendarType | null
    };
    export type EventCalendarCountOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        title?: SortOrder
        description?: SortOrder
        start?: SortOrder
        end?: SortOrder
        allDay?: SortOrder
        eventType?: SortOrder
        rrule?: SortOrder
        appointmentId?: SortOrder
    };
    export type EventCalendarMaxOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        title?: SortOrder
        description?: SortOrder
        start?: SortOrder
        end?: SortOrder
        allDay?: SortOrder
        eventType?: SortOrder
        rrule?: SortOrder
        appointmentId?: SortOrder
    };
    export type EventCalendarMinOrderByAggregateInput = {
        id?: SortOrder
        type?: SortOrder
        createdAt?: SortOrder
        createdById?: SortOrder
        updatedAt?: SortOrder
        updatedById?: SortOrder
        deletedAt?: SortOrder
        deletedById?: SortOrder
        deleted?: SortOrder
        organizationId?: SortOrder
        title?: SortOrder
        description?: SortOrder
        start?: SortOrder
        end?: SortOrder
        allDay?: SortOrder
        eventType?: SortOrder
        rrule?: SortOrder
        appointmentId?: SortOrder
    };
    export type EnumEventCalendarTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.EventCalendarType | EnumEventCalendarTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.EventCalendarType[] | null
        notIn?: $Enums.EventCalendarType[] | null
        not?: NestedEnumEventCalendarTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.EventCalendarType | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumEventCalendarTypeNullableFilter<$PrismaModel>
        _max?: NestedEnumEventCalendarTypeNullableFilter<$PrismaModel>
    };
    export type SessionCreateNestedManyWithoutUserInput = {
        create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
        connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
        createMany?: SessionCreateManyUserInputEnvelope
        connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    };
    export type AccountCreateNestedManyWithoutUserInput = {
        create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
        connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
        createMany?: AccountCreateManyUserInputEnvelope
        connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    };
    export type MemberCreateNestedManyWithoutUserInput = {
        create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
        createMany?: MemberCreateManyUserInputEnvelope
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    };
    export type InvitationCreateNestedManyWithoutUserInput = {
        create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
        createMany?: InvitationCreateManyUserInputEnvelope
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    };
    export type PatientCreateNestedManyWithoutUserInput = {
        create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
        createMany?: PatientCreateManyUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type AssetCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AssetCreateWithoutCreatedByUserInput, AssetUncheckedCreateWithoutCreatedByUserInput> | AssetCreateWithoutCreatedByUserInput[] | AssetUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutCreatedByUserInput | AssetCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AssetCreateManyCreatedByUserInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AssetCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AssetCreateWithoutUpdatedByUserInput, AssetUncheckedCreateWithoutUpdatedByUserInput> | AssetCreateWithoutUpdatedByUserInput[] | AssetUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutUpdatedByUserInput | AssetCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AssetCreateManyUpdatedByUserInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AssetCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AssetCreateWithoutDeletedByUserInput, AssetUncheckedCreateWithoutDeletedByUserInput> | AssetCreateWithoutDeletedByUserInput[] | AssetUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutDeletedByUserInput | AssetCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AssetCreateManyDeletedByUserInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AppointmentCidCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AppointmentCidCreateWithoutCreatedByUserInput, AppointmentCidUncheckedCreateWithoutCreatedByUserInput> | AppointmentCidCreateWithoutCreatedByUserInput[] | AppointmentCidUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCreatedByUserInput | AppointmentCidCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AppointmentCidCreateManyCreatedByUserInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AppointmentCreateWithoutCreatedByUserInput, AppointmentUncheckedCreateWithoutCreatedByUserInput> | AppointmentCreateWithoutCreatedByUserInput[] | AppointmentUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByUserInput | AppointmentCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AppointmentCreateManyCreatedByUserInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<PatientCreateWithoutCreatedByUserInput, PatientUncheckedCreateWithoutCreatedByUserInput> | PatientCreateWithoutCreatedByUserInput[] | PatientUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutCreatedByUserInput | PatientCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: PatientCreateManyCreatedByUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<VaccinationsCreateWithoutCreatedByUserInput, VaccinationsUncheckedCreateWithoutCreatedByUserInput> | VaccinationsCreateWithoutCreatedByUserInput[] | VaccinationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutCreatedByUserInput | VaccinationsCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: VaccinationsCreateManyCreatedByUserInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AllergiesCreateWithoutCreatedByUserInput, AllergiesUncheckedCreateWithoutCreatedByUserInput> | AllergiesCreateWithoutCreatedByUserInput[] | AllergiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutCreatedByUserInput | AllergiesCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AllergiesCreateManyCreatedByUserInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<MedicationsCreateWithoutCreatedByUserInput, MedicationsUncheckedCreateWithoutCreatedByUserInput> | MedicationsCreateWithoutCreatedByUserInput[] | MedicationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutCreatedByUserInput | MedicationsCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: MedicationsCreateManyCreatedByUserInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<ExamResultsCreateWithoutCreatedByUserInput, ExamResultsUncheckedCreateWithoutCreatedByUserInput> | ExamResultsCreateWithoutCreatedByUserInput[] | ExamResultsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutCreatedByUserInput | ExamResultsCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: ExamResultsCreateManyCreatedByUserInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<ComorbiditiesCreateWithoutCreatedByUserInput, ComorbiditiesUncheckedCreateWithoutCreatedByUserInput> | ComorbiditiesCreateWithoutCreatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutCreatedByUserInput | ComorbiditiesCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: ComorbiditiesCreateManyCreatedByUserInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<SurgeriesCreateWithoutCreatedByUserInput, SurgeriesUncheckedCreateWithoutCreatedByUserInput> | SurgeriesCreateWithoutCreatedByUserInput[] | SurgeriesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutCreatedByUserInput | SurgeriesCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: SurgeriesCreateManyCreatedByUserInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<HealthPlansCreateWithoutCreatedByUserInput, HealthPlansUncheckedCreateWithoutCreatedByUserInput> | HealthPlansCreateWithoutCreatedByUserInput[] | HealthPlansUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutCreatedByUserInput | HealthPlansCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: HealthPlansCreateManyCreatedByUserInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput> | DefaultObjectiveInformationCreateWithoutCreatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyCreatedByUserInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<EventCalendarCreateWithoutCreatedByUserInput, EventCalendarUncheckedCreateWithoutCreatedByUserInput> | EventCalendarCreateWithoutCreatedByUserInput[] | EventCalendarUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutCreatedByUserInput | EventCalendarCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: EventCalendarCreateManyCreatedByUserInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type AppointmentCidCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AppointmentCidCreateWithoutUpdatedByUserInput, AppointmentCidUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCidCreateWithoutUpdatedByUserInput[] | AppointmentCidUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutUpdatedByUserInput | AppointmentCidCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AppointmentCidCreateManyUpdatedByUserInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AppointmentCreateWithoutUpdatedByUserInput, AppointmentUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCreateWithoutUpdatedByUserInput[] | AppointmentUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByUserInput | AppointmentCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AppointmentCreateManyUpdatedByUserInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<PatientCreateWithoutUpdatedByUserInput, PatientUncheckedCreateWithoutUpdatedByUserInput> | PatientCreateWithoutUpdatedByUserInput[] | PatientUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByUserInput | PatientCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: PatientCreateManyUpdatedByUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<VaccinationsCreateWithoutUpdatedByUserInput, VaccinationsUncheckedCreateWithoutUpdatedByUserInput> | VaccinationsCreateWithoutUpdatedByUserInput[] | VaccinationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutUpdatedByUserInput | VaccinationsCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: VaccinationsCreateManyUpdatedByUserInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AllergiesCreateWithoutUpdatedByUserInput, AllergiesUncheckedCreateWithoutUpdatedByUserInput> | AllergiesCreateWithoutUpdatedByUserInput[] | AllergiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutUpdatedByUserInput | AllergiesCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AllergiesCreateManyUpdatedByUserInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<MedicationsCreateWithoutUpdatedByUserInput, MedicationsUncheckedCreateWithoutUpdatedByUserInput> | MedicationsCreateWithoutUpdatedByUserInput[] | MedicationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutUpdatedByUserInput | MedicationsCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: MedicationsCreateManyUpdatedByUserInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<ExamResultsCreateWithoutUpdatedByUserInput, ExamResultsUncheckedCreateWithoutUpdatedByUserInput> | ExamResultsCreateWithoutUpdatedByUserInput[] | ExamResultsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutUpdatedByUserInput | ExamResultsCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: ExamResultsCreateManyUpdatedByUserInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<ComorbiditiesCreateWithoutUpdatedByUserInput, ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput> | ComorbiditiesCreateWithoutUpdatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput | ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: ComorbiditiesCreateManyUpdatedByUserInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<SurgeriesCreateWithoutUpdatedByUserInput, SurgeriesUncheckedCreateWithoutUpdatedByUserInput> | SurgeriesCreateWithoutUpdatedByUserInput[] | SurgeriesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutUpdatedByUserInput | SurgeriesCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: SurgeriesCreateManyUpdatedByUserInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<HealthPlansCreateWithoutUpdatedByUserInput, HealthPlansUncheckedCreateWithoutUpdatedByUserInput> | HealthPlansCreateWithoutUpdatedByUserInput[] | HealthPlansUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutUpdatedByUserInput | HealthPlansCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: HealthPlansCreateManyUpdatedByUserInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput> | DefaultObjectiveInformationCreateWithoutUpdatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyUpdatedByUserInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<EventCalendarCreateWithoutUpdatedByUserInput, EventCalendarUncheckedCreateWithoutUpdatedByUserInput> | EventCalendarCreateWithoutUpdatedByUserInput[] | EventCalendarUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutUpdatedByUserInput | EventCalendarCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: EventCalendarCreateManyUpdatedByUserInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type AppointmentCidCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AppointmentCidCreateWithoutDeletedByUserInput, AppointmentCidUncheckedCreateWithoutDeletedByUserInput> | AppointmentCidCreateWithoutDeletedByUserInput[] | AppointmentCidUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutDeletedByUserInput | AppointmentCidCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AppointmentCidCreateManyDeletedByUserInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AppointmentCreateWithoutDeletedByUserInput, AppointmentUncheckedCreateWithoutDeletedByUserInput> | AppointmentCreateWithoutDeletedByUserInput[] | AppointmentUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutDeletedByUserInput | AppointmentCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AppointmentCreateManyDeletedByUserInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<PatientCreateWithoutDeletedByUserInput, PatientUncheckedCreateWithoutDeletedByUserInput> | PatientCreateWithoutDeletedByUserInput[] | PatientUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutDeletedByUserInput | PatientCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: PatientCreateManyDeletedByUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<VaccinationsCreateWithoutDeletedByUserInput, VaccinationsUncheckedCreateWithoutDeletedByUserInput> | VaccinationsCreateWithoutDeletedByUserInput[] | VaccinationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutDeletedByUserInput | VaccinationsCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: VaccinationsCreateManyDeletedByUserInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AllergiesCreateWithoutDeletedByUserInput, AllergiesUncheckedCreateWithoutDeletedByUserInput> | AllergiesCreateWithoutDeletedByUserInput[] | AllergiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutDeletedByUserInput | AllergiesCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AllergiesCreateManyDeletedByUserInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<MedicationsCreateWithoutDeletedByUserInput, MedicationsUncheckedCreateWithoutDeletedByUserInput> | MedicationsCreateWithoutDeletedByUserInput[] | MedicationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutDeletedByUserInput | MedicationsCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: MedicationsCreateManyDeletedByUserInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<ExamResultsCreateWithoutDeletedByUserInput, ExamResultsUncheckedCreateWithoutDeletedByUserInput> | ExamResultsCreateWithoutDeletedByUserInput[] | ExamResultsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutDeletedByUserInput | ExamResultsCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: ExamResultsCreateManyDeletedByUserInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<ComorbiditiesCreateWithoutDeletedByUserInput, ComorbiditiesUncheckedCreateWithoutDeletedByUserInput> | ComorbiditiesCreateWithoutDeletedByUserInput[] | ComorbiditiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutDeletedByUserInput | ComorbiditiesCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: ComorbiditiesCreateManyDeletedByUserInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<SurgeriesCreateWithoutDeletedByUserInput, SurgeriesUncheckedCreateWithoutDeletedByUserInput> | SurgeriesCreateWithoutDeletedByUserInput[] | SurgeriesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutDeletedByUserInput | SurgeriesCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: SurgeriesCreateManyDeletedByUserInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<HealthPlansCreateWithoutDeletedByUserInput, HealthPlansUncheckedCreateWithoutDeletedByUserInput> | HealthPlansCreateWithoutDeletedByUserInput[] | HealthPlansUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutDeletedByUserInput | HealthPlansCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: HealthPlansCreateManyDeletedByUserInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput> | DefaultObjectiveInformationCreateWithoutDeletedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyDeletedByUserInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<EventCalendarCreateWithoutDeletedByUserInput, EventCalendarUncheckedCreateWithoutDeletedByUserInput> | EventCalendarCreateWithoutDeletedByUserInput[] | EventCalendarUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutDeletedByUserInput | EventCalendarCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: EventCalendarCreateManyDeletedByUserInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type SessionUncheckedCreateNestedManyWithoutUserInput = {
        create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
        connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
        createMany?: SessionCreateManyUserInputEnvelope
        connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    };
    export type AccountUncheckedCreateNestedManyWithoutUserInput = {
        create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
        connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
        createMany?: AccountCreateManyUserInputEnvelope
        connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    };
    export type MemberUncheckedCreateNestedManyWithoutUserInput = {
        create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
        createMany?: MemberCreateManyUserInputEnvelope
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    };
    export type InvitationUncheckedCreateNestedManyWithoutUserInput = {
        create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
        createMany?: InvitationCreateManyUserInputEnvelope
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    };
    export type PatientUncheckedCreateNestedManyWithoutUserInput = {
        create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
        createMany?: PatientCreateManyUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type AssetUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AssetCreateWithoutCreatedByUserInput, AssetUncheckedCreateWithoutCreatedByUserInput> | AssetCreateWithoutCreatedByUserInput[] | AssetUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutCreatedByUserInput | AssetCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AssetCreateManyCreatedByUserInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AssetCreateWithoutUpdatedByUserInput, AssetUncheckedCreateWithoutUpdatedByUserInput> | AssetCreateWithoutUpdatedByUserInput[] | AssetUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutUpdatedByUserInput | AssetCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AssetCreateManyUpdatedByUserInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AssetUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AssetCreateWithoutDeletedByUserInput, AssetUncheckedCreateWithoutDeletedByUserInput> | AssetCreateWithoutDeletedByUserInput[] | AssetUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutDeletedByUserInput | AssetCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AssetCreateManyDeletedByUserInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AppointmentCidUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AppointmentCidCreateWithoutCreatedByUserInput, AppointmentCidUncheckedCreateWithoutCreatedByUserInput> | AppointmentCidCreateWithoutCreatedByUserInput[] | AppointmentCidUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCreatedByUserInput | AppointmentCidCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AppointmentCidCreateManyCreatedByUserInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AppointmentCreateWithoutCreatedByUserInput, AppointmentUncheckedCreateWithoutCreatedByUserInput> | AppointmentCreateWithoutCreatedByUserInput[] | AppointmentUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByUserInput | AppointmentCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AppointmentCreateManyCreatedByUserInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<PatientCreateWithoutCreatedByUserInput, PatientUncheckedCreateWithoutCreatedByUserInput> | PatientCreateWithoutCreatedByUserInput[] | PatientUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutCreatedByUserInput | PatientCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: PatientCreateManyCreatedByUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<VaccinationsCreateWithoutCreatedByUserInput, VaccinationsUncheckedCreateWithoutCreatedByUserInput> | VaccinationsCreateWithoutCreatedByUserInput[] | VaccinationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutCreatedByUserInput | VaccinationsCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: VaccinationsCreateManyCreatedByUserInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<AllergiesCreateWithoutCreatedByUserInput, AllergiesUncheckedCreateWithoutCreatedByUserInput> | AllergiesCreateWithoutCreatedByUserInput[] | AllergiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutCreatedByUserInput | AllergiesCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: AllergiesCreateManyCreatedByUserInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<MedicationsCreateWithoutCreatedByUserInput, MedicationsUncheckedCreateWithoutCreatedByUserInput> | MedicationsCreateWithoutCreatedByUserInput[] | MedicationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutCreatedByUserInput | MedicationsCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: MedicationsCreateManyCreatedByUserInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<ExamResultsCreateWithoutCreatedByUserInput, ExamResultsUncheckedCreateWithoutCreatedByUserInput> | ExamResultsCreateWithoutCreatedByUserInput[] | ExamResultsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutCreatedByUserInput | ExamResultsCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: ExamResultsCreateManyCreatedByUserInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<ComorbiditiesCreateWithoutCreatedByUserInput, ComorbiditiesUncheckedCreateWithoutCreatedByUserInput> | ComorbiditiesCreateWithoutCreatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutCreatedByUserInput | ComorbiditiesCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: ComorbiditiesCreateManyCreatedByUserInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<SurgeriesCreateWithoutCreatedByUserInput, SurgeriesUncheckedCreateWithoutCreatedByUserInput> | SurgeriesCreateWithoutCreatedByUserInput[] | SurgeriesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutCreatedByUserInput | SurgeriesCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: SurgeriesCreateManyCreatedByUserInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<HealthPlansCreateWithoutCreatedByUserInput, HealthPlansUncheckedCreateWithoutCreatedByUserInput> | HealthPlansCreateWithoutCreatedByUserInput[] | HealthPlansUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutCreatedByUserInput | HealthPlansCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: HealthPlansCreateManyCreatedByUserInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput> | DefaultObjectiveInformationCreateWithoutCreatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyCreatedByUserInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarUncheckedCreateNestedManyWithoutCreatedByUserInput = {
        create?: XOR<EventCalendarCreateWithoutCreatedByUserInput, EventCalendarUncheckedCreateWithoutCreatedByUserInput> | EventCalendarCreateWithoutCreatedByUserInput[] | EventCalendarUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutCreatedByUserInput | EventCalendarCreateOrConnectWithoutCreatedByUserInput[]
        createMany?: EventCalendarCreateManyCreatedByUserInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type AppointmentCidUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AppointmentCidCreateWithoutUpdatedByUserInput, AppointmentCidUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCidCreateWithoutUpdatedByUserInput[] | AppointmentCidUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutUpdatedByUserInput | AppointmentCidCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AppointmentCidCreateManyUpdatedByUserInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AppointmentCreateWithoutUpdatedByUserInput, AppointmentUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCreateWithoutUpdatedByUserInput[] | AppointmentUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByUserInput | AppointmentCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AppointmentCreateManyUpdatedByUserInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<PatientCreateWithoutUpdatedByUserInput, PatientUncheckedCreateWithoutUpdatedByUserInput> | PatientCreateWithoutUpdatedByUserInput[] | PatientUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByUserInput | PatientCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: PatientCreateManyUpdatedByUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<VaccinationsCreateWithoutUpdatedByUserInput, VaccinationsUncheckedCreateWithoutUpdatedByUserInput> | VaccinationsCreateWithoutUpdatedByUserInput[] | VaccinationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutUpdatedByUserInput | VaccinationsCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: VaccinationsCreateManyUpdatedByUserInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<AllergiesCreateWithoutUpdatedByUserInput, AllergiesUncheckedCreateWithoutUpdatedByUserInput> | AllergiesCreateWithoutUpdatedByUserInput[] | AllergiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutUpdatedByUserInput | AllergiesCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: AllergiesCreateManyUpdatedByUserInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<MedicationsCreateWithoutUpdatedByUserInput, MedicationsUncheckedCreateWithoutUpdatedByUserInput> | MedicationsCreateWithoutUpdatedByUserInput[] | MedicationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutUpdatedByUserInput | MedicationsCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: MedicationsCreateManyUpdatedByUserInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<ExamResultsCreateWithoutUpdatedByUserInput, ExamResultsUncheckedCreateWithoutUpdatedByUserInput> | ExamResultsCreateWithoutUpdatedByUserInput[] | ExamResultsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutUpdatedByUserInput | ExamResultsCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: ExamResultsCreateManyUpdatedByUserInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<ComorbiditiesCreateWithoutUpdatedByUserInput, ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput> | ComorbiditiesCreateWithoutUpdatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput | ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: ComorbiditiesCreateManyUpdatedByUserInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<SurgeriesCreateWithoutUpdatedByUserInput, SurgeriesUncheckedCreateWithoutUpdatedByUserInput> | SurgeriesCreateWithoutUpdatedByUserInput[] | SurgeriesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutUpdatedByUserInput | SurgeriesCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: SurgeriesCreateManyUpdatedByUserInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<HealthPlansCreateWithoutUpdatedByUserInput, HealthPlansUncheckedCreateWithoutUpdatedByUserInput> | HealthPlansCreateWithoutUpdatedByUserInput[] | HealthPlansUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutUpdatedByUserInput | HealthPlansCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: HealthPlansCreateManyUpdatedByUserInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput> | DefaultObjectiveInformationCreateWithoutUpdatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyUpdatedByUserInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
        create?: XOR<EventCalendarCreateWithoutUpdatedByUserInput, EventCalendarUncheckedCreateWithoutUpdatedByUserInput> | EventCalendarCreateWithoutUpdatedByUserInput[] | EventCalendarUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutUpdatedByUserInput | EventCalendarCreateOrConnectWithoutUpdatedByUserInput[]
        createMany?: EventCalendarCreateManyUpdatedByUserInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type AppointmentCidUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AppointmentCidCreateWithoutDeletedByUserInput, AppointmentCidUncheckedCreateWithoutDeletedByUserInput> | AppointmentCidCreateWithoutDeletedByUserInput[] | AppointmentCidUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutDeletedByUserInput | AppointmentCidCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AppointmentCidCreateManyDeletedByUserInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AppointmentCreateWithoutDeletedByUserInput, AppointmentUncheckedCreateWithoutDeletedByUserInput> | AppointmentCreateWithoutDeletedByUserInput[] | AppointmentUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutDeletedByUserInput | AppointmentCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AppointmentCreateManyDeletedByUserInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<PatientCreateWithoutDeletedByUserInput, PatientUncheckedCreateWithoutDeletedByUserInput> | PatientCreateWithoutDeletedByUserInput[] | PatientUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutDeletedByUserInput | PatientCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: PatientCreateManyDeletedByUserInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<VaccinationsCreateWithoutDeletedByUserInput, VaccinationsUncheckedCreateWithoutDeletedByUserInput> | VaccinationsCreateWithoutDeletedByUserInput[] | VaccinationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutDeletedByUserInput | VaccinationsCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: VaccinationsCreateManyDeletedByUserInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<AllergiesCreateWithoutDeletedByUserInput, AllergiesUncheckedCreateWithoutDeletedByUserInput> | AllergiesCreateWithoutDeletedByUserInput[] | AllergiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutDeletedByUserInput | AllergiesCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: AllergiesCreateManyDeletedByUserInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<MedicationsCreateWithoutDeletedByUserInput, MedicationsUncheckedCreateWithoutDeletedByUserInput> | MedicationsCreateWithoutDeletedByUserInput[] | MedicationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutDeletedByUserInput | MedicationsCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: MedicationsCreateManyDeletedByUserInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<ExamResultsCreateWithoutDeletedByUserInput, ExamResultsUncheckedCreateWithoutDeletedByUserInput> | ExamResultsCreateWithoutDeletedByUserInput[] | ExamResultsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutDeletedByUserInput | ExamResultsCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: ExamResultsCreateManyDeletedByUserInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<ComorbiditiesCreateWithoutDeletedByUserInput, ComorbiditiesUncheckedCreateWithoutDeletedByUserInput> | ComorbiditiesCreateWithoutDeletedByUserInput[] | ComorbiditiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutDeletedByUserInput | ComorbiditiesCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: ComorbiditiesCreateManyDeletedByUserInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<SurgeriesCreateWithoutDeletedByUserInput, SurgeriesUncheckedCreateWithoutDeletedByUserInput> | SurgeriesCreateWithoutDeletedByUserInput[] | SurgeriesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutDeletedByUserInput | SurgeriesCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: SurgeriesCreateManyDeletedByUserInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<HealthPlansCreateWithoutDeletedByUserInput, HealthPlansUncheckedCreateWithoutDeletedByUserInput> | HealthPlansCreateWithoutDeletedByUserInput[] | HealthPlansUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutDeletedByUserInput | HealthPlansCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: HealthPlansCreateManyDeletedByUserInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput> | DefaultObjectiveInformationCreateWithoutDeletedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyDeletedByUserInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarUncheckedCreateNestedManyWithoutDeletedByUserInput = {
        create?: XOR<EventCalendarCreateWithoutDeletedByUserInput, EventCalendarUncheckedCreateWithoutDeletedByUserInput> | EventCalendarCreateWithoutDeletedByUserInput[] | EventCalendarUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutDeletedByUserInput | EventCalendarCreateOrConnectWithoutDeletedByUserInput[]
        createMany?: EventCalendarCreateManyDeletedByUserInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type StringFieldUpdateOperationsInput = {
        set?: string
    };
    export type BoolFieldUpdateOperationsInput = {
        set?: boolean
    };
    export type NullableStringFieldUpdateOperationsInput = {
        set?: string | null
    };
    export type DateTimeFieldUpdateOperationsInput = {
        set?: Date | string
    };
    export type NullableEnumUserRoleFieldUpdateOperationsInput = {
        set?: $Enums.UserRole | null
    };
    export type NullableBoolFieldUpdateOperationsInput = {
        set?: boolean | null
    };
    export type NullableDateTimeFieldUpdateOperationsInput = {
        set?: Date | string | null
    };
    export type SessionUpdateManyWithoutUserNestedInput = {
        create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
        connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
        upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: SessionCreateManyUserInputEnvelope
        set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
    };
    export type AccountUpdateManyWithoutUserNestedInput = {
        create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
        connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
        upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: AccountCreateManyUserInputEnvelope
        set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
    };
    export type MemberUpdateManyWithoutUserNestedInput = {
        create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
        upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: MemberCreateManyUserInputEnvelope
        set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
    };
    export type InvitationUpdateManyWithoutUserNestedInput = {
        create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
        upsert?: InvitationUpsertWithWhereUniqueWithoutUserInput | InvitationUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: InvitationCreateManyUserInputEnvelope
        set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        update?: InvitationUpdateWithWhereUniqueWithoutUserInput | InvitationUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: InvitationUpdateManyWithWhereWithoutUserInput | InvitationUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    };
    export type PatientUpdateManyWithoutUserNestedInput = {
        create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: PatientCreateManyUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type AssetUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AssetCreateWithoutCreatedByUserInput, AssetUncheckedCreateWithoutCreatedByUserInput> | AssetCreateWithoutCreatedByUserInput[] | AssetUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutCreatedByUserInput | AssetCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutCreatedByUserInput | AssetUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AssetCreateManyCreatedByUserInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutCreatedByUserInput | AssetUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutCreatedByUserInput | AssetUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AssetUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AssetCreateWithoutUpdatedByUserInput, AssetUncheckedCreateWithoutUpdatedByUserInput> | AssetCreateWithoutUpdatedByUserInput[] | AssetUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutUpdatedByUserInput | AssetCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutUpdatedByUserInput | AssetUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AssetCreateManyUpdatedByUserInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutUpdatedByUserInput | AssetUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutUpdatedByUserInput | AssetUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AssetUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AssetCreateWithoutDeletedByUserInput, AssetUncheckedCreateWithoutDeletedByUserInput> | AssetCreateWithoutDeletedByUserInput[] | AssetUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutDeletedByUserInput | AssetCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutDeletedByUserInput | AssetUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AssetCreateManyDeletedByUserInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutDeletedByUserInput | AssetUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutDeletedByUserInput | AssetUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AppointmentCidUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutCreatedByUserInput, AppointmentCidUncheckedCreateWithoutCreatedByUserInput> | AppointmentCidCreateWithoutCreatedByUserInput[] | AppointmentCidUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCreatedByUserInput | AppointmentCidCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutCreatedByUserInput | AppointmentCidUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AppointmentCidCreateManyCreatedByUserInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutCreatedByUserInput | AppointmentCidUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutCreatedByUserInput | AppointmentCidUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AppointmentCreateWithoutCreatedByUserInput, AppointmentUncheckedCreateWithoutCreatedByUserInput> | AppointmentCreateWithoutCreatedByUserInput[] | AppointmentUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByUserInput | AppointmentCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatedByUserInput | AppointmentUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AppointmentCreateManyCreatedByUserInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutCreatedByUserInput | AppointmentUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutCreatedByUserInput | AppointmentUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<PatientCreateWithoutCreatedByUserInput, PatientUncheckedCreateWithoutCreatedByUserInput> | PatientCreateWithoutCreatedByUserInput[] | PatientUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutCreatedByUserInput | PatientCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByUserInput | PatientUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: PatientCreateManyCreatedByUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutCreatedByUserInput | PatientUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutCreatedByUserInput | PatientUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<VaccinationsCreateWithoutCreatedByUserInput, VaccinationsUncheckedCreateWithoutCreatedByUserInput> | VaccinationsCreateWithoutCreatedByUserInput[] | VaccinationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutCreatedByUserInput | VaccinationsCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutCreatedByUserInput | VaccinationsUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: VaccinationsCreateManyCreatedByUserInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutCreatedByUserInput | VaccinationsUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutCreatedByUserInput | VaccinationsUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AllergiesCreateWithoutCreatedByUserInput, AllergiesUncheckedCreateWithoutCreatedByUserInput> | AllergiesCreateWithoutCreatedByUserInput[] | AllergiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutCreatedByUserInput | AllergiesCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutCreatedByUserInput | AllergiesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AllergiesCreateManyCreatedByUserInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutCreatedByUserInput | AllergiesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutCreatedByUserInput | AllergiesUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<MedicationsCreateWithoutCreatedByUserInput, MedicationsUncheckedCreateWithoutCreatedByUserInput> | MedicationsCreateWithoutCreatedByUserInput[] | MedicationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutCreatedByUserInput | MedicationsCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutCreatedByUserInput | MedicationsUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: MedicationsCreateManyCreatedByUserInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutCreatedByUserInput | MedicationsUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutCreatedByUserInput | MedicationsUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<ExamResultsCreateWithoutCreatedByUserInput, ExamResultsUncheckedCreateWithoutCreatedByUserInput> | ExamResultsCreateWithoutCreatedByUserInput[] | ExamResultsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutCreatedByUserInput | ExamResultsCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutCreatedByUserInput | ExamResultsUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: ExamResultsCreateManyCreatedByUserInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutCreatedByUserInput | ExamResultsUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutCreatedByUserInput | ExamResultsUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutCreatedByUserInput, ComorbiditiesUncheckedCreateWithoutCreatedByUserInput> | ComorbiditiesCreateWithoutCreatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutCreatedByUserInput | ComorbiditiesCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutCreatedByUserInput | ComorbiditiesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: ComorbiditiesCreateManyCreatedByUserInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutCreatedByUserInput | ComorbiditiesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutCreatedByUserInput | ComorbiditiesUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<SurgeriesCreateWithoutCreatedByUserInput, SurgeriesUncheckedCreateWithoutCreatedByUserInput> | SurgeriesCreateWithoutCreatedByUserInput[] | SurgeriesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutCreatedByUserInput | SurgeriesCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutCreatedByUserInput | SurgeriesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: SurgeriesCreateManyCreatedByUserInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutCreatedByUserInput | SurgeriesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutCreatedByUserInput | SurgeriesUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<HealthPlansCreateWithoutCreatedByUserInput, HealthPlansUncheckedCreateWithoutCreatedByUserInput> | HealthPlansCreateWithoutCreatedByUserInput[] | HealthPlansUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutCreatedByUserInput | HealthPlansCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutCreatedByUserInput | HealthPlansUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: HealthPlansCreateManyCreatedByUserInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutCreatedByUserInput | HealthPlansUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutCreatedByUserInput | HealthPlansUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput> | DefaultObjectiveInformationCreateWithoutCreatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutCreatedByUserInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyCreatedByUserInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutCreatedByUserInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutCreatedByUserInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<EventCalendarCreateWithoutCreatedByUserInput, EventCalendarUncheckedCreateWithoutCreatedByUserInput> | EventCalendarCreateWithoutCreatedByUserInput[] | EventCalendarUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutCreatedByUserInput | EventCalendarCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutCreatedByUserInput | EventCalendarUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: EventCalendarCreateManyCreatedByUserInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutCreatedByUserInput | EventCalendarUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutCreatedByUserInput | EventCalendarUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type AppointmentCidUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutUpdatedByUserInput, AppointmentCidUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCidCreateWithoutUpdatedByUserInput[] | AppointmentCidUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutUpdatedByUserInput | AppointmentCidCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutUpdatedByUserInput | AppointmentCidUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AppointmentCidCreateManyUpdatedByUserInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutUpdatedByUserInput | AppointmentCidUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutUpdatedByUserInput | AppointmentCidUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AppointmentCreateWithoutUpdatedByUserInput, AppointmentUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCreateWithoutUpdatedByUserInput[] | AppointmentUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByUserInput | AppointmentCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutUpdatedByUserInput | AppointmentUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AppointmentCreateManyUpdatedByUserInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutUpdatedByUserInput | AppointmentUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutUpdatedByUserInput | AppointmentUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<PatientCreateWithoutUpdatedByUserInput, PatientUncheckedCreateWithoutUpdatedByUserInput> | PatientCreateWithoutUpdatedByUserInput[] | PatientUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByUserInput | PatientCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutUpdatedByUserInput | PatientUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: PatientCreateManyUpdatedByUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutUpdatedByUserInput | PatientUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutUpdatedByUserInput | PatientUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<VaccinationsCreateWithoutUpdatedByUserInput, VaccinationsUncheckedCreateWithoutUpdatedByUserInput> | VaccinationsCreateWithoutUpdatedByUserInput[] | VaccinationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutUpdatedByUserInput | VaccinationsCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutUpdatedByUserInput | VaccinationsUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: VaccinationsCreateManyUpdatedByUserInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutUpdatedByUserInput | VaccinationsUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutUpdatedByUserInput | VaccinationsUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AllergiesCreateWithoutUpdatedByUserInput, AllergiesUncheckedCreateWithoutUpdatedByUserInput> | AllergiesCreateWithoutUpdatedByUserInput[] | AllergiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutUpdatedByUserInput | AllergiesCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutUpdatedByUserInput | AllergiesUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AllergiesCreateManyUpdatedByUserInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutUpdatedByUserInput | AllergiesUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutUpdatedByUserInput | AllergiesUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<MedicationsCreateWithoutUpdatedByUserInput, MedicationsUncheckedCreateWithoutUpdatedByUserInput> | MedicationsCreateWithoutUpdatedByUserInput[] | MedicationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutUpdatedByUserInput | MedicationsCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutUpdatedByUserInput | MedicationsUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: MedicationsCreateManyUpdatedByUserInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutUpdatedByUserInput | MedicationsUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutUpdatedByUserInput | MedicationsUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<ExamResultsCreateWithoutUpdatedByUserInput, ExamResultsUncheckedCreateWithoutUpdatedByUserInput> | ExamResultsCreateWithoutUpdatedByUserInput[] | ExamResultsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutUpdatedByUserInput | ExamResultsCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutUpdatedByUserInput | ExamResultsUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: ExamResultsCreateManyUpdatedByUserInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutUpdatedByUserInput | ExamResultsUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutUpdatedByUserInput | ExamResultsUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutUpdatedByUserInput, ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput> | ComorbiditiesCreateWithoutUpdatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput | ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutUpdatedByUserInput | ComorbiditiesUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: ComorbiditiesCreateManyUpdatedByUserInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutUpdatedByUserInput | ComorbiditiesUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutUpdatedByUserInput | ComorbiditiesUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<SurgeriesCreateWithoutUpdatedByUserInput, SurgeriesUncheckedCreateWithoutUpdatedByUserInput> | SurgeriesCreateWithoutUpdatedByUserInput[] | SurgeriesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutUpdatedByUserInput | SurgeriesCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutUpdatedByUserInput | SurgeriesUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: SurgeriesCreateManyUpdatedByUserInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutUpdatedByUserInput | SurgeriesUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutUpdatedByUserInput | SurgeriesUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<HealthPlansCreateWithoutUpdatedByUserInput, HealthPlansUncheckedCreateWithoutUpdatedByUserInput> | HealthPlansCreateWithoutUpdatedByUserInput[] | HealthPlansUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutUpdatedByUserInput | HealthPlansCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutUpdatedByUserInput | HealthPlansUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: HealthPlansCreateManyUpdatedByUserInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutUpdatedByUserInput | HealthPlansUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutUpdatedByUserInput | HealthPlansUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput> | DefaultObjectiveInformationCreateWithoutUpdatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutUpdatedByUserInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyUpdatedByUserInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutUpdatedByUserInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutUpdatedByUserInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<EventCalendarCreateWithoutUpdatedByUserInput, EventCalendarUncheckedCreateWithoutUpdatedByUserInput> | EventCalendarCreateWithoutUpdatedByUserInput[] | EventCalendarUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutUpdatedByUserInput | EventCalendarCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutUpdatedByUserInput | EventCalendarUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: EventCalendarCreateManyUpdatedByUserInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutUpdatedByUserInput | EventCalendarUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutUpdatedByUserInput | EventCalendarUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type AppointmentCidUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutDeletedByUserInput, AppointmentCidUncheckedCreateWithoutDeletedByUserInput> | AppointmentCidCreateWithoutDeletedByUserInput[] | AppointmentCidUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutDeletedByUserInput | AppointmentCidCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutDeletedByUserInput | AppointmentCidUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AppointmentCidCreateManyDeletedByUserInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutDeletedByUserInput | AppointmentCidUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutDeletedByUserInput | AppointmentCidUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AppointmentCreateWithoutDeletedByUserInput, AppointmentUncheckedCreateWithoutDeletedByUserInput> | AppointmentCreateWithoutDeletedByUserInput[] | AppointmentUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutDeletedByUserInput | AppointmentCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutDeletedByUserInput | AppointmentUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AppointmentCreateManyDeletedByUserInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutDeletedByUserInput | AppointmentUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutDeletedByUserInput | AppointmentUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<PatientCreateWithoutDeletedByUserInput, PatientUncheckedCreateWithoutDeletedByUserInput> | PatientCreateWithoutDeletedByUserInput[] | PatientUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutDeletedByUserInput | PatientCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutDeletedByUserInput | PatientUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: PatientCreateManyDeletedByUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutDeletedByUserInput | PatientUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutDeletedByUserInput | PatientUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<VaccinationsCreateWithoutDeletedByUserInput, VaccinationsUncheckedCreateWithoutDeletedByUserInput> | VaccinationsCreateWithoutDeletedByUserInput[] | VaccinationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutDeletedByUserInput | VaccinationsCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutDeletedByUserInput | VaccinationsUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: VaccinationsCreateManyDeletedByUserInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutDeletedByUserInput | VaccinationsUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutDeletedByUserInput | VaccinationsUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AllergiesCreateWithoutDeletedByUserInput, AllergiesUncheckedCreateWithoutDeletedByUserInput> | AllergiesCreateWithoutDeletedByUserInput[] | AllergiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutDeletedByUserInput | AllergiesCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutDeletedByUserInput | AllergiesUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AllergiesCreateManyDeletedByUserInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutDeletedByUserInput | AllergiesUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutDeletedByUserInput | AllergiesUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<MedicationsCreateWithoutDeletedByUserInput, MedicationsUncheckedCreateWithoutDeletedByUserInput> | MedicationsCreateWithoutDeletedByUserInput[] | MedicationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutDeletedByUserInput | MedicationsCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutDeletedByUserInput | MedicationsUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: MedicationsCreateManyDeletedByUserInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutDeletedByUserInput | MedicationsUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutDeletedByUserInput | MedicationsUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<ExamResultsCreateWithoutDeletedByUserInput, ExamResultsUncheckedCreateWithoutDeletedByUserInput> | ExamResultsCreateWithoutDeletedByUserInput[] | ExamResultsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutDeletedByUserInput | ExamResultsCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutDeletedByUserInput | ExamResultsUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: ExamResultsCreateManyDeletedByUserInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutDeletedByUserInput | ExamResultsUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutDeletedByUserInput | ExamResultsUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutDeletedByUserInput, ComorbiditiesUncheckedCreateWithoutDeletedByUserInput> | ComorbiditiesCreateWithoutDeletedByUserInput[] | ComorbiditiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutDeletedByUserInput | ComorbiditiesCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutDeletedByUserInput | ComorbiditiesUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: ComorbiditiesCreateManyDeletedByUserInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutDeletedByUserInput | ComorbiditiesUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutDeletedByUserInput | ComorbiditiesUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<SurgeriesCreateWithoutDeletedByUserInput, SurgeriesUncheckedCreateWithoutDeletedByUserInput> | SurgeriesCreateWithoutDeletedByUserInput[] | SurgeriesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutDeletedByUserInput | SurgeriesCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInput | SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: SurgeriesCreateManyDeletedByUserInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInput | SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutDeletedByUserInput | SurgeriesUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<HealthPlansCreateWithoutDeletedByUserInput, HealthPlansUncheckedCreateWithoutDeletedByUserInput> | HealthPlansCreateWithoutDeletedByUserInput[] | HealthPlansUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutDeletedByUserInput | HealthPlansCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutDeletedByUserInput | HealthPlansUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: HealthPlansCreateManyDeletedByUserInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutDeletedByUserInput | HealthPlansUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutDeletedByUserInput | HealthPlansUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput> | DefaultObjectiveInformationCreateWithoutDeletedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutDeletedByUserInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyDeletedByUserInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutDeletedByUserInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutDeletedByUserInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<EventCalendarCreateWithoutDeletedByUserInput, EventCalendarUncheckedCreateWithoutDeletedByUserInput> | EventCalendarCreateWithoutDeletedByUserInput[] | EventCalendarUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutDeletedByUserInput | EventCalendarCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutDeletedByUserInput | EventCalendarUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: EventCalendarCreateManyDeletedByUserInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutDeletedByUserInput | EventCalendarUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutDeletedByUserInput | EventCalendarUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
        create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
        connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
        upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: SessionCreateManyUserInputEnvelope
        set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
        update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
    };
    export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
        create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
        connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
        upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: AccountCreateManyUserInputEnvelope
        set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
        update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
    };
    export type MemberUncheckedUpdateManyWithoutUserNestedInput = {
        create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
        upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: MemberCreateManyUserInputEnvelope
        set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
    };
    export type InvitationUncheckedUpdateManyWithoutUserNestedInput = {
        create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
        upsert?: InvitationUpsertWithWhereUniqueWithoutUserInput | InvitationUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: InvitationCreateManyUserInputEnvelope
        set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        update?: InvitationUpdateWithWhereUniqueWithoutUserInput | InvitationUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: InvitationUpdateManyWithWhereWithoutUserInput | InvitationUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    };
    export type PatientUncheckedUpdateManyWithoutUserNestedInput = {
        create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
        createMany?: PatientCreateManyUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AssetCreateWithoutCreatedByUserInput, AssetUncheckedCreateWithoutCreatedByUserInput> | AssetCreateWithoutCreatedByUserInput[] | AssetUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutCreatedByUserInput | AssetCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutCreatedByUserInput | AssetUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AssetCreateManyCreatedByUserInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutCreatedByUserInput | AssetUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutCreatedByUserInput | AssetUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AssetCreateWithoutUpdatedByUserInput, AssetUncheckedCreateWithoutUpdatedByUserInput> | AssetCreateWithoutUpdatedByUserInput[] | AssetUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutUpdatedByUserInput | AssetCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutUpdatedByUserInput | AssetUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AssetCreateManyUpdatedByUserInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutUpdatedByUserInput | AssetUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutUpdatedByUserInput | AssetUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AssetCreateWithoutDeletedByUserInput, AssetUncheckedCreateWithoutDeletedByUserInput> | AssetCreateWithoutDeletedByUserInput[] | AssetUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutDeletedByUserInput | AssetCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutDeletedByUserInput | AssetUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AssetCreateManyDeletedByUserInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutDeletedByUserInput | AssetUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutDeletedByUserInput | AssetUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AppointmentCidUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutCreatedByUserInput, AppointmentCidUncheckedCreateWithoutCreatedByUserInput> | AppointmentCidCreateWithoutCreatedByUserInput[] | AppointmentCidUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCreatedByUserInput | AppointmentCidCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutCreatedByUserInput | AppointmentCidUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AppointmentCidCreateManyCreatedByUserInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutCreatedByUserInput | AppointmentCidUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutCreatedByUserInput | AppointmentCidUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AppointmentCreateWithoutCreatedByUserInput, AppointmentUncheckedCreateWithoutCreatedByUserInput> | AppointmentCreateWithoutCreatedByUserInput[] | AppointmentUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByUserInput | AppointmentCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatedByUserInput | AppointmentUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AppointmentCreateManyCreatedByUserInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutCreatedByUserInput | AppointmentUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutCreatedByUserInput | AppointmentUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<PatientCreateWithoutCreatedByUserInput, PatientUncheckedCreateWithoutCreatedByUserInput> | PatientCreateWithoutCreatedByUserInput[] | PatientUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutCreatedByUserInput | PatientCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByUserInput | PatientUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: PatientCreateManyCreatedByUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutCreatedByUserInput | PatientUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutCreatedByUserInput | PatientUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<VaccinationsCreateWithoutCreatedByUserInput, VaccinationsUncheckedCreateWithoutCreatedByUserInput> | VaccinationsCreateWithoutCreatedByUserInput[] | VaccinationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutCreatedByUserInput | VaccinationsCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutCreatedByUserInput | VaccinationsUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: VaccinationsCreateManyCreatedByUserInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutCreatedByUserInput | VaccinationsUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutCreatedByUserInput | VaccinationsUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<AllergiesCreateWithoutCreatedByUserInput, AllergiesUncheckedCreateWithoutCreatedByUserInput> | AllergiesCreateWithoutCreatedByUserInput[] | AllergiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutCreatedByUserInput | AllergiesCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutCreatedByUserInput | AllergiesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: AllergiesCreateManyCreatedByUserInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutCreatedByUserInput | AllergiesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutCreatedByUserInput | AllergiesUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<MedicationsCreateWithoutCreatedByUserInput, MedicationsUncheckedCreateWithoutCreatedByUserInput> | MedicationsCreateWithoutCreatedByUserInput[] | MedicationsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutCreatedByUserInput | MedicationsCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutCreatedByUserInput | MedicationsUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: MedicationsCreateManyCreatedByUserInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutCreatedByUserInput | MedicationsUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutCreatedByUserInput | MedicationsUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<ExamResultsCreateWithoutCreatedByUserInput, ExamResultsUncheckedCreateWithoutCreatedByUserInput> | ExamResultsCreateWithoutCreatedByUserInput[] | ExamResultsUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutCreatedByUserInput | ExamResultsCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutCreatedByUserInput | ExamResultsUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: ExamResultsCreateManyCreatedByUserInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutCreatedByUserInput | ExamResultsUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutCreatedByUserInput | ExamResultsUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutCreatedByUserInput, ComorbiditiesUncheckedCreateWithoutCreatedByUserInput> | ComorbiditiesCreateWithoutCreatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutCreatedByUserInput | ComorbiditiesCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutCreatedByUserInput | ComorbiditiesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: ComorbiditiesCreateManyCreatedByUserInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutCreatedByUserInput | ComorbiditiesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutCreatedByUserInput | ComorbiditiesUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<SurgeriesCreateWithoutCreatedByUserInput, SurgeriesUncheckedCreateWithoutCreatedByUserInput> | SurgeriesCreateWithoutCreatedByUserInput[] | SurgeriesUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutCreatedByUserInput | SurgeriesCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutCreatedByUserInput | SurgeriesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: SurgeriesCreateManyCreatedByUserInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutCreatedByUserInput | SurgeriesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutCreatedByUserInput | SurgeriesUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<HealthPlansCreateWithoutCreatedByUserInput, HealthPlansUncheckedCreateWithoutCreatedByUserInput> | HealthPlansCreateWithoutCreatedByUserInput[] | HealthPlansUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutCreatedByUserInput | HealthPlansCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutCreatedByUserInput | HealthPlansUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: HealthPlansCreateManyCreatedByUserInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutCreatedByUserInput | HealthPlansUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutCreatedByUserInput | HealthPlansUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput> | DefaultObjectiveInformationCreateWithoutCreatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutCreatedByUserInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyCreatedByUserInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutCreatedByUserInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutCreatedByUserInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
        create?: XOR<EventCalendarCreateWithoutCreatedByUserInput, EventCalendarUncheckedCreateWithoutCreatedByUserInput> | EventCalendarCreateWithoutCreatedByUserInput[] | EventCalendarUncheckedCreateWithoutCreatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutCreatedByUserInput | EventCalendarCreateOrConnectWithoutCreatedByUserInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutCreatedByUserInput | EventCalendarUpsertWithWhereUniqueWithoutCreatedByUserInput[]
        createMany?: EventCalendarCreateManyCreatedByUserInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutCreatedByUserInput | EventCalendarUpdateWithWhereUniqueWithoutCreatedByUserInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutCreatedByUserInput | EventCalendarUpdateManyWithWhereWithoutCreatedByUserInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type AppointmentCidUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutUpdatedByUserInput, AppointmentCidUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCidCreateWithoutUpdatedByUserInput[] | AppointmentCidUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutUpdatedByUserInput | AppointmentCidCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutUpdatedByUserInput | AppointmentCidUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AppointmentCidCreateManyUpdatedByUserInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutUpdatedByUserInput | AppointmentCidUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutUpdatedByUserInput | AppointmentCidUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AppointmentCreateWithoutUpdatedByUserInput, AppointmentUncheckedCreateWithoutUpdatedByUserInput> | AppointmentCreateWithoutUpdatedByUserInput[] | AppointmentUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByUserInput | AppointmentCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutUpdatedByUserInput | AppointmentUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AppointmentCreateManyUpdatedByUserInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutUpdatedByUserInput | AppointmentUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutUpdatedByUserInput | AppointmentUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<PatientCreateWithoutUpdatedByUserInput, PatientUncheckedCreateWithoutUpdatedByUserInput> | PatientCreateWithoutUpdatedByUserInput[] | PatientUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByUserInput | PatientCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutUpdatedByUserInput | PatientUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: PatientCreateManyUpdatedByUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutUpdatedByUserInput | PatientUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutUpdatedByUserInput | PatientUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<VaccinationsCreateWithoutUpdatedByUserInput, VaccinationsUncheckedCreateWithoutUpdatedByUserInput> | VaccinationsCreateWithoutUpdatedByUserInput[] | VaccinationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutUpdatedByUserInput | VaccinationsCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutUpdatedByUserInput | VaccinationsUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: VaccinationsCreateManyUpdatedByUserInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutUpdatedByUserInput | VaccinationsUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutUpdatedByUserInput | VaccinationsUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<AllergiesCreateWithoutUpdatedByUserInput, AllergiesUncheckedCreateWithoutUpdatedByUserInput> | AllergiesCreateWithoutUpdatedByUserInput[] | AllergiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutUpdatedByUserInput | AllergiesCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutUpdatedByUserInput | AllergiesUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: AllergiesCreateManyUpdatedByUserInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutUpdatedByUserInput | AllergiesUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutUpdatedByUserInput | AllergiesUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<MedicationsCreateWithoutUpdatedByUserInput, MedicationsUncheckedCreateWithoutUpdatedByUserInput> | MedicationsCreateWithoutUpdatedByUserInput[] | MedicationsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutUpdatedByUserInput | MedicationsCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutUpdatedByUserInput | MedicationsUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: MedicationsCreateManyUpdatedByUserInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutUpdatedByUserInput | MedicationsUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutUpdatedByUserInput | MedicationsUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<ExamResultsCreateWithoutUpdatedByUserInput, ExamResultsUncheckedCreateWithoutUpdatedByUserInput> | ExamResultsCreateWithoutUpdatedByUserInput[] | ExamResultsUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutUpdatedByUserInput | ExamResultsCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutUpdatedByUserInput | ExamResultsUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: ExamResultsCreateManyUpdatedByUserInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutUpdatedByUserInput | ExamResultsUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutUpdatedByUserInput | ExamResultsUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutUpdatedByUserInput, ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput> | ComorbiditiesCreateWithoutUpdatedByUserInput[] | ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput | ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutUpdatedByUserInput | ComorbiditiesUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: ComorbiditiesCreateManyUpdatedByUserInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutUpdatedByUserInput | ComorbiditiesUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutUpdatedByUserInput | ComorbiditiesUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<SurgeriesCreateWithoutUpdatedByUserInput, SurgeriesUncheckedCreateWithoutUpdatedByUserInput> | SurgeriesCreateWithoutUpdatedByUserInput[] | SurgeriesUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutUpdatedByUserInput | SurgeriesCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutUpdatedByUserInput | SurgeriesUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: SurgeriesCreateManyUpdatedByUserInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutUpdatedByUserInput | SurgeriesUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutUpdatedByUserInput | SurgeriesUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<HealthPlansCreateWithoutUpdatedByUserInput, HealthPlansUncheckedCreateWithoutUpdatedByUserInput> | HealthPlansCreateWithoutUpdatedByUserInput[] | HealthPlansUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutUpdatedByUserInput | HealthPlansCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutUpdatedByUserInput | HealthPlansUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: HealthPlansCreateManyUpdatedByUserInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutUpdatedByUserInput | HealthPlansUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutUpdatedByUserInput | HealthPlansUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput> | DefaultObjectiveInformationCreateWithoutUpdatedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutUpdatedByUserInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyUpdatedByUserInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutUpdatedByUserInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutUpdatedByUserInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
        create?: XOR<EventCalendarCreateWithoutUpdatedByUserInput, EventCalendarUncheckedCreateWithoutUpdatedByUserInput> | EventCalendarCreateWithoutUpdatedByUserInput[] | EventCalendarUncheckedCreateWithoutUpdatedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutUpdatedByUserInput | EventCalendarCreateOrConnectWithoutUpdatedByUserInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutUpdatedByUserInput | EventCalendarUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
        createMany?: EventCalendarCreateManyUpdatedByUserInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutUpdatedByUserInput | EventCalendarUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutUpdatedByUserInput | EventCalendarUpdateManyWithWhereWithoutUpdatedByUserInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type AppointmentCidUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutDeletedByUserInput, AppointmentCidUncheckedCreateWithoutDeletedByUserInput> | AppointmentCidCreateWithoutDeletedByUserInput[] | AppointmentCidUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutDeletedByUserInput | AppointmentCidCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutDeletedByUserInput | AppointmentCidUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AppointmentCidCreateManyDeletedByUserInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutDeletedByUserInput | AppointmentCidUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutDeletedByUserInput | AppointmentCidUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AppointmentCreateWithoutDeletedByUserInput, AppointmentUncheckedCreateWithoutDeletedByUserInput> | AppointmentCreateWithoutDeletedByUserInput[] | AppointmentUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutDeletedByUserInput | AppointmentCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutDeletedByUserInput | AppointmentUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AppointmentCreateManyDeletedByUserInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutDeletedByUserInput | AppointmentUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutDeletedByUserInput | AppointmentUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<PatientCreateWithoutDeletedByUserInput, PatientUncheckedCreateWithoutDeletedByUserInput> | PatientCreateWithoutDeletedByUserInput[] | PatientUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutDeletedByUserInput | PatientCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutDeletedByUserInput | PatientUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: PatientCreateManyDeletedByUserInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutDeletedByUserInput | PatientUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutDeletedByUserInput | PatientUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<VaccinationsCreateWithoutDeletedByUserInput, VaccinationsUncheckedCreateWithoutDeletedByUserInput> | VaccinationsCreateWithoutDeletedByUserInput[] | VaccinationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutDeletedByUserInput | VaccinationsCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutDeletedByUserInput | VaccinationsUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: VaccinationsCreateManyDeletedByUserInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutDeletedByUserInput | VaccinationsUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutDeletedByUserInput | VaccinationsUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<AllergiesCreateWithoutDeletedByUserInput, AllergiesUncheckedCreateWithoutDeletedByUserInput> | AllergiesCreateWithoutDeletedByUserInput[] | AllergiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutDeletedByUserInput | AllergiesCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutDeletedByUserInput | AllergiesUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: AllergiesCreateManyDeletedByUserInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutDeletedByUserInput | AllergiesUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutDeletedByUserInput | AllergiesUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<MedicationsCreateWithoutDeletedByUserInput, MedicationsUncheckedCreateWithoutDeletedByUserInput> | MedicationsCreateWithoutDeletedByUserInput[] | MedicationsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutDeletedByUserInput | MedicationsCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutDeletedByUserInput | MedicationsUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: MedicationsCreateManyDeletedByUserInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutDeletedByUserInput | MedicationsUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutDeletedByUserInput | MedicationsUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<ExamResultsCreateWithoutDeletedByUserInput, ExamResultsUncheckedCreateWithoutDeletedByUserInput> | ExamResultsCreateWithoutDeletedByUserInput[] | ExamResultsUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutDeletedByUserInput | ExamResultsCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutDeletedByUserInput | ExamResultsUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: ExamResultsCreateManyDeletedByUserInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutDeletedByUserInput | ExamResultsUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutDeletedByUserInput | ExamResultsUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutDeletedByUserInput, ComorbiditiesUncheckedCreateWithoutDeletedByUserInput> | ComorbiditiesCreateWithoutDeletedByUserInput[] | ComorbiditiesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutDeletedByUserInput | ComorbiditiesCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutDeletedByUserInput | ComorbiditiesUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: ComorbiditiesCreateManyDeletedByUserInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutDeletedByUserInput | ComorbiditiesUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutDeletedByUserInput | ComorbiditiesUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<SurgeriesCreateWithoutDeletedByUserInput, SurgeriesUncheckedCreateWithoutDeletedByUserInput> | SurgeriesCreateWithoutDeletedByUserInput[] | SurgeriesUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutDeletedByUserInput | SurgeriesCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInput | SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: SurgeriesCreateManyDeletedByUserInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInput | SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutDeletedByUserInput | SurgeriesUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<HealthPlansCreateWithoutDeletedByUserInput, HealthPlansUncheckedCreateWithoutDeletedByUserInput> | HealthPlansCreateWithoutDeletedByUserInput[] | HealthPlansUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutDeletedByUserInput | HealthPlansCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutDeletedByUserInput | HealthPlansUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: HealthPlansCreateManyDeletedByUserInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutDeletedByUserInput | HealthPlansUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutDeletedByUserInput | HealthPlansUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput> | DefaultObjectiveInformationCreateWithoutDeletedByUserInput[] | DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput | DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutDeletedByUserInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: DefaultObjectiveInformationCreateManyDeletedByUserInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutDeletedByUserInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutDeletedByUserInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
        create?: XOR<EventCalendarCreateWithoutDeletedByUserInput, EventCalendarUncheckedCreateWithoutDeletedByUserInput> | EventCalendarCreateWithoutDeletedByUserInput[] | EventCalendarUncheckedCreateWithoutDeletedByUserInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutDeletedByUserInput | EventCalendarCreateOrConnectWithoutDeletedByUserInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutDeletedByUserInput | EventCalendarUpsertWithWhereUniqueWithoutDeletedByUserInput[]
        createMany?: EventCalendarCreateManyDeletedByUserInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutDeletedByUserInput | EventCalendarUpdateWithWhereUniqueWithoutDeletedByUserInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutDeletedByUserInput | EventCalendarUpdateManyWithWhereWithoutDeletedByUserInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutCreatedAssetsInput = {
        create?: XOR<UserCreateWithoutCreatedAssetsInput, UserUncheckedCreateWithoutCreatedAssetsInput>
        connectOrCreate?: UserCreateOrConnectWithoutCreatedAssetsInput
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutUpdatedAssetsInput = {
        create?: XOR<UserCreateWithoutUpdatedAssetsInput, UserUncheckedCreateWithoutUpdatedAssetsInput>
        connectOrCreate?: UserCreateOrConnectWithoutUpdatedAssetsInput
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDeletedAssetsInput = {
        create?: XOR<UserCreateWithoutDeletedAssetsInput, UserUncheckedCreateWithoutDeletedAssetsInput>
        connectOrCreate?: UserCreateOrConnectWithoutDeletedAssetsInput
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutAssetsInput = {
        create?: XOR<OrganizationCreateWithoutAssetsInput, OrganizationUncheckedCreateWithoutAssetsInput>
        connectOrCreate?: OrganizationCreateOrConnectWithoutAssetsInput
        connect?: OrganizationWhereUniqueInput
    };
    export type UserUpdateOneWithoutCreatedAssetsNestedInput = {
        create?: XOR<UserCreateWithoutCreatedAssetsInput, UserUncheckedCreateWithoutCreatedAssetsInput>
        connectOrCreate?: UserCreateOrConnectWithoutCreatedAssetsInput
        upsert?: UserUpsertWithoutCreatedAssetsInput
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAssetsInput, UserUpdateWithoutCreatedAssetsInput>, UserUncheckedUpdateWithoutCreatedAssetsInput>
    };
    export type UserUpdateOneWithoutUpdatedAssetsNestedInput = {
        create?: XOR<UserCreateWithoutUpdatedAssetsInput, UserUncheckedCreateWithoutUpdatedAssetsInput>
        connectOrCreate?: UserCreateOrConnectWithoutUpdatedAssetsInput
        upsert?: UserUpsertWithoutUpdatedAssetsInput
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedAssetsInput, UserUpdateWithoutUpdatedAssetsInput>, UserUncheckedUpdateWithoutUpdatedAssetsInput>
    };
    export type UserUpdateOneWithoutDeletedAssetsNestedInput = {
        create?: XOR<UserCreateWithoutDeletedAssetsInput, UserUncheckedCreateWithoutDeletedAssetsInput>
        connectOrCreate?: UserCreateOrConnectWithoutDeletedAssetsInput
        upsert?: UserUpsertWithoutDeletedAssetsInput
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDeletedAssetsInput, UserUpdateWithoutDeletedAssetsInput>, UserUncheckedUpdateWithoutDeletedAssetsInput>
    };
    export type OrganizationUpdateOneWithoutAssetsNestedInput = {
        create?: XOR<OrganizationCreateWithoutAssetsInput, OrganizationUncheckedCreateWithoutAssetsInput>
        connectOrCreate?: OrganizationCreateOrConnectWithoutAssetsInput
        upsert?: OrganizationUpsertWithoutAssetsInput
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAssetsInput, OrganizationUpdateWithoutAssetsInput>, OrganizationUncheckedUpdateWithoutAssetsInput>
    };
    export type UserCreateNestedOneWithoutSessionsInput = {
        create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
        connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
        connect?: UserWhereUniqueInput
    };
    export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
        create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
        connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
        upsert?: UserUpsertWithoutSessionsInput
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
    };
    export type UserCreateNestedOneWithoutAccountsInput = {
        create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
        connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
        connect?: UserWhereUniqueInput
    };
    export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
        create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
        connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
        upsert?: UserUpsertWithoutAccountsInput
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
    };
    export type MemberCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
        createMany?: MemberCreateManyOrganizationInputEnvelope
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    };
    export type InvitationCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
        createMany?: InvitationCreateManyOrganizationInputEnvelope
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    };
    export type AssetCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AssetCreateWithoutOrganizationInput, AssetUncheckedCreateWithoutOrganizationInput> | AssetCreateWithoutOrganizationInput[] | AssetUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutOrganizationInput | AssetCreateOrConnectWithoutOrganizationInput[]
        createMany?: AssetCreateManyOrganizationInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AppointmentCidCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AppointmentCidCreateWithoutOrganizationInput, AppointmentCidUncheckedCreateWithoutOrganizationInput> | AppointmentCidCreateWithoutOrganizationInput[] | AppointmentCidUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutOrganizationInput | AppointmentCidCreateOrConnectWithoutOrganizationInput[]
        createMany?: AppointmentCidCreateManyOrganizationInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AppointmentCreateWithoutOrganizationInput, AppointmentUncheckedCreateWithoutOrganizationInput> | AppointmentCreateWithoutOrganizationInput[] | AppointmentUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutOrganizationInput | AppointmentCreateOrConnectWithoutOrganizationInput[]
        createMany?: AppointmentCreateManyOrganizationInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<PatientCreateWithoutOrganizationInput, PatientUncheckedCreateWithoutOrganizationInput> | PatientCreateWithoutOrganizationInput[] | PatientUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutOrganizationInput | PatientCreateOrConnectWithoutOrganizationInput[]
        createMany?: PatientCreateManyOrganizationInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<VaccinationsCreateWithoutOrganizationInput, VaccinationsUncheckedCreateWithoutOrganizationInput> | VaccinationsCreateWithoutOrganizationInput[] | VaccinationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutOrganizationInput | VaccinationsCreateOrConnectWithoutOrganizationInput[]
        createMany?: VaccinationsCreateManyOrganizationInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AllergiesCreateWithoutOrganizationInput, AllergiesUncheckedCreateWithoutOrganizationInput> | AllergiesCreateWithoutOrganizationInput[] | AllergiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutOrganizationInput | AllergiesCreateOrConnectWithoutOrganizationInput[]
        createMany?: AllergiesCreateManyOrganizationInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<MedicationsCreateWithoutOrganizationInput, MedicationsUncheckedCreateWithoutOrganizationInput> | MedicationsCreateWithoutOrganizationInput[] | MedicationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutOrganizationInput | MedicationsCreateOrConnectWithoutOrganizationInput[]
        createMany?: MedicationsCreateManyOrganizationInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<ExamResultsCreateWithoutOrganizationInput, ExamResultsUncheckedCreateWithoutOrganizationInput> | ExamResultsCreateWithoutOrganizationInput[] | ExamResultsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutOrganizationInput | ExamResultsCreateOrConnectWithoutOrganizationInput[]
        createMany?: ExamResultsCreateManyOrganizationInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<ComorbiditiesCreateWithoutOrganizationInput, ComorbiditiesUncheckedCreateWithoutOrganizationInput> | ComorbiditiesCreateWithoutOrganizationInput[] | ComorbiditiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutOrganizationInput | ComorbiditiesCreateOrConnectWithoutOrganizationInput[]
        createMany?: ComorbiditiesCreateManyOrganizationInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<SurgeriesCreateWithoutOrganizationInput, SurgeriesUncheckedCreateWithoutOrganizationInput> | SurgeriesCreateWithoutOrganizationInput[] | SurgeriesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutOrganizationInput | SurgeriesCreateOrConnectWithoutOrganizationInput[]
        createMany?: SurgeriesCreateManyOrganizationInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<HealthPlansCreateWithoutOrganizationInput, HealthPlansUncheckedCreateWithoutOrganizationInput> | HealthPlansCreateWithoutOrganizationInput[] | HealthPlansUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutOrganizationInput | HealthPlansCreateOrConnectWithoutOrganizationInput[]
        createMany?: HealthPlansCreateManyOrganizationInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput> | DefaultObjectiveInformationCreateWithoutOrganizationInput[] | DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput | DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput[]
        createMany?: DefaultObjectiveInformationCreateManyOrganizationInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<EventCalendarCreateWithoutOrganizationInput, EventCalendarUncheckedCreateWithoutOrganizationInput> | EventCalendarCreateWithoutOrganizationInput[] | EventCalendarUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutOrganizationInput | EventCalendarCreateOrConnectWithoutOrganizationInput[]
        createMany?: EventCalendarCreateManyOrganizationInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type MemberUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
        createMany?: MemberCreateManyOrganizationInputEnvelope
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    };
    export type InvitationUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
        createMany?: InvitationCreateManyOrganizationInputEnvelope
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    };
    export type AssetUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AssetCreateWithoutOrganizationInput, AssetUncheckedCreateWithoutOrganizationInput> | AssetCreateWithoutOrganizationInput[] | AssetUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutOrganizationInput | AssetCreateOrConnectWithoutOrganizationInput[]
        createMany?: AssetCreateManyOrganizationInputEnvelope
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    };
    export type AppointmentCidUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AppointmentCidCreateWithoutOrganizationInput, AppointmentCidUncheckedCreateWithoutOrganizationInput> | AppointmentCidCreateWithoutOrganizationInput[] | AppointmentCidUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutOrganizationInput | AppointmentCidCreateOrConnectWithoutOrganizationInput[]
        createMany?: AppointmentCidCreateManyOrganizationInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AppointmentCreateWithoutOrganizationInput, AppointmentUncheckedCreateWithoutOrganizationInput> | AppointmentCreateWithoutOrganizationInput[] | AppointmentUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutOrganizationInput | AppointmentCreateOrConnectWithoutOrganizationInput[]
        createMany?: AppointmentCreateManyOrganizationInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type PatientUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<PatientCreateWithoutOrganizationInput, PatientUncheckedCreateWithoutOrganizationInput> | PatientCreateWithoutOrganizationInput[] | PatientUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutOrganizationInput | PatientCreateOrConnectWithoutOrganizationInput[]
        createMany?: PatientCreateManyOrganizationInputEnvelope
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    };
    export type VaccinationsUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<VaccinationsCreateWithoutOrganizationInput, VaccinationsUncheckedCreateWithoutOrganizationInput> | VaccinationsCreateWithoutOrganizationInput[] | VaccinationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutOrganizationInput | VaccinationsCreateOrConnectWithoutOrganizationInput[]
        createMany?: VaccinationsCreateManyOrganizationInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<AllergiesCreateWithoutOrganizationInput, AllergiesUncheckedCreateWithoutOrganizationInput> | AllergiesCreateWithoutOrganizationInput[] | AllergiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutOrganizationInput | AllergiesCreateOrConnectWithoutOrganizationInput[]
        createMany?: AllergiesCreateManyOrganizationInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<MedicationsCreateWithoutOrganizationInput, MedicationsUncheckedCreateWithoutOrganizationInput> | MedicationsCreateWithoutOrganizationInput[] | MedicationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutOrganizationInput | MedicationsCreateOrConnectWithoutOrganizationInput[]
        createMany?: MedicationsCreateManyOrganizationInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<ExamResultsCreateWithoutOrganizationInput, ExamResultsUncheckedCreateWithoutOrganizationInput> | ExamResultsCreateWithoutOrganizationInput[] | ExamResultsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutOrganizationInput | ExamResultsCreateOrConnectWithoutOrganizationInput[]
        createMany?: ExamResultsCreateManyOrganizationInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<ComorbiditiesCreateWithoutOrganizationInput, ComorbiditiesUncheckedCreateWithoutOrganizationInput> | ComorbiditiesCreateWithoutOrganizationInput[] | ComorbiditiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutOrganizationInput | ComorbiditiesCreateOrConnectWithoutOrganizationInput[]
        createMany?: ComorbiditiesCreateManyOrganizationInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<SurgeriesCreateWithoutOrganizationInput, SurgeriesUncheckedCreateWithoutOrganizationInput> | SurgeriesCreateWithoutOrganizationInput[] | SurgeriesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutOrganizationInput | SurgeriesCreateOrConnectWithoutOrganizationInput[]
        createMany?: SurgeriesCreateManyOrganizationInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<HealthPlansCreateWithoutOrganizationInput, HealthPlansUncheckedCreateWithoutOrganizationInput> | HealthPlansCreateWithoutOrganizationInput[] | HealthPlansUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutOrganizationInput | HealthPlansCreateOrConnectWithoutOrganizationInput[]
        createMany?: HealthPlansCreateManyOrganizationInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type DefaultObjectiveInformationUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput> | DefaultObjectiveInformationCreateWithoutOrganizationInput[] | DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput | DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput[]
        createMany?: DefaultObjectiveInformationCreateManyOrganizationInputEnvelope
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
    };
    export type EventCalendarUncheckedCreateNestedManyWithoutOrganizationInput = {
        create?: XOR<EventCalendarCreateWithoutOrganizationInput, EventCalendarUncheckedCreateWithoutOrganizationInput> | EventCalendarCreateWithoutOrganizationInput[] | EventCalendarUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutOrganizationInput | EventCalendarCreateOrConnectWithoutOrganizationInput[]
        createMany?: EventCalendarCreateManyOrganizationInputEnvelope
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
    };
    export type MemberUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
        upsert?: MemberUpsertWithWhereUniqueWithoutOrganizationInput | MemberUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: MemberCreateManyOrganizationInputEnvelope
        set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        update?: MemberUpdateWithWhereUniqueWithoutOrganizationInput | MemberUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: MemberUpdateManyWithWhereWithoutOrganizationInput | MemberUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
    };
    export type InvitationUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
        upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: InvitationCreateManyOrganizationInputEnvelope
        set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    };
    export type AssetUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AssetCreateWithoutOrganizationInput, AssetUncheckedCreateWithoutOrganizationInput> | AssetCreateWithoutOrganizationInput[] | AssetUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutOrganizationInput | AssetCreateOrConnectWithoutOrganizationInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutOrganizationInput | AssetUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AssetCreateManyOrganizationInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutOrganizationInput | AssetUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutOrganizationInput | AssetUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AppointmentCidUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutOrganizationInput, AppointmentCidUncheckedCreateWithoutOrganizationInput> | AppointmentCidCreateWithoutOrganizationInput[] | AppointmentCidUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutOrganizationInput | AppointmentCidCreateOrConnectWithoutOrganizationInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutOrganizationInput | AppointmentCidUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AppointmentCidCreateManyOrganizationInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutOrganizationInput | AppointmentCidUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutOrganizationInput | AppointmentCidUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AppointmentCreateWithoutOrganizationInput, AppointmentUncheckedCreateWithoutOrganizationInput> | AppointmentCreateWithoutOrganizationInput[] | AppointmentUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutOrganizationInput | AppointmentCreateOrConnectWithoutOrganizationInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutOrganizationInput | AppointmentUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AppointmentCreateManyOrganizationInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutOrganizationInput | AppointmentUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutOrganizationInput | AppointmentUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<PatientCreateWithoutOrganizationInput, PatientUncheckedCreateWithoutOrganizationInput> | PatientCreateWithoutOrganizationInput[] | PatientUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutOrganizationInput | PatientCreateOrConnectWithoutOrganizationInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutOrganizationInput | PatientUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: PatientCreateManyOrganizationInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutOrganizationInput | PatientUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutOrganizationInput | PatientUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<VaccinationsCreateWithoutOrganizationInput, VaccinationsUncheckedCreateWithoutOrganizationInput> | VaccinationsCreateWithoutOrganizationInput[] | VaccinationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutOrganizationInput | VaccinationsCreateOrConnectWithoutOrganizationInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutOrganizationInput | VaccinationsUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: VaccinationsCreateManyOrganizationInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutOrganizationInput | VaccinationsUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutOrganizationInput | VaccinationsUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AllergiesCreateWithoutOrganizationInput, AllergiesUncheckedCreateWithoutOrganizationInput> | AllergiesCreateWithoutOrganizationInput[] | AllergiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutOrganizationInput | AllergiesCreateOrConnectWithoutOrganizationInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutOrganizationInput | AllergiesUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AllergiesCreateManyOrganizationInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutOrganizationInput | AllergiesUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutOrganizationInput | AllergiesUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<MedicationsCreateWithoutOrganizationInput, MedicationsUncheckedCreateWithoutOrganizationInput> | MedicationsCreateWithoutOrganizationInput[] | MedicationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutOrganizationInput | MedicationsCreateOrConnectWithoutOrganizationInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutOrganizationInput | MedicationsUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: MedicationsCreateManyOrganizationInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutOrganizationInput | MedicationsUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutOrganizationInput | MedicationsUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<ExamResultsCreateWithoutOrganizationInput, ExamResultsUncheckedCreateWithoutOrganizationInput> | ExamResultsCreateWithoutOrganizationInput[] | ExamResultsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutOrganizationInput | ExamResultsCreateOrConnectWithoutOrganizationInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutOrganizationInput | ExamResultsUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: ExamResultsCreateManyOrganizationInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutOrganizationInput | ExamResultsUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutOrganizationInput | ExamResultsUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutOrganizationInput, ComorbiditiesUncheckedCreateWithoutOrganizationInput> | ComorbiditiesCreateWithoutOrganizationInput[] | ComorbiditiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutOrganizationInput | ComorbiditiesCreateOrConnectWithoutOrganizationInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutOrganizationInput | ComorbiditiesUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: ComorbiditiesCreateManyOrganizationInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutOrganizationInput | ComorbiditiesUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutOrganizationInput | ComorbiditiesUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<SurgeriesCreateWithoutOrganizationInput, SurgeriesUncheckedCreateWithoutOrganizationInput> | SurgeriesCreateWithoutOrganizationInput[] | SurgeriesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutOrganizationInput | SurgeriesCreateOrConnectWithoutOrganizationInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutOrganizationInput | SurgeriesUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: SurgeriesCreateManyOrganizationInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutOrganizationInput | SurgeriesUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutOrganizationInput | SurgeriesUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<HealthPlansCreateWithoutOrganizationInput, HealthPlansUncheckedCreateWithoutOrganizationInput> | HealthPlansCreateWithoutOrganizationInput[] | HealthPlansUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutOrganizationInput | HealthPlansCreateOrConnectWithoutOrganizationInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutOrganizationInput | HealthPlansUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: HealthPlansCreateManyOrganizationInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutOrganizationInput | HealthPlansUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutOrganizationInput | HealthPlansUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput> | DefaultObjectiveInformationCreateWithoutOrganizationInput[] | DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput | DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutOrganizationInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: DefaultObjectiveInformationCreateManyOrganizationInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutOrganizationInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutOrganizationInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<EventCalendarCreateWithoutOrganizationInput, EventCalendarUncheckedCreateWithoutOrganizationInput> | EventCalendarCreateWithoutOrganizationInput[] | EventCalendarUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutOrganizationInput | EventCalendarCreateOrConnectWithoutOrganizationInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutOrganizationInput | EventCalendarUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: EventCalendarCreateManyOrganizationInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutOrganizationInput | EventCalendarUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutOrganizationInput | EventCalendarUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type MemberUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
        upsert?: MemberUpsertWithWhereUniqueWithoutOrganizationInput | MemberUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: MemberCreateManyOrganizationInputEnvelope
        set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
        update?: MemberUpdateWithWhereUniqueWithoutOrganizationInput | MemberUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: MemberUpdateManyWithWhereWithoutOrganizationInput | MemberUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
    };
    export type InvitationUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
        upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: InvitationCreateManyOrganizationInputEnvelope
        set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
        update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    };
    export type AssetUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AssetCreateWithoutOrganizationInput, AssetUncheckedCreateWithoutOrganizationInput> | AssetCreateWithoutOrganizationInput[] | AssetUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AssetCreateOrConnectWithoutOrganizationInput | AssetCreateOrConnectWithoutOrganizationInput[]
        upsert?: AssetUpsertWithWhereUniqueWithoutOrganizationInput | AssetUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AssetCreateManyOrganizationInputEnvelope
        set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
        update?: AssetUpdateWithWhereUniqueWithoutOrganizationInput | AssetUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AssetUpdateManyWithWhereWithoutOrganizationInput | AssetUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
    };
    export type AppointmentCidUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutOrganizationInput, AppointmentCidUncheckedCreateWithoutOrganizationInput> | AppointmentCidCreateWithoutOrganizationInput[] | AppointmentCidUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutOrganizationInput | AppointmentCidCreateOrConnectWithoutOrganizationInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutOrganizationInput | AppointmentCidUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AppointmentCidCreateManyOrganizationInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutOrganizationInput | AppointmentCidUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutOrganizationInput | AppointmentCidUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AppointmentCreateWithoutOrganizationInput, AppointmentUncheckedCreateWithoutOrganizationInput> | AppointmentCreateWithoutOrganizationInput[] | AppointmentUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutOrganizationInput | AppointmentCreateOrConnectWithoutOrganizationInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutOrganizationInput | AppointmentUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AppointmentCreateManyOrganizationInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutOrganizationInput | AppointmentUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutOrganizationInput | AppointmentUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type PatientUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<PatientCreateWithoutOrganizationInput, PatientUncheckedCreateWithoutOrganizationInput> | PatientCreateWithoutOrganizationInput[] | PatientUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: PatientCreateOrConnectWithoutOrganizationInput | PatientCreateOrConnectWithoutOrganizationInput[]
        upsert?: PatientUpsertWithWhereUniqueWithoutOrganizationInput | PatientUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: PatientCreateManyOrganizationInputEnvelope
        set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
        update?: PatientUpdateWithWhereUniqueWithoutOrganizationInput | PatientUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: PatientUpdateManyWithWhereWithoutOrganizationInput | PatientUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
    };
    export type VaccinationsUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<VaccinationsCreateWithoutOrganizationInput, VaccinationsUncheckedCreateWithoutOrganizationInput> | VaccinationsCreateWithoutOrganizationInput[] | VaccinationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutOrganizationInput | VaccinationsCreateOrConnectWithoutOrganizationInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutOrganizationInput | VaccinationsUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: VaccinationsCreateManyOrganizationInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutOrganizationInput | VaccinationsUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutOrganizationInput | VaccinationsUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<AllergiesCreateWithoutOrganizationInput, AllergiesUncheckedCreateWithoutOrganizationInput> | AllergiesCreateWithoutOrganizationInput[] | AllergiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutOrganizationInput | AllergiesCreateOrConnectWithoutOrganizationInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutOrganizationInput | AllergiesUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: AllergiesCreateManyOrganizationInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutOrganizationInput | AllergiesUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutOrganizationInput | AllergiesUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<MedicationsCreateWithoutOrganizationInput, MedicationsUncheckedCreateWithoutOrganizationInput> | MedicationsCreateWithoutOrganizationInput[] | MedicationsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutOrganizationInput | MedicationsCreateOrConnectWithoutOrganizationInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutOrganizationInput | MedicationsUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: MedicationsCreateManyOrganizationInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutOrganizationInput | MedicationsUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutOrganizationInput | MedicationsUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<ExamResultsCreateWithoutOrganizationInput, ExamResultsUncheckedCreateWithoutOrganizationInput> | ExamResultsCreateWithoutOrganizationInput[] | ExamResultsUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutOrganizationInput | ExamResultsCreateOrConnectWithoutOrganizationInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutOrganizationInput | ExamResultsUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: ExamResultsCreateManyOrganizationInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutOrganizationInput | ExamResultsUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutOrganizationInput | ExamResultsUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutOrganizationInput, ComorbiditiesUncheckedCreateWithoutOrganizationInput> | ComorbiditiesCreateWithoutOrganizationInput[] | ComorbiditiesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutOrganizationInput | ComorbiditiesCreateOrConnectWithoutOrganizationInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutOrganizationInput | ComorbiditiesUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: ComorbiditiesCreateManyOrganizationInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutOrganizationInput | ComorbiditiesUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutOrganizationInput | ComorbiditiesUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<SurgeriesCreateWithoutOrganizationInput, SurgeriesUncheckedCreateWithoutOrganizationInput> | SurgeriesCreateWithoutOrganizationInput[] | SurgeriesUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutOrganizationInput | SurgeriesCreateOrConnectWithoutOrganizationInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutOrganizationInput | SurgeriesUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: SurgeriesCreateManyOrganizationInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutOrganizationInput | SurgeriesUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutOrganizationInput | SurgeriesUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<HealthPlansCreateWithoutOrganizationInput, HealthPlansUncheckedCreateWithoutOrganizationInput> | HealthPlansCreateWithoutOrganizationInput[] | HealthPlansUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutOrganizationInput | HealthPlansCreateOrConnectWithoutOrganizationInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutOrganizationInput | HealthPlansUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: HealthPlansCreateManyOrganizationInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutOrganizationInput | HealthPlansUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutOrganizationInput | HealthPlansUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<DefaultObjectiveInformationCreateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput> | DefaultObjectiveInformationCreateWithoutOrganizationInput[] | DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput | DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput[]
        upsert?: DefaultObjectiveInformationUpsertWithWhereUniqueWithoutOrganizationInput | DefaultObjectiveInformationUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: DefaultObjectiveInformationCreateManyOrganizationInputEnvelope
        set?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        disconnect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        delete?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        connect?: DefaultObjectiveInformationWhereUniqueInput | DefaultObjectiveInformationWhereUniqueInput[]
        update?: DefaultObjectiveInformationUpdateWithWhereUniqueWithoutOrganizationInput | DefaultObjectiveInformationUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: DefaultObjectiveInformationUpdateManyWithWhereWithoutOrganizationInput | DefaultObjectiveInformationUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
    };
    export type EventCalendarUncheckedUpdateManyWithoutOrganizationNestedInput = {
        create?: XOR<EventCalendarCreateWithoutOrganizationInput, EventCalendarUncheckedCreateWithoutOrganizationInput> | EventCalendarCreateWithoutOrganizationInput[] | EventCalendarUncheckedCreateWithoutOrganizationInput[]
        connectOrCreate?: EventCalendarCreateOrConnectWithoutOrganizationInput | EventCalendarCreateOrConnectWithoutOrganizationInput[]
        upsert?: EventCalendarUpsertWithWhereUniqueWithoutOrganizationInput | EventCalendarUpsertWithWhereUniqueWithoutOrganizationInput[]
        createMany?: EventCalendarCreateManyOrganizationInputEnvelope
        set?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        disconnect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        delete?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        connect?: EventCalendarWhereUniqueInput | EventCalendarWhereUniqueInput[]
        update?: EventCalendarUpdateWithWhereUniqueWithoutOrganizationInput | EventCalendarUpdateWithWhereUniqueWithoutOrganizationInput[]
        updateMany?: EventCalendarUpdateManyWithWhereWithoutOrganizationInput | EventCalendarUpdateManyWithWhereWithoutOrganizationInput[]
        deleteMany?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
    };
    export type OrganizationCreateNestedOneWithoutMembersInput = {
        create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
        connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
        connect?: OrganizationWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutMembersInput = {
        create?: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
        connectOrCreate?: UserCreateOrConnectWithoutMembersInput
        connect?: UserWhereUniqueInput
    };
    export type OrganizationUpdateOneRequiredWithoutMembersNestedInput = {
        create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
        connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
        upsert?: OrganizationUpsertWithoutMembersInput
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMembersInput, OrganizationUpdateWithoutMembersInput>, OrganizationUncheckedUpdateWithoutMembersInput>
    };
    export type UserUpdateOneRequiredWithoutMembersNestedInput = {
        create?: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
        connectOrCreate?: UserCreateOrConnectWithoutMembersInput
        upsert?: UserUpsertWithoutMembersInput
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMembersInput, UserUpdateWithoutMembersInput>, UserUncheckedUpdateWithoutMembersInput>
    };
    export type OrganizationCreateNestedOneWithoutInvitationsInput = {
        create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
        connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
        connect?: OrganizationWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutInvitationsInput = {
        create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
        connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
        connect?: UserWhereUniqueInput
    };
    export type OrganizationUpdateOneRequiredWithoutInvitationsNestedInput = {
        create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
        connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
        upsert?: OrganizationUpsertWithoutInvitationsInput
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvitationsInput, OrganizationUpdateWithoutInvitationsInput>, OrganizationUncheckedUpdateWithoutInvitationsInput>
    };
    export type UserUpdateOneRequiredWithoutInvitationsNestedInput = {
        create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
        connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
        upsert?: UserUpsertWithoutInvitationsInput
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitationsInput, UserUpdateWithoutInvitationsInput>, UserUncheckedUpdateWithoutInvitationsInput>
    };
    export type AppointmentCidCreateNestedManyWithoutCidInput = {
        create?: XOR<AppointmentCidCreateWithoutCidInput, AppointmentCidUncheckedCreateWithoutCidInput> | AppointmentCidCreateWithoutCidInput[] | AppointmentCidUncheckedCreateWithoutCidInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCidInput | AppointmentCidCreateOrConnectWithoutCidInput[]
        createMany?: AppointmentCidCreateManyCidInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentCidUncheckedCreateNestedManyWithoutCidInput = {
        create?: XOR<AppointmentCidCreateWithoutCidInput, AppointmentCidUncheckedCreateWithoutCidInput> | AppointmentCidCreateWithoutCidInput[] | AppointmentCidUncheckedCreateWithoutCidInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCidInput | AppointmentCidCreateOrConnectWithoutCidInput[]
        createMany?: AppointmentCidCreateManyCidInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AppointmentCidUpdateManyWithoutCidNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutCidInput, AppointmentCidUncheckedCreateWithoutCidInput> | AppointmentCidCreateWithoutCidInput[] | AppointmentCidUncheckedCreateWithoutCidInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCidInput | AppointmentCidCreateOrConnectWithoutCidInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutCidInput | AppointmentCidUpsertWithWhereUniqueWithoutCidInput[]
        createMany?: AppointmentCidCreateManyCidInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutCidInput | AppointmentCidUpdateWithWhereUniqueWithoutCidInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutCidInput | AppointmentCidUpdateManyWithWhereWithoutCidInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AppointmentCidUncheckedUpdateManyWithoutCidNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutCidInput, AppointmentCidUncheckedCreateWithoutCidInput> | AppointmentCidCreateWithoutCidInput[] | AppointmentCidUncheckedCreateWithoutCidInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutCidInput | AppointmentCidCreateOrConnectWithoutCidInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutCidInput | AppointmentCidUpsertWithWhereUniqueWithoutCidInput[]
        createMany?: AppointmentCidCreateManyCidInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutCidInput | AppointmentCidUpdateWithWhereUniqueWithoutCidInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutCidInput | AppointmentCidUpdateManyWithWhereWithoutCidInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Appoi_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutCidsInput = {
        create?: XOR<AppointmentCreateWithoutCidsInput, AppointmentUncheckedCreateWithoutCidsInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutCidsInput
        connect?: AppointmentWhereUniqueInput
    };
    export type CidCreateNestedOneWithoutAppointmentCidInput = {
        create?: XOR<CidCreateWithoutAppointmentCidInput, CidUncheckedCreateWithoutAppointmentCidInput>
        connectOrCreate?: CidCreateOrConnectWithoutAppointmentCidInput
        connect?: CidWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Appoi_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Appoi_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
    };
    export type AppointmentUpdateOneRequiredWithoutCidsNestedInput = {
        create?: XOR<AppointmentCreateWithoutCidsInput, AppointmentUncheckedCreateWithoutCidsInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutCidsInput
        upsert?: AppointmentUpsertWithoutCidsInput
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutCidsInput, AppointmentUpdateWithoutCidsInput>, AppointmentUncheckedUpdateWithoutCidsInput>
    };
    export type CidUpdateOneRequiredWithoutAppointmentCidNestedInput = {
        create?: XOR<CidCreateWithoutAppointmentCidInput, CidUncheckedCreateWithoutAppointmentCidInput>
        connectOrCreate?: CidCreateOrConnectWithoutAppointmentCidInput
        upsert?: CidUpsertWithoutAppointmentCidInput
        connect?: CidWhereUniqueInput
        update?: XOR<XOR<CidUpdateToOneWithWhereWithoutAppointmentCidInput, CidUpdateWithoutAppointmentCidInput>, CidUncheckedUpdateWithoutAppointmentCidInput>
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Appoi_1Input
        connect?: OrganizationWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutPredecessorFollowUpInput = {
        create?: XOR<AppointmentCreateWithoutPredecessorFollowUpInput, AppointmentUncheckedCreateWithoutPredecessorFollowUpInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutPredecessorFollowUpInput
        connect?: AppointmentWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutFollowUpInput = {
        create?: XOR<AppointmentCreateWithoutFollowUpInput, AppointmentUncheckedCreateWithoutFollowUpInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutFollowUpInput
        connect?: AppointmentWhereUniqueInput
    };
    export type AppointmentCidCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<AppointmentCidCreateWithoutAppointmentInput, AppointmentCidUncheckedCreateWithoutAppointmentInput> | AppointmentCidCreateWithoutAppointmentInput[] | AppointmentCidUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutAppointmentInput | AppointmentCidCreateOrConnectWithoutAppointmentInput[]
        createMany?: AppointmentCidCreateManyAppointmentInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AllergiesCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<AllergiesCreateWithoutAppointmentInput, AllergiesUncheckedCreateWithoutAppointmentInput> | AllergiesCreateWithoutAppointmentInput[] | AllergiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAppointmentInput | AllergiesCreateOrConnectWithoutAppointmentInput[]
        createMany?: AllergiesCreateManyAppointmentInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<MedicationsCreateWithoutAppointmentInput, MedicationsUncheckedCreateWithoutAppointmentInput> | MedicationsCreateWithoutAppointmentInput[] | MedicationsUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutAppointmentInput | MedicationsCreateOrConnectWithoutAppointmentInput[]
        createMany?: MedicationsCreateManyAppointmentInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ComorbiditiesCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<ComorbiditiesCreateWithoutAppointmentInput, ComorbiditiesUncheckedCreateWithoutAppointmentInput> | ComorbiditiesCreateWithoutAppointmentInput[] | ComorbiditiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutAppointmentInput | ComorbiditiesCreateOrConnectWithoutAppointmentInput[]
        createMany?: ComorbiditiesCreateManyAppointmentInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type PatientCreateNestedOneWithoutAppointmentsInput = {
        create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
        connect?: PatientWhereUniqueInput
    };
    export type EventCalendarCreateNestedOneWithoutAppointmentInput = {
        create?: XOR<EventCalendarCreateWithoutAppointmentInput, EventCalendarUncheckedCreateWithoutAppointmentInput>
        connectOrCreate?: EventCalendarCreateOrConnectWithoutAppointmentInput
        connect?: EventCalendarWhereUniqueInput
    };
    export type AppointmentUncheckedCreateNestedOneWithoutFollowUpInput = {
        create?: XOR<AppointmentCreateWithoutFollowUpInput, AppointmentUncheckedCreateWithoutFollowUpInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutFollowUpInput
        connect?: AppointmentWhereUniqueInput
    };
    export type AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<AppointmentCidCreateWithoutAppointmentInput, AppointmentCidUncheckedCreateWithoutAppointmentInput> | AppointmentCidCreateWithoutAppointmentInput[] | AppointmentCidUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutAppointmentInput | AppointmentCidCreateOrConnectWithoutAppointmentInput[]
        createMany?: AppointmentCidCreateManyAppointmentInputEnvelope
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<AllergiesCreateWithoutAppointmentInput, AllergiesUncheckedCreateWithoutAppointmentInput> | AllergiesCreateWithoutAppointmentInput[] | AllergiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAppointmentInput | AllergiesCreateOrConnectWithoutAppointmentInput[]
        createMany?: AllergiesCreateManyAppointmentInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<MedicationsCreateWithoutAppointmentInput, MedicationsUncheckedCreateWithoutAppointmentInput> | MedicationsCreateWithoutAppointmentInput[] | MedicationsUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutAppointmentInput | MedicationsCreateOrConnectWithoutAppointmentInput[]
        createMany?: MedicationsCreateManyAppointmentInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput = {
        create?: XOR<ComorbiditiesCreateWithoutAppointmentInput, ComorbiditiesUncheckedCreateWithoutAppointmentInput> | ComorbiditiesCreateWithoutAppointmentInput[] | ComorbiditiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutAppointmentInput | ComorbiditiesCreateOrConnectWithoutAppointmentInput[]
        createMany?: ComorbiditiesCreateManyAppointmentInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput = {
        create?: XOR<EventCalendarCreateWithoutAppointmentInput, EventCalendarUncheckedCreateWithoutAppointmentInput>
        connectOrCreate?: EventCalendarCreateOrConnectWithoutAppointmentInput
        connect?: EventCalendarWhereUniqueInput
    };
    export type NullableIntFieldUpdateOperationsInput = {
        set?: number | null
        increment?: number
        decrement?: number
        multiply?: number
        divide?: number
    };
    export type NullableEnumAppointmentCategoryFieldUpdateOperationsInput = {
        set?: $Enums.AppointmentCategory | null
    };
    export type NullableEnumAppointmentStatusFieldUpdateOperationsInput = {
        set?: $Enums.AppointmentStatus | null
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Appoi_1Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Appoi_1Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
    };
    export type AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput = {
        create?: XOR<AppointmentCreateWithoutPredecessorFollowUpInput, AppointmentUncheckedCreateWithoutPredecessorFollowUpInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutPredecessorFollowUpInput
        upsert?: AppointmentUpsertWithoutPredecessorFollowUpInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutPredecessorFollowUpInput, AppointmentUpdateWithoutPredecessorFollowUpInput>, AppointmentUncheckedUpdateWithoutPredecessorFollowUpInput>
    };
    export type AppointmentUpdateOneWithoutFollowUpNestedInput = {
        create?: XOR<AppointmentCreateWithoutFollowUpInput, AppointmentUncheckedCreateWithoutFollowUpInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutFollowUpInput
        upsert?: AppointmentUpsertWithoutFollowUpInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutFollowUpInput, AppointmentUpdateWithoutFollowUpInput>, AppointmentUncheckedUpdateWithoutFollowUpInput>
    };
    export type AppointmentCidUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutAppointmentInput, AppointmentCidUncheckedCreateWithoutAppointmentInput> | AppointmentCidCreateWithoutAppointmentInput[] | AppointmentCidUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutAppointmentInput | AppointmentCidCreateOrConnectWithoutAppointmentInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutAppointmentInput | AppointmentCidUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: AppointmentCidCreateManyAppointmentInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutAppointmentInput | AppointmentCidUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutAppointmentInput | AppointmentCidUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AllergiesUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<AllergiesCreateWithoutAppointmentInput, AllergiesUncheckedCreateWithoutAppointmentInput> | AllergiesCreateWithoutAppointmentInput[] | AllergiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAppointmentInput | AllergiesCreateOrConnectWithoutAppointmentInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutAppointmentInput | AllergiesUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: AllergiesCreateManyAppointmentInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutAppointmentInput | AllergiesUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutAppointmentInput | AllergiesUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<MedicationsCreateWithoutAppointmentInput, MedicationsUncheckedCreateWithoutAppointmentInput> | MedicationsCreateWithoutAppointmentInput[] | MedicationsUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutAppointmentInput | MedicationsCreateOrConnectWithoutAppointmentInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutAppointmentInput | MedicationsUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: MedicationsCreateManyAppointmentInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutAppointmentInput | MedicationsUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutAppointmentInput | MedicationsUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ComorbiditiesUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutAppointmentInput, ComorbiditiesUncheckedCreateWithoutAppointmentInput> | ComorbiditiesCreateWithoutAppointmentInput[] | ComorbiditiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutAppointmentInput | ComorbiditiesCreateOrConnectWithoutAppointmentInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutAppointmentInput | ComorbiditiesUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: ComorbiditiesCreateManyAppointmentInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutAppointmentInput | ComorbiditiesUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutAppointmentInput | ComorbiditiesUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
        create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
        upsert?: PatientUpsertWithoutAppointmentsInput
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAppointmentsInput, PatientUpdateWithoutAppointmentsInput>, PatientUncheckedUpdateWithoutAppointmentsInput>
    };
    export type EventCalendarUpdateOneWithoutAppointmentNestedInput = {
        create?: XOR<EventCalendarCreateWithoutAppointmentInput, EventCalendarUncheckedCreateWithoutAppointmentInput>
        connectOrCreate?: EventCalendarCreateOrConnectWithoutAppointmentInput
        upsert?: EventCalendarUpsertWithoutAppointmentInput
        disconnect?: EventCalendarWhereInput | boolean
        delete?: EventCalendarWhereInput | boolean
        connect?: EventCalendarWhereUniqueInput
        update?: XOR<XOR<EventCalendarUpdateToOneWithWhereWithoutAppointmentInput, EventCalendarUpdateWithoutAppointmentInput>, EventCalendarUncheckedUpdateWithoutAppointmentInput>
    };
    export type AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput = {
        create?: XOR<AppointmentCreateWithoutFollowUpInput, AppointmentUncheckedCreateWithoutFollowUpInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutFollowUpInput
        upsert?: AppointmentUpsertWithoutFollowUpInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutFollowUpInput, AppointmentUpdateWithoutFollowUpInput>, AppointmentUncheckedUpdateWithoutFollowUpInput>
    };
    export type AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<AppointmentCidCreateWithoutAppointmentInput, AppointmentCidUncheckedCreateWithoutAppointmentInput> | AppointmentCidCreateWithoutAppointmentInput[] | AppointmentCidUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AppointmentCidCreateOrConnectWithoutAppointmentInput | AppointmentCidCreateOrConnectWithoutAppointmentInput[]
        upsert?: AppointmentCidUpsertWithWhereUniqueWithoutAppointmentInput | AppointmentCidUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: AppointmentCidCreateManyAppointmentInputEnvelope
        set?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        disconnect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        delete?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        connect?: AppointmentCidWhereUniqueInput | AppointmentCidWhereUniqueInput[]
        update?: AppointmentCidUpdateWithWhereUniqueWithoutAppointmentInput | AppointmentCidUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: AppointmentCidUpdateManyWithWhereWithoutAppointmentInput | AppointmentCidUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<AllergiesCreateWithoutAppointmentInput, AllergiesUncheckedCreateWithoutAppointmentInput> | AllergiesCreateWithoutAppointmentInput[] | AllergiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAppointmentInput | AllergiesCreateOrConnectWithoutAppointmentInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutAppointmentInput | AllergiesUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: AllergiesCreateManyAppointmentInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutAppointmentInput | AllergiesUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutAppointmentInput | AllergiesUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<MedicationsCreateWithoutAppointmentInput, MedicationsUncheckedCreateWithoutAppointmentInput> | MedicationsCreateWithoutAppointmentInput[] | MedicationsUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutAppointmentInput | MedicationsCreateOrConnectWithoutAppointmentInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutAppointmentInput | MedicationsUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: MedicationsCreateManyAppointmentInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutAppointmentInput | MedicationsUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutAppointmentInput | MedicationsUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutAppointmentInput, ComorbiditiesUncheckedCreateWithoutAppointmentInput> | ComorbiditiesCreateWithoutAppointmentInput[] | ComorbiditiesUncheckedCreateWithoutAppointmentInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutAppointmentInput | ComorbiditiesCreateOrConnectWithoutAppointmentInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutAppointmentInput | ComorbiditiesUpsertWithWhereUniqueWithoutAppointmentInput[]
        createMany?: ComorbiditiesCreateManyAppointmentInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutAppointmentInput | ComorbiditiesUpdateWithWhereUniqueWithoutAppointmentInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutAppointmentInput | ComorbiditiesUpdateManyWithWhereWithoutAppointmentInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput = {
        create?: XOR<EventCalendarCreateWithoutAppointmentInput, EventCalendarUncheckedCreateWithoutAppointmentInput>
        connectOrCreate?: EventCalendarCreateOrConnectWithoutAppointmentInput
        upsert?: EventCalendarUpsertWithoutAppointmentInput
        disconnect?: EventCalendarWhereInput | boolean
        delete?: EventCalendarWhereInput | boolean
        connect?: EventCalendarWhereUniqueInput
        update?: XOR<XOR<EventCalendarUpdateToOneWithWhereWithoutAppointmentInput, EventCalendarUpdateWithoutAppointmentInput>, EventCalendarUncheckedUpdateWithoutAppointmentInput>
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Patien_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Patie_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Patie_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutPatientUserInput = {
        create?: XOR<UserCreateWithoutPatientUserInput, UserUncheckedCreateWithoutPatientUserInput>
        connectOrCreate?: UserCreateOrConnectWithoutPatientUserInput
        connect?: UserWhereUniqueInput
    };
    export type AppointmentCreateNestedManyWithoutPatientInput = {
        create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
        createMany?: AppointmentCreateManyPatientInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type VaccinationsCreateNestedManyWithoutPatientInput = {
        create?: XOR<VaccinationsCreateWithoutPatientInput, VaccinationsUncheckedCreateWithoutPatientInput> | VaccinationsCreateWithoutPatientInput[] | VaccinationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutPatientInput | VaccinationsCreateOrConnectWithoutPatientInput[]
        createMany?: VaccinationsCreateManyPatientInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesCreateNestedManyWithoutPatientInput = {
        create?: XOR<AllergiesCreateWithoutPatientInput, AllergiesUncheckedCreateWithoutPatientInput> | AllergiesCreateWithoutPatientInput[] | AllergiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutPatientInput | AllergiesCreateOrConnectWithoutPatientInput[]
        createMany?: AllergiesCreateManyPatientInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsCreateNestedManyWithoutPatientInput = {
        create?: XOR<MedicationsCreateWithoutPatientInput, MedicationsUncheckedCreateWithoutPatientInput> | MedicationsCreateWithoutPatientInput[] | MedicationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutPatientInput | MedicationsCreateOrConnectWithoutPatientInput[]
        createMany?: MedicationsCreateManyPatientInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsCreateNestedManyWithoutPatientInput = {
        create?: XOR<ExamResultsCreateWithoutPatientInput, ExamResultsUncheckedCreateWithoutPatientInput> | ExamResultsCreateWithoutPatientInput[] | ExamResultsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutPatientInput | ExamResultsCreateOrConnectWithoutPatientInput[]
        createMany?: ExamResultsCreateManyPatientInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesCreateNestedManyWithoutPatientInput = {
        create?: XOR<ComorbiditiesCreateWithoutPatientInput, ComorbiditiesUncheckedCreateWithoutPatientInput> | ComorbiditiesCreateWithoutPatientInput[] | ComorbiditiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutPatientInput | ComorbiditiesCreateOrConnectWithoutPatientInput[]
        createMany?: ComorbiditiesCreateManyPatientInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesCreateNestedManyWithoutPatientInput = {
        create?: XOR<SurgeriesCreateWithoutPatientInput, SurgeriesUncheckedCreateWithoutPatientInput> | SurgeriesCreateWithoutPatientInput[] | SurgeriesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutPatientInput | SurgeriesCreateOrConnectWithoutPatientInput[]
        createMany?: SurgeriesCreateManyPatientInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansCreateNestedManyWithoutPatientInput = {
        create?: XOR<HealthPlansCreateWithoutPatientInput, HealthPlansUncheckedCreateWithoutPatientInput> | HealthPlansCreateWithoutPatientInput[] | HealthPlansUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutPatientInput | HealthPlansCreateOrConnectWithoutPatientInput[]
        createMany?: HealthPlansCreateManyPatientInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
        createMany?: AppointmentCreateManyPatientInputEnvelope
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    };
    export type VaccinationsUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<VaccinationsCreateWithoutPatientInput, VaccinationsUncheckedCreateWithoutPatientInput> | VaccinationsCreateWithoutPatientInput[] | VaccinationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutPatientInput | VaccinationsCreateOrConnectWithoutPatientInput[]
        createMany?: VaccinationsCreateManyPatientInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<AllergiesCreateWithoutPatientInput, AllergiesUncheckedCreateWithoutPatientInput> | AllergiesCreateWithoutPatientInput[] | AllergiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutPatientInput | AllergiesCreateOrConnectWithoutPatientInput[]
        createMany?: AllergiesCreateManyPatientInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<MedicationsCreateWithoutPatientInput, MedicationsUncheckedCreateWithoutPatientInput> | MedicationsCreateWithoutPatientInput[] | MedicationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutPatientInput | MedicationsCreateOrConnectWithoutPatientInput[]
        createMany?: MedicationsCreateManyPatientInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type ExamResultsUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<ExamResultsCreateWithoutPatientInput, ExamResultsUncheckedCreateWithoutPatientInput> | ExamResultsCreateWithoutPatientInput[] | ExamResultsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutPatientInput | ExamResultsCreateOrConnectWithoutPatientInput[]
        createMany?: ExamResultsCreateManyPatientInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<ComorbiditiesCreateWithoutPatientInput, ComorbiditiesUncheckedCreateWithoutPatientInput> | ComorbiditiesCreateWithoutPatientInput[] | ComorbiditiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutPatientInput | ComorbiditiesCreateOrConnectWithoutPatientInput[]
        createMany?: ComorbiditiesCreateManyPatientInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type SurgeriesUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<SurgeriesCreateWithoutPatientInput, SurgeriesUncheckedCreateWithoutPatientInput> | SurgeriesCreateWithoutPatientInput[] | SurgeriesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutPatientInput | SurgeriesCreateOrConnectWithoutPatientInput[]
        createMany?: SurgeriesCreateManyPatientInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type HealthPlansUncheckedCreateNestedManyWithoutPatientInput = {
        create?: XOR<HealthPlansCreateWithoutPatientInput, HealthPlansUncheckedCreateWithoutPatientInput> | HealthPlansCreateWithoutPatientInput[] | HealthPlansUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutPatientInput | HealthPlansCreateOrConnectWithoutPatientInput[]
        createMany?: HealthPlansCreateManyPatientInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type NullableEnumSexFieldUpdateOperationsInput = {
        set?: $Enums.Sex | null
    };
    export type NullableEnumRaceFieldUpdateOperationsInput = {
        set?: $Enums.Race | null
    };
    export type NullableEnumCivilStatusFieldUpdateOperationsInput = {
        set?: $Enums.CivilStatus | null
    };
    export type NullableEnumBloodTypeFieldUpdateOperationsInput = {
        set?: $Enums.BloodType | null
    };
    export type NullableEnumGenderIdentityFieldUpdateOperationsInput = {
        set?: $Enums.GenderIdentity | null
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Patien_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Patien_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Patie_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Patie_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Patie_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input>
    };
    export type UserUpdateOneWithoutPatientUserNestedInput = {
        create?: XOR<UserCreateWithoutPatientUserInput, UserUncheckedCreateWithoutPatientUserInput>
        connectOrCreate?: UserCreateOrConnectWithoutPatientUserInput
        upsert?: UserUpsertWithoutPatientUserInput
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientUserInput, UserUpdateWithoutPatientUserInput>, UserUncheckedUpdateWithoutPatientUserInput>
    };
    export type AppointmentUpdateManyWithoutPatientNestedInput = {
        create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: AppointmentCreateManyPatientInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type VaccinationsUpdateManyWithoutPatientNestedInput = {
        create?: XOR<VaccinationsCreateWithoutPatientInput, VaccinationsUncheckedCreateWithoutPatientInput> | VaccinationsCreateWithoutPatientInput[] | VaccinationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutPatientInput | VaccinationsCreateOrConnectWithoutPatientInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutPatientInput | VaccinationsUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: VaccinationsCreateManyPatientInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutPatientInput | VaccinationsUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutPatientInput | VaccinationsUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUpdateManyWithoutPatientNestedInput = {
        create?: XOR<AllergiesCreateWithoutPatientInput, AllergiesUncheckedCreateWithoutPatientInput> | AllergiesCreateWithoutPatientInput[] | AllergiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutPatientInput | AllergiesCreateOrConnectWithoutPatientInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutPatientInput | AllergiesUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: AllergiesCreateManyPatientInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutPatientInput | AllergiesUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutPatientInput | AllergiesUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUpdateManyWithoutPatientNestedInput = {
        create?: XOR<MedicationsCreateWithoutPatientInput, MedicationsUncheckedCreateWithoutPatientInput> | MedicationsCreateWithoutPatientInput[] | MedicationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutPatientInput | MedicationsCreateOrConnectWithoutPatientInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutPatientInput | MedicationsUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: MedicationsCreateManyPatientInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutPatientInput | MedicationsUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutPatientInput | MedicationsUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUpdateManyWithoutPatientNestedInput = {
        create?: XOR<ExamResultsCreateWithoutPatientInput, ExamResultsUncheckedCreateWithoutPatientInput> | ExamResultsCreateWithoutPatientInput[] | ExamResultsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutPatientInput | ExamResultsCreateOrConnectWithoutPatientInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutPatientInput | ExamResultsUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: ExamResultsCreateManyPatientInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutPatientInput | ExamResultsUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutPatientInput | ExamResultsUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUpdateManyWithoutPatientNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutPatientInput, ComorbiditiesUncheckedCreateWithoutPatientInput> | ComorbiditiesCreateWithoutPatientInput[] | ComorbiditiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutPatientInput | ComorbiditiesCreateOrConnectWithoutPatientInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutPatientInput | ComorbiditiesUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: ComorbiditiesCreateManyPatientInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutPatientInput | ComorbiditiesUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutPatientInput | ComorbiditiesUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUpdateManyWithoutPatientNestedInput = {
        create?: XOR<SurgeriesCreateWithoutPatientInput, SurgeriesUncheckedCreateWithoutPatientInput> | SurgeriesCreateWithoutPatientInput[] | SurgeriesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutPatientInput | SurgeriesCreateOrConnectWithoutPatientInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutPatientInput | SurgeriesUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: SurgeriesCreateManyPatientInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutPatientInput | SurgeriesUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutPatientInput | SurgeriesUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUpdateManyWithoutPatientNestedInput = {
        create?: XOR<HealthPlansCreateWithoutPatientInput, HealthPlansUncheckedCreateWithoutPatientInput> | HealthPlansCreateWithoutPatientInput[] | HealthPlansUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutPatientInput | HealthPlansCreateOrConnectWithoutPatientInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutPatientInput | HealthPlansUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: HealthPlansCreateManyPatientInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutPatientInput | HealthPlansUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutPatientInput | HealthPlansUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
        upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: AppointmentCreateManyPatientInputEnvelope
        set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
        update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    };
    export type VaccinationsUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<VaccinationsCreateWithoutPatientInput, VaccinationsUncheckedCreateWithoutPatientInput> | VaccinationsCreateWithoutPatientInput[] | VaccinationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutPatientInput | VaccinationsCreateOrConnectWithoutPatientInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutPatientInput | VaccinationsUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: VaccinationsCreateManyPatientInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutPatientInput | VaccinationsUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutPatientInput | VaccinationsUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<AllergiesCreateWithoutPatientInput, AllergiesUncheckedCreateWithoutPatientInput> | AllergiesCreateWithoutPatientInput[] | AllergiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutPatientInput | AllergiesCreateOrConnectWithoutPatientInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutPatientInput | AllergiesUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: AllergiesCreateManyPatientInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutPatientInput | AllergiesUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutPatientInput | AllergiesUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<MedicationsCreateWithoutPatientInput, MedicationsUncheckedCreateWithoutPatientInput> | MedicationsCreateWithoutPatientInput[] | MedicationsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutPatientInput | MedicationsCreateOrConnectWithoutPatientInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutPatientInput | MedicationsUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: MedicationsCreateManyPatientInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutPatientInput | MedicationsUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutPatientInput | MedicationsUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type ExamResultsUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<ExamResultsCreateWithoutPatientInput, ExamResultsUncheckedCreateWithoutPatientInput> | ExamResultsCreateWithoutPatientInput[] | ExamResultsUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutPatientInput | ExamResultsCreateOrConnectWithoutPatientInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutPatientInput | ExamResultsUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: ExamResultsCreateManyPatientInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutPatientInput | ExamResultsUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutPatientInput | ExamResultsUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutPatientInput, ComorbiditiesUncheckedCreateWithoutPatientInput> | ComorbiditiesCreateWithoutPatientInput[] | ComorbiditiesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutPatientInput | ComorbiditiesCreateOrConnectWithoutPatientInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutPatientInput | ComorbiditiesUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: ComorbiditiesCreateManyPatientInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutPatientInput | ComorbiditiesUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutPatientInput | ComorbiditiesUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type SurgeriesUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<SurgeriesCreateWithoutPatientInput, SurgeriesUncheckedCreateWithoutPatientInput> | SurgeriesCreateWithoutPatientInput[] | SurgeriesUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutPatientInput | SurgeriesCreateOrConnectWithoutPatientInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutPatientInput | SurgeriesUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: SurgeriesCreateManyPatientInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutPatientInput | SurgeriesUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutPatientInput | SurgeriesUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type HealthPlansUncheckedUpdateManyWithoutPatientNestedInput = {
        create?: XOR<HealthPlansCreateWithoutPatientInput, HealthPlansUncheckedCreateWithoutPatientInput> | HealthPlansCreateWithoutPatientInput[] | HealthPlansUncheckedCreateWithoutPatientInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutPatientInput | HealthPlansCreateOrConnectWithoutPatientInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutPatientInput | HealthPlansUpsertWithWhereUniqueWithoutPatientInput[]
        createMany?: HealthPlansCreateManyPatientInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutPatientInput | HealthPlansUpdateWithWhereUniqueWithoutPatientInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutPatientInput | HealthPlansUpdateManyWithWhereWithoutPatientInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Vacci_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutVaccinationsInput = {
        create?: XOR<PatientCreateWithoutVaccinationsInput, PatientUncheckedCreateWithoutVaccinationsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutVaccinationsInput
        connect?: PatientWhereUniqueInput
    };
    export type VaccinationsValuesCreateNestedOneWithoutVaccinationsInput = {
        create?: XOR<VaccinationsValuesCreateWithoutVaccinationsInput, VaccinationsValuesUncheckedCreateWithoutVaccinationsInput>
        connectOrCreate?: VaccinationsValuesCreateOrConnectWithoutVaccinationsInput
        connect?: VaccinationsValuesWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Vacci_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Vacci_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
    };
    export type PatientUpdateOneRequiredWithoutVaccinationsNestedInput = {
        create?: XOR<PatientCreateWithoutVaccinationsInput, PatientUncheckedCreateWithoutVaccinationsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutVaccinationsInput
        upsert?: PatientUpsertWithoutVaccinationsInput
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutVaccinationsInput, PatientUpdateWithoutVaccinationsInput>, PatientUncheckedUpdateWithoutVaccinationsInput>
    };
    export type VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput = {
        create?: XOR<VaccinationsValuesCreateWithoutVaccinationsInput, VaccinationsValuesUncheckedCreateWithoutVaccinationsInput>
        connectOrCreate?: VaccinationsValuesCreateOrConnectWithoutVaccinationsInput
        upsert?: VaccinationsValuesUpsertWithoutVaccinationsInput
        connect?: VaccinationsValuesWhereUniqueInput
        update?: XOR<XOR<VaccinationsValuesUpdateToOneWithWhereWithoutVaccinationsInput, VaccinationsValuesUpdateWithoutVaccinationsInput>, VaccinationsValuesUncheckedUpdateWithoutVaccinationsInput>
    };
    export type VaccinationsCreateNestedManyWithoutVaccinationsValuesInput = {
        create?: XOR<VaccinationsCreateWithoutVaccinationsValuesInput, VaccinationsUncheckedCreateWithoutVaccinationsValuesInput> | VaccinationsCreateWithoutVaccinationsValuesInput[] | VaccinationsUncheckedCreateWithoutVaccinationsValuesInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutVaccinationsValuesInput | VaccinationsCreateOrConnectWithoutVaccinationsValuesInput[]
        createMany?: VaccinationsCreateManyVaccinationsValuesInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type VaccinationsUncheckedCreateNestedManyWithoutVaccinationsValuesInput = {
        create?: XOR<VaccinationsCreateWithoutVaccinationsValuesInput, VaccinationsUncheckedCreateWithoutVaccinationsValuesInput> | VaccinationsCreateWithoutVaccinationsValuesInput[] | VaccinationsUncheckedCreateWithoutVaccinationsValuesInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutVaccinationsValuesInput | VaccinationsCreateOrConnectWithoutVaccinationsValuesInput[]
        createMany?: VaccinationsCreateManyVaccinationsValuesInputEnvelope
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
    };
    export type VaccinationsUpdateManyWithoutVaccinationsValuesNestedInput = {
        create?: XOR<VaccinationsCreateWithoutVaccinationsValuesInput, VaccinationsUncheckedCreateWithoutVaccinationsValuesInput> | VaccinationsCreateWithoutVaccinationsValuesInput[] | VaccinationsUncheckedCreateWithoutVaccinationsValuesInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutVaccinationsValuesInput | VaccinationsCreateOrConnectWithoutVaccinationsValuesInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutVaccinationsValuesInput | VaccinationsUpsertWithWhereUniqueWithoutVaccinationsValuesInput[]
        createMany?: VaccinationsCreateManyVaccinationsValuesInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutVaccinationsValuesInput | VaccinationsUpdateWithWhereUniqueWithoutVaccinationsValuesInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutVaccinationsValuesInput | VaccinationsUpdateManyWithWhereWithoutVaccinationsValuesInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type VaccinationsUncheckedUpdateManyWithoutVaccinationsValuesNestedInput = {
        create?: XOR<VaccinationsCreateWithoutVaccinationsValuesInput, VaccinationsUncheckedCreateWithoutVaccinationsValuesInput> | VaccinationsCreateWithoutVaccinationsValuesInput[] | VaccinationsUncheckedCreateWithoutVaccinationsValuesInput[]
        connectOrCreate?: VaccinationsCreateOrConnectWithoutVaccinationsValuesInput | VaccinationsCreateOrConnectWithoutVaccinationsValuesInput[]
        upsert?: VaccinationsUpsertWithWhereUniqueWithoutVaccinationsValuesInput | VaccinationsUpsertWithWhereUniqueWithoutVaccinationsValuesInput[]
        createMany?: VaccinationsCreateManyVaccinationsValuesInputEnvelope
        set?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        disconnect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        delete?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        connect?: VaccinationsWhereUniqueInput | VaccinationsWhereUniqueInput[]
        update?: VaccinationsUpdateWithWhereUniqueWithoutVaccinationsValuesInput | VaccinationsUpdateWithWhereUniqueWithoutVaccinationsValuesInput[]
        updateMany?: VaccinationsUpdateManyWithWhereWithoutVaccinationsValuesInput | VaccinationsUpdateManyWithWhereWithoutVaccinationsValuesInput[]
        deleteMany?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Aller_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Aller_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutAllergiesInput = {
        create?: XOR<PatientCreateWithoutAllergiesInput, PatientUncheckedCreateWithoutAllergiesInput>
        connectOrCreate?: PatientCreateOrConnectWithoutAllergiesInput
        connect?: PatientWhereUniqueInput
    };
    export type AllergiesValuesCreateNestedOneWithoutAllergiesInput = {
        create?: XOR<AllergiesValuesCreateWithoutAllergiesInput, AllergiesValuesUncheckedCreateWithoutAllergiesInput>
        connectOrCreate?: AllergiesValuesCreateOrConnectWithoutAllergiesInput
        connect?: AllergiesValuesWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutAllergiesInput = {
        create?: XOR<AppointmentCreateWithoutAllergiesInput, AppointmentUncheckedCreateWithoutAllergiesInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutAllergiesInput
        connect?: AppointmentWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Aller_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Aller_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Aller_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input>
    };
    export type PatientUpdateOneWithoutAllergiesNestedInput = {
        create?: XOR<PatientCreateWithoutAllergiesInput, PatientUncheckedCreateWithoutAllergiesInput>
        connectOrCreate?: PatientCreateOrConnectWithoutAllergiesInput
        upsert?: PatientUpsertWithoutAllergiesInput
        disconnect?: PatientWhereInput | boolean
        delete?: PatientWhereInput | boolean
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAllergiesInput, PatientUpdateWithoutAllergiesInput>, PatientUncheckedUpdateWithoutAllergiesInput>
    };
    export type AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput = {
        create?: XOR<AllergiesValuesCreateWithoutAllergiesInput, AllergiesValuesUncheckedCreateWithoutAllergiesInput>
        connectOrCreate?: AllergiesValuesCreateOrConnectWithoutAllergiesInput
        upsert?: AllergiesValuesUpsertWithoutAllergiesInput
        connect?: AllergiesValuesWhereUniqueInput
        update?: XOR<XOR<AllergiesValuesUpdateToOneWithWhereWithoutAllergiesInput, AllergiesValuesUpdateWithoutAllergiesInput>, AllergiesValuesUncheckedUpdateWithoutAllergiesInput>
    };
    export type AppointmentUpdateOneWithoutAllergiesNestedInput = {
        create?: XOR<AppointmentCreateWithoutAllergiesInput, AppointmentUncheckedCreateWithoutAllergiesInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutAllergiesInput
        upsert?: AppointmentUpsertWithoutAllergiesInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutAllergiesInput, AppointmentUpdateWithoutAllergiesInput>, AppointmentUncheckedUpdateWithoutAllergiesInput>
    };
    export type AllergiesCreateNestedManyWithoutAllergiesValuesInput = {
        create?: XOR<AllergiesCreateWithoutAllergiesValuesInput, AllergiesUncheckedCreateWithoutAllergiesValuesInput> | AllergiesCreateWithoutAllergiesValuesInput[] | AllergiesUncheckedCreateWithoutAllergiesValuesInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAllergiesValuesInput | AllergiesCreateOrConnectWithoutAllergiesValuesInput[]
        createMany?: AllergiesCreateManyAllergiesValuesInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type AllergiesUncheckedCreateNestedManyWithoutAllergiesValuesInput = {
        create?: XOR<AllergiesCreateWithoutAllergiesValuesInput, AllergiesUncheckedCreateWithoutAllergiesValuesInput> | AllergiesCreateWithoutAllergiesValuesInput[] | AllergiesUncheckedCreateWithoutAllergiesValuesInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAllergiesValuesInput | AllergiesCreateOrConnectWithoutAllergiesValuesInput[]
        createMany?: AllergiesCreateManyAllergiesValuesInputEnvelope
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
    };
    export type AllergiesUpdateManyWithoutAllergiesValuesNestedInput = {
        create?: XOR<AllergiesCreateWithoutAllergiesValuesInput, AllergiesUncheckedCreateWithoutAllergiesValuesInput> | AllergiesCreateWithoutAllergiesValuesInput[] | AllergiesUncheckedCreateWithoutAllergiesValuesInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAllergiesValuesInput | AllergiesCreateOrConnectWithoutAllergiesValuesInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutAllergiesValuesInput | AllergiesUpsertWithWhereUniqueWithoutAllergiesValuesInput[]
        createMany?: AllergiesCreateManyAllergiesValuesInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutAllergiesValuesInput | AllergiesUpdateWithWhereUniqueWithoutAllergiesValuesInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutAllergiesValuesInput | AllergiesUpdateManyWithWhereWithoutAllergiesValuesInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type AllergiesUncheckedUpdateManyWithoutAllergiesValuesNestedInput = {
        create?: XOR<AllergiesCreateWithoutAllergiesValuesInput, AllergiesUncheckedCreateWithoutAllergiesValuesInput> | AllergiesCreateWithoutAllergiesValuesInput[] | AllergiesUncheckedCreateWithoutAllergiesValuesInput[]
        connectOrCreate?: AllergiesCreateOrConnectWithoutAllergiesValuesInput | AllergiesCreateOrConnectWithoutAllergiesValuesInput[]
        upsert?: AllergiesUpsertWithWhereUniqueWithoutAllergiesValuesInput | AllergiesUpsertWithWhereUniqueWithoutAllergiesValuesInput[]
        createMany?: AllergiesCreateManyAllergiesValuesInputEnvelope
        set?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        disconnect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        delete?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        connect?: AllergiesWhereUniqueInput | AllergiesWhereUniqueInput[]
        update?: AllergiesUpdateWithWhereUniqueWithoutAllergiesValuesInput | AllergiesUpdateWithWhereUniqueWithoutAllergiesValuesInput[]
        updateMany?: AllergiesUpdateManyWithWhereWithoutAllergiesValuesInput | AllergiesUpdateManyWithWhereWithoutAllergiesValuesInput[]
        deleteMany?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Medica_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Medic_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Medic_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutMedicationsInput = {
        create?: XOR<PatientCreateWithoutMedicationsInput, PatientUncheckedCreateWithoutMedicationsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutMedicationsInput
        connect?: PatientWhereUniqueInput
    };
    export type MedicationsValuesCreateNestedOneWithoutMedicationsInput = {
        create?: XOR<MedicationsValuesCreateWithoutMedicationsInput, MedicationsValuesUncheckedCreateWithoutMedicationsInput>
        connectOrCreate?: MedicationsValuesCreateOrConnectWithoutMedicationsInput
        connect?: MedicationsValuesWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutMedicationsInput = {
        create?: XOR<AppointmentCreateWithoutMedicationsInput, AppointmentUncheckedCreateWithoutMedicationsInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutMedicationsInput
        connect?: AppointmentWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Medica_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Medica_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Medic_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Medic_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Medic_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input>
    };
    export type PatientUpdateOneWithoutMedicationsNestedInput = {
        create?: XOR<PatientCreateWithoutMedicationsInput, PatientUncheckedCreateWithoutMedicationsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutMedicationsInput
        upsert?: PatientUpsertWithoutMedicationsInput
        disconnect?: PatientWhereInput | boolean
        delete?: PatientWhereInput | boolean
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMedicationsInput, PatientUpdateWithoutMedicationsInput>, PatientUncheckedUpdateWithoutMedicationsInput>
    };
    export type MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput = {
        create?: XOR<MedicationsValuesCreateWithoutMedicationsInput, MedicationsValuesUncheckedCreateWithoutMedicationsInput>
        connectOrCreate?: MedicationsValuesCreateOrConnectWithoutMedicationsInput
        upsert?: MedicationsValuesUpsertWithoutMedicationsInput
        connect?: MedicationsValuesWhereUniqueInput
        update?: XOR<XOR<MedicationsValuesUpdateToOneWithWhereWithoutMedicationsInput, MedicationsValuesUpdateWithoutMedicationsInput>, MedicationsValuesUncheckedUpdateWithoutMedicationsInput>
    };
    export type AppointmentUpdateOneWithoutMedicationsNestedInput = {
        create?: XOR<AppointmentCreateWithoutMedicationsInput, AppointmentUncheckedCreateWithoutMedicationsInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutMedicationsInput
        upsert?: AppointmentUpsertWithoutMedicationsInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutMedicationsInput, AppointmentUpdateWithoutMedicationsInput>, AppointmentUncheckedUpdateWithoutMedicationsInput>
    };
    export type MedicationsCreateNestedManyWithoutMedicationsValuesInput = {
        create?: XOR<MedicationsCreateWithoutMedicationsValuesInput, MedicationsUncheckedCreateWithoutMedicationsValuesInput> | MedicationsCreateWithoutMedicationsValuesInput[] | MedicationsUncheckedCreateWithoutMedicationsValuesInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutMedicationsValuesInput | MedicationsCreateOrConnectWithoutMedicationsValuesInput[]
        createMany?: MedicationsCreateManyMedicationsValuesInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type MedicationsUncheckedCreateNestedManyWithoutMedicationsValuesInput = {
        create?: XOR<MedicationsCreateWithoutMedicationsValuesInput, MedicationsUncheckedCreateWithoutMedicationsValuesInput> | MedicationsCreateWithoutMedicationsValuesInput[] | MedicationsUncheckedCreateWithoutMedicationsValuesInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutMedicationsValuesInput | MedicationsCreateOrConnectWithoutMedicationsValuesInput[]
        createMany?: MedicationsCreateManyMedicationsValuesInputEnvelope
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
    };
    export type MedicationsUpdateManyWithoutMedicationsValuesNestedInput = {
        create?: XOR<MedicationsCreateWithoutMedicationsValuesInput, MedicationsUncheckedCreateWithoutMedicationsValuesInput> | MedicationsCreateWithoutMedicationsValuesInput[] | MedicationsUncheckedCreateWithoutMedicationsValuesInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutMedicationsValuesInput | MedicationsCreateOrConnectWithoutMedicationsValuesInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutMedicationsValuesInput | MedicationsUpsertWithWhereUniqueWithoutMedicationsValuesInput[]
        createMany?: MedicationsCreateManyMedicationsValuesInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutMedicationsValuesInput | MedicationsUpdateWithWhereUniqueWithoutMedicationsValuesInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutMedicationsValuesInput | MedicationsUpdateManyWithWhereWithoutMedicationsValuesInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type MedicationsUncheckedUpdateManyWithoutMedicationsValuesNestedInput = {
        create?: XOR<MedicationsCreateWithoutMedicationsValuesInput, MedicationsUncheckedCreateWithoutMedicationsValuesInput> | MedicationsCreateWithoutMedicationsValuesInput[] | MedicationsUncheckedCreateWithoutMedicationsValuesInput[]
        connectOrCreate?: MedicationsCreateOrConnectWithoutMedicationsValuesInput | MedicationsCreateOrConnectWithoutMedicationsValuesInput[]
        upsert?: MedicationsUpsertWithWhereUniqueWithoutMedicationsValuesInput | MedicationsUpsertWithWhereUniqueWithoutMedicationsValuesInput[]
        createMany?: MedicationsCreateManyMedicationsValuesInputEnvelope
        set?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        disconnect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        delete?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        connect?: MedicationsWhereUniqueInput | MedicationsWhereUniqueInput[]
        update?: MedicationsUpdateWithWhereUniqueWithoutMedicationsValuesInput | MedicationsUpdateWithWhereUniqueWithoutMedicationsValuesInput[]
        updateMany?: MedicationsUpdateManyWithWhereWithoutMedicationsValuesInput | MedicationsUpdateManyWithWhereWithoutMedicationsValuesInput[]
        deleteMany?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_ExamR_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutExamResultsInput = {
        create?: XOR<PatientCreateWithoutExamResultsInput, PatientUncheckedCreateWithoutExamResultsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutExamResultsInput
        connect?: PatientWhereUniqueInput
    };
    export type ExamResultsValuesCreateNestedOneWithoutExamResultsInput = {
        create?: XOR<ExamResultsValuesCreateWithoutExamResultsInput, ExamResultsValuesUncheckedCreateWithoutExamResultsInput>
        connectOrCreate?: ExamResultsValuesCreateOrConnectWithoutExamResultsInput
        connect?: ExamResultsValuesWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_ExamR_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_ExamR_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
    };
    export type PatientUpdateOneRequiredWithoutExamResultsNestedInput = {
        create?: XOR<PatientCreateWithoutExamResultsInput, PatientUncheckedCreateWithoutExamResultsInput>
        connectOrCreate?: PatientCreateOrConnectWithoutExamResultsInput
        upsert?: PatientUpsertWithoutExamResultsInput
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutExamResultsInput, PatientUpdateWithoutExamResultsInput>, PatientUncheckedUpdateWithoutExamResultsInput>
    };
    export type ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput = {
        create?: XOR<ExamResultsValuesCreateWithoutExamResultsInput, ExamResultsValuesUncheckedCreateWithoutExamResultsInput>
        connectOrCreate?: ExamResultsValuesCreateOrConnectWithoutExamResultsInput
        upsert?: ExamResultsValuesUpsertWithoutExamResultsInput
        connect?: ExamResultsValuesWhereUniqueInput
        update?: XOR<XOR<ExamResultsValuesUpdateToOneWithWhereWithoutExamResultsInput, ExamResultsValuesUpdateWithoutExamResultsInput>, ExamResultsValuesUncheckedUpdateWithoutExamResultsInput>
    };
    export type ExamResultsCreateNestedManyWithoutExamResultsValuesInput = {
        create?: XOR<ExamResultsCreateWithoutExamResultsValuesInput, ExamResultsUncheckedCreateWithoutExamResultsValuesInput> | ExamResultsCreateWithoutExamResultsValuesInput[] | ExamResultsUncheckedCreateWithoutExamResultsValuesInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutExamResultsValuesInput | ExamResultsCreateOrConnectWithoutExamResultsValuesInput[]
        createMany?: ExamResultsCreateManyExamResultsValuesInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ExamResultsUncheckedCreateNestedManyWithoutExamResultsValuesInput = {
        create?: XOR<ExamResultsCreateWithoutExamResultsValuesInput, ExamResultsUncheckedCreateWithoutExamResultsValuesInput> | ExamResultsCreateWithoutExamResultsValuesInput[] | ExamResultsUncheckedCreateWithoutExamResultsValuesInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutExamResultsValuesInput | ExamResultsCreateOrConnectWithoutExamResultsValuesInput[]
        createMany?: ExamResultsCreateManyExamResultsValuesInputEnvelope
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
    };
    export type ExamResultsUpdateManyWithoutExamResultsValuesNestedInput = {
        create?: XOR<ExamResultsCreateWithoutExamResultsValuesInput, ExamResultsUncheckedCreateWithoutExamResultsValuesInput> | ExamResultsCreateWithoutExamResultsValuesInput[] | ExamResultsUncheckedCreateWithoutExamResultsValuesInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutExamResultsValuesInput | ExamResultsCreateOrConnectWithoutExamResultsValuesInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutExamResultsValuesInput | ExamResultsUpsertWithWhereUniqueWithoutExamResultsValuesInput[]
        createMany?: ExamResultsCreateManyExamResultsValuesInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutExamResultsValuesInput | ExamResultsUpdateWithWhereUniqueWithoutExamResultsValuesInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutExamResultsValuesInput | ExamResultsUpdateManyWithWhereWithoutExamResultsValuesInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type ExamResultsUncheckedUpdateManyWithoutExamResultsValuesNestedInput = {
        create?: XOR<ExamResultsCreateWithoutExamResultsValuesInput, ExamResultsUncheckedCreateWithoutExamResultsValuesInput> | ExamResultsCreateWithoutExamResultsValuesInput[] | ExamResultsUncheckedCreateWithoutExamResultsValuesInput[]
        connectOrCreate?: ExamResultsCreateOrConnectWithoutExamResultsValuesInput | ExamResultsCreateOrConnectWithoutExamResultsValuesInput[]
        upsert?: ExamResultsUpsertWithWhereUniqueWithoutExamResultsValuesInput | ExamResultsUpsertWithWhereUniqueWithoutExamResultsValuesInput[]
        createMany?: ExamResultsCreateManyExamResultsValuesInputEnvelope
        set?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        disconnect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        delete?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        connect?: ExamResultsWhereUniqueInput | ExamResultsWhereUniqueInput[]
        update?: ExamResultsUpdateWithWhereUniqueWithoutExamResultsValuesInput | ExamResultsUpdateWithWhereUniqueWithoutExamResultsValuesInput[]
        updateMany?: ExamResultsUpdateManyWithWhereWithoutExamResultsValuesInput | ExamResultsUpdateManyWithWhereWithoutExamResultsValuesInput[]
        deleteMany?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Comor_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Comor_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutComorbiditiesInput = {
        create?: XOR<PatientCreateWithoutComorbiditiesInput, PatientUncheckedCreateWithoutComorbiditiesInput>
        connectOrCreate?: PatientCreateOrConnectWithoutComorbiditiesInput
        connect?: PatientWhereUniqueInput
    };
    export type ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput = {
        create?: XOR<ComorbiditiesValuesCreateWithoutComorbiditiesInput, ComorbiditiesValuesUncheckedCreateWithoutComorbiditiesInput>
        connectOrCreate?: ComorbiditiesValuesCreateOrConnectWithoutComorbiditiesInput
        connect?: ComorbiditiesValuesWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutComorbiditiesInput = {
        create?: XOR<AppointmentCreateWithoutComorbiditiesInput, AppointmentUncheckedCreateWithoutComorbiditiesInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutComorbiditiesInput
        connect?: AppointmentWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Comor_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Comor_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Comor_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input>
    };
    export type PatientUpdateOneWithoutComorbiditiesNestedInput = {
        create?: XOR<PatientCreateWithoutComorbiditiesInput, PatientUncheckedCreateWithoutComorbiditiesInput>
        connectOrCreate?: PatientCreateOrConnectWithoutComorbiditiesInput
        upsert?: PatientUpsertWithoutComorbiditiesInput
        disconnect?: PatientWhereInput | boolean
        delete?: PatientWhereInput | boolean
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutComorbiditiesInput, PatientUpdateWithoutComorbiditiesInput>, PatientUncheckedUpdateWithoutComorbiditiesInput>
    };
    export type ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput = {
        create?: XOR<ComorbiditiesValuesCreateWithoutComorbiditiesInput, ComorbiditiesValuesUncheckedCreateWithoutComorbiditiesInput>
        connectOrCreate?: ComorbiditiesValuesCreateOrConnectWithoutComorbiditiesInput
        upsert?: ComorbiditiesValuesUpsertWithoutComorbiditiesInput
        connect?: ComorbiditiesValuesWhereUniqueInput
        update?: XOR<XOR<ComorbiditiesValuesUpdateToOneWithWhereWithoutComorbiditiesInput, ComorbiditiesValuesUpdateWithoutComorbiditiesInput>, ComorbiditiesValuesUncheckedUpdateWithoutComorbiditiesInput>
    };
    export type AppointmentUpdateOneWithoutComorbiditiesNestedInput = {
        create?: XOR<AppointmentCreateWithoutComorbiditiesInput, AppointmentUncheckedCreateWithoutComorbiditiesInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutComorbiditiesInput
        upsert?: AppointmentUpsertWithoutComorbiditiesInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutComorbiditiesInput, AppointmentUpdateWithoutComorbiditiesInput>, AppointmentUncheckedUpdateWithoutComorbiditiesInput>
    };
    export type ComorbiditiesCreateNestedManyWithoutComorbiditiesValuesInput = {
        create?: XOR<ComorbiditiesCreateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput> | ComorbiditiesCreateWithoutComorbiditiesValuesInput[] | ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput | ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput[]
        createMany?: ComorbiditiesCreateManyComorbiditiesValuesInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type ComorbiditiesUncheckedCreateNestedManyWithoutComorbiditiesValuesInput = {
        create?: XOR<ComorbiditiesCreateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput> | ComorbiditiesCreateWithoutComorbiditiesValuesInput[] | ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput | ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput[]
        createMany?: ComorbiditiesCreateManyComorbiditiesValuesInputEnvelope
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
    };
    export type ComorbiditiesUpdateManyWithoutComorbiditiesValuesNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput> | ComorbiditiesCreateWithoutComorbiditiesValuesInput[] | ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput | ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutComorbiditiesValuesInput | ComorbiditiesUpsertWithWhereUniqueWithoutComorbiditiesValuesInput[]
        createMany?: ComorbiditiesCreateManyComorbiditiesValuesInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutComorbiditiesValuesInput | ComorbiditiesUpdateWithWhereUniqueWithoutComorbiditiesValuesInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutComorbiditiesValuesInput | ComorbiditiesUpdateManyWithWhereWithoutComorbiditiesValuesInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutComorbiditiesValuesNestedInput = {
        create?: XOR<ComorbiditiesCreateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput> | ComorbiditiesCreateWithoutComorbiditiesValuesInput[] | ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput[]
        connectOrCreate?: ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput | ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput[]
        upsert?: ComorbiditiesUpsertWithWhereUniqueWithoutComorbiditiesValuesInput | ComorbiditiesUpsertWithWhereUniqueWithoutComorbiditiesValuesInput[]
        createMany?: ComorbiditiesCreateManyComorbiditiesValuesInputEnvelope
        set?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        disconnect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        delete?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        connect?: ComorbiditiesWhereUniqueInput | ComorbiditiesWhereUniqueInput[]
        update?: ComorbiditiesUpdateWithWhereUniqueWithoutComorbiditiesValuesInput | ComorbiditiesUpdateWithWhereUniqueWithoutComorbiditiesValuesInput[]
        updateMany?: ComorbiditiesUpdateManyWithWhereWithoutComorbiditiesValuesInput | ComorbiditiesUpdateManyWithWhereWithoutComorbiditiesValuesInput[]
        deleteMany?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Surger_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Surge_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Surge_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutSurgeriesInput = {
        create?: XOR<PatientCreateWithoutSurgeriesInput, PatientUncheckedCreateWithoutSurgeriesInput>
        connectOrCreate?: PatientCreateOrConnectWithoutSurgeriesInput
        connect?: PatientWhereUniqueInput
    };
    export type SurgeriesValuesCreateNestedOneWithoutSurgeriesInput = {
        create?: XOR<SurgeriesValuesCreateWithoutSurgeriesInput, SurgeriesValuesUncheckedCreateWithoutSurgeriesInput>
        connectOrCreate?: SurgeriesValuesCreateOrConnectWithoutSurgeriesInput
        connect?: SurgeriesValuesWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Surger_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Surger_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Surge_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Surge_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Surge_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input>
    };
    export type PatientUpdateOneRequiredWithoutSurgeriesNestedInput = {
        create?: XOR<PatientCreateWithoutSurgeriesInput, PatientUncheckedCreateWithoutSurgeriesInput>
        connectOrCreate?: PatientCreateOrConnectWithoutSurgeriesInput
        upsert?: PatientUpsertWithoutSurgeriesInput
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutSurgeriesInput, PatientUpdateWithoutSurgeriesInput>, PatientUncheckedUpdateWithoutSurgeriesInput>
    };
    export type SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput = {
        create?: XOR<SurgeriesValuesCreateWithoutSurgeriesInput, SurgeriesValuesUncheckedCreateWithoutSurgeriesInput>
        connectOrCreate?: SurgeriesValuesCreateOrConnectWithoutSurgeriesInput
        upsert?: SurgeriesValuesUpsertWithoutSurgeriesInput
        connect?: SurgeriesValuesWhereUniqueInput
        update?: XOR<XOR<SurgeriesValuesUpdateToOneWithWhereWithoutSurgeriesInput, SurgeriesValuesUpdateWithoutSurgeriesInput>, SurgeriesValuesUncheckedUpdateWithoutSurgeriesInput>
    };
    export type SurgeriesCreateNestedManyWithoutSurgeriesValuesInput = {
        create?: XOR<SurgeriesCreateWithoutSurgeriesValuesInput, SurgeriesUncheckedCreateWithoutSurgeriesValuesInput> | SurgeriesCreateWithoutSurgeriesValuesInput[] | SurgeriesUncheckedCreateWithoutSurgeriesValuesInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutSurgeriesValuesInput | SurgeriesCreateOrConnectWithoutSurgeriesValuesInput[]
        createMany?: SurgeriesCreateManySurgeriesValuesInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type SurgeriesUncheckedCreateNestedManyWithoutSurgeriesValuesInput = {
        create?: XOR<SurgeriesCreateWithoutSurgeriesValuesInput, SurgeriesUncheckedCreateWithoutSurgeriesValuesInput> | SurgeriesCreateWithoutSurgeriesValuesInput[] | SurgeriesUncheckedCreateWithoutSurgeriesValuesInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutSurgeriesValuesInput | SurgeriesCreateOrConnectWithoutSurgeriesValuesInput[]
        createMany?: SurgeriesCreateManySurgeriesValuesInputEnvelope
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
    };
    export type SurgeriesUpdateManyWithoutSurgeriesValuesNestedInput = {
        create?: XOR<SurgeriesCreateWithoutSurgeriesValuesInput, SurgeriesUncheckedCreateWithoutSurgeriesValuesInput> | SurgeriesCreateWithoutSurgeriesValuesInput[] | SurgeriesUncheckedCreateWithoutSurgeriesValuesInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutSurgeriesValuesInput | SurgeriesCreateOrConnectWithoutSurgeriesValuesInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutSurgeriesValuesInput | SurgeriesUpsertWithWhereUniqueWithoutSurgeriesValuesInput[]
        createMany?: SurgeriesCreateManySurgeriesValuesInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutSurgeriesValuesInput | SurgeriesUpdateWithWhereUniqueWithoutSurgeriesValuesInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutSurgeriesValuesInput | SurgeriesUpdateManyWithWhereWithoutSurgeriesValuesInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type SurgeriesUncheckedUpdateManyWithoutSurgeriesValuesNestedInput = {
        create?: XOR<SurgeriesCreateWithoutSurgeriesValuesInput, SurgeriesUncheckedCreateWithoutSurgeriesValuesInput> | SurgeriesCreateWithoutSurgeriesValuesInput[] | SurgeriesUncheckedCreateWithoutSurgeriesValuesInput[]
        connectOrCreate?: SurgeriesCreateOrConnectWithoutSurgeriesValuesInput | SurgeriesCreateOrConnectWithoutSurgeriesValuesInput[]
        upsert?: SurgeriesUpsertWithWhereUniqueWithoutSurgeriesValuesInput | SurgeriesUpsertWithWhereUniqueWithoutSurgeriesValuesInput[]
        createMany?: SurgeriesCreateManySurgeriesValuesInputEnvelope
        set?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        disconnect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        delete?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        connect?: SurgeriesWhereUniqueInput | SurgeriesWhereUniqueInput[]
        update?: SurgeriesUpdateWithWhereUniqueWithoutSurgeriesValuesInput | SurgeriesUpdateWithWhereUniqueWithoutSurgeriesValuesInput[]
        updateMany?: SurgeriesUpdateManyWithWhereWithoutSurgeriesValuesInput | SurgeriesUpdateManyWithWhereWithoutSurgeriesValuesInput[]
        deleteMany?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Health_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Health_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Health_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Health_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Healt_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Healt_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type PatientCreateNestedOneWithoutHealthPlansInput = {
        create?: XOR<PatientCreateWithoutHealthPlansInput, PatientUncheckedCreateWithoutHealthPlansInput>
        connectOrCreate?: PatientCreateOrConnectWithoutHealthPlansInput
        connect?: PatientWhereUniqueInput
    };
    export type HealthPlansValuesCreateNestedOneWithoutHealthPlansInput = {
        create?: XOR<HealthPlansValuesCreateWithoutHealthPlansInput, HealthPlansValuesUncheckedCreateWithoutHealthPlansInput>
        connectOrCreate?: HealthPlansValuesCreateOrConnectWithoutHealthPlansInput
        connect?: HealthPlansValuesWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Health_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Health_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Health_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Health_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Health_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Health_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Health_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Healt_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Healt_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Healt_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input>
    };
    export type PatientUpdateOneRequiredWithoutHealthPlansNestedInput = {
        create?: XOR<PatientCreateWithoutHealthPlansInput, PatientUncheckedCreateWithoutHealthPlansInput>
        connectOrCreate?: PatientCreateOrConnectWithoutHealthPlansInput
        upsert?: PatientUpsertWithoutHealthPlansInput
        connect?: PatientWhereUniqueInput
        update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutHealthPlansInput, PatientUpdateWithoutHealthPlansInput>, PatientUncheckedUpdateWithoutHealthPlansInput>
    };
    export type HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput = {
        create?: XOR<HealthPlansValuesCreateWithoutHealthPlansInput, HealthPlansValuesUncheckedCreateWithoutHealthPlansInput>
        connectOrCreate?: HealthPlansValuesCreateOrConnectWithoutHealthPlansInput
        upsert?: HealthPlansValuesUpsertWithoutHealthPlansInput
        connect?: HealthPlansValuesWhereUniqueInput
        update?: XOR<XOR<HealthPlansValuesUpdateToOneWithWhereWithoutHealthPlansInput, HealthPlansValuesUpdateWithoutHealthPlansInput>, HealthPlansValuesUncheckedUpdateWithoutHealthPlansInput>
    };
    export type HealthPlansCreateNestedManyWithoutHealthPlansValuesInput = {
        create?: XOR<HealthPlansCreateWithoutHealthPlansValuesInput, HealthPlansUncheckedCreateWithoutHealthPlansValuesInput> | HealthPlansCreateWithoutHealthPlansValuesInput[] | HealthPlansUncheckedCreateWithoutHealthPlansValuesInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutHealthPlansValuesInput | HealthPlansCreateOrConnectWithoutHealthPlansValuesInput[]
        createMany?: HealthPlansCreateManyHealthPlansValuesInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type HealthPlansUncheckedCreateNestedManyWithoutHealthPlansValuesInput = {
        create?: XOR<HealthPlansCreateWithoutHealthPlansValuesInput, HealthPlansUncheckedCreateWithoutHealthPlansValuesInput> | HealthPlansCreateWithoutHealthPlansValuesInput[] | HealthPlansUncheckedCreateWithoutHealthPlansValuesInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutHealthPlansValuesInput | HealthPlansCreateOrConnectWithoutHealthPlansValuesInput[]
        createMany?: HealthPlansCreateManyHealthPlansValuesInputEnvelope
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
    };
    export type HealthPlansUpdateManyWithoutHealthPlansValuesNestedInput = {
        create?: XOR<HealthPlansCreateWithoutHealthPlansValuesInput, HealthPlansUncheckedCreateWithoutHealthPlansValuesInput> | HealthPlansCreateWithoutHealthPlansValuesInput[] | HealthPlansUncheckedCreateWithoutHealthPlansValuesInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutHealthPlansValuesInput | HealthPlansCreateOrConnectWithoutHealthPlansValuesInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutHealthPlansValuesInput | HealthPlansUpsertWithWhereUniqueWithoutHealthPlansValuesInput[]
        createMany?: HealthPlansCreateManyHealthPlansValuesInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutHealthPlansValuesInput | HealthPlansUpdateWithWhereUniqueWithoutHealthPlansValuesInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutHealthPlansValuesInput | HealthPlansUpdateManyWithWhereWithoutHealthPlansValuesInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type HealthPlansUncheckedUpdateManyWithoutHealthPlansValuesNestedInput = {
        create?: XOR<HealthPlansCreateWithoutHealthPlansValuesInput, HealthPlansUncheckedCreateWithoutHealthPlansValuesInput> | HealthPlansCreateWithoutHealthPlansValuesInput[] | HealthPlansUncheckedCreateWithoutHealthPlansValuesInput[]
        connectOrCreate?: HealthPlansCreateOrConnectWithoutHealthPlansValuesInput | HealthPlansCreateOrConnectWithoutHealthPlansValuesInput[]
        upsert?: HealthPlansUpsertWithWhereUniqueWithoutHealthPlansValuesInput | HealthPlansUpsertWithWhereUniqueWithoutHealthPlansValuesInput[]
        createMany?: HealthPlansCreateManyHealthPlansValuesInputEnvelope
        set?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        disconnect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        delete?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        connect?: HealthPlansWhereUniqueInput | HealthPlansWhereUniqueInput[]
        update?: HealthPlansUpdateWithWhereUniqueWithoutHealthPlansValuesInput | HealthPlansUpdateWithWhereUniqueWithoutHealthPlansValuesInput[]
        updateMany?: HealthPlansUpdateManyWithWhereWithoutHealthPlansValuesInput | HealthPlansUpdateManyWithWhereWithoutHealthPlansValuesInput[]
        deleteMany?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Defau_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Defau_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_Defaul_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Defaul_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Defaul_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Defau_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Defau_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Defau_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Defau_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input>
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_EventC_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        connect?: UserWhereUniqueInput
    };
    export type UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        connect?: UserWhereUniqueInput
    };
    export type OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Event_0Input = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Event_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Event_0Input
        connect?: OrganizationWhereUniqueInput
    };
    export type AppointmentCreateNestedOneWithoutEventCalendarInput = {
        create?: XOR<AppointmentCreateWithoutEventCalendarInput, AppointmentUncheckedCreateWithoutEventCalendarInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutEventCalendarInput
        connect?: AppointmentWhereUniqueInput
    };
    export type NullableEnumEventCalendarTypeFieldUpdateOperationsInput = {
        set?: $Enums.EventCalendarType | null
    };
    export type UserUpdateOneWithoutDelegate_aux_User_createdAssets_EventC_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_EventC_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_createdAssets_EventC_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_updatedAssets_EventC_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
    };
    export type UserUpdateOneWithoutDelegate_aux_User_deletedAssets_EventC_0NestedInput = {
        create?: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
        connectOrCreate?: UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        upsert?: UserUpsertWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        disconnect?: UserWhereInput | boolean
        delete?: UserWhereInput | boolean
        connect?: UserWhereUniqueInput
        update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
    };
    export type OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Event_0NestedInput = {
        create?: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Event_0Input>
        connectOrCreate?: OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Event_0Input
        upsert?: OrganizationUpsertWithoutDelegate_aux_Organization_assets_Event_0Input
        disconnect?: OrganizationWhereInput | boolean
        delete?: OrganizationWhereInput | boolean
        connect?: OrganizationWhereUniqueInput
        update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUpdateWithoutDelegate_aux_Organization_assets_Event_0Input>, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Event_0Input>
    };
    export type AppointmentUpdateOneWithoutEventCalendarNestedInput = {
        create?: XOR<AppointmentCreateWithoutEventCalendarInput, AppointmentUncheckedCreateWithoutEventCalendarInput>
        connectOrCreate?: AppointmentCreateOrConnectWithoutEventCalendarInput
        upsert?: AppointmentUpsertWithoutEventCalendarInput
        disconnect?: AppointmentWhereInput | boolean
        delete?: AppointmentWhereInput | boolean
        connect?: AppointmentWhereUniqueInput
        update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutEventCalendarInput, AppointmentUpdateWithoutEventCalendarInput>, AppointmentUncheckedUpdateWithoutEventCalendarInput>
    };
    export type NestedStringFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel>
        in?: string[]
        notIn?: string[]
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringFilter<$PrismaModel> | string
    };
    export type NestedBoolFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel>
        not?: NestedBoolFilter<$PrismaModel> | boolean
    };
    export type NestedStringNullableFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel> | null
        in?: string[] | null
        notIn?: string[] | null
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringNullableFilter<$PrismaModel> | string | null
    };
    export type NestedDateTimeFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        in?: Date[] | string[]
        notIn?: Date[] | string[]
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeFilter<$PrismaModel> | Date | string
    };
    export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
        in?: $Enums.UserRole[] | null
        notIn?: $Enums.UserRole[] | null
        not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
    };
    export type NestedBoolNullableFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
        not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
    };
    export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
        in?: Date[] | string[] | null
        notIn?: Date[] | string[] | null
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    };
    export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel>
        in?: string[]
        notIn?: string[]
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
        _count?: NestedIntFilter<$PrismaModel>
        _min?: NestedStringFilter<$PrismaModel>
        _max?: NestedStringFilter<$PrismaModel>
    };
    export type NestedIntFilter<$PrismaModel = never> = {
        equals?: number | IntFieldRefInput<$PrismaModel>
        in?: number[]
        notIn?: number[]
        lt?: number | IntFieldRefInput<$PrismaModel>
        lte?: number | IntFieldRefInput<$PrismaModel>
        gt?: number | IntFieldRefInput<$PrismaModel>
        gte?: number | IntFieldRefInput<$PrismaModel>
        not?: NestedIntFilter<$PrismaModel> | number
    };
    export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel>
        not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
        _count?: NestedIntFilter<$PrismaModel>
        _min?: NestedBoolFilter<$PrismaModel>
        _max?: NestedBoolFilter<$PrismaModel>
    };
    export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: string | StringFieldRefInput<$PrismaModel> | null
        in?: string[] | null
        notIn?: string[] | null
        lt?: string | StringFieldRefInput<$PrismaModel>
        lte?: string | StringFieldRefInput<$PrismaModel>
        gt?: string | StringFieldRefInput<$PrismaModel>
        gte?: string | StringFieldRefInput<$PrismaModel>
        contains?: string | StringFieldRefInput<$PrismaModel>
        startsWith?: string | StringFieldRefInput<$PrismaModel>
        endsWith?: string | StringFieldRefInput<$PrismaModel>
        not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedStringNullableFilter<$PrismaModel>
        _max?: NestedStringNullableFilter<$PrismaModel>
    };
    export type NestedIntNullableFilter<$PrismaModel = never> = {
        equals?: number | IntFieldRefInput<$PrismaModel> | null
        in?: number[] | null
        notIn?: number[] | null
        lt?: number | IntFieldRefInput<$PrismaModel>
        lte?: number | IntFieldRefInput<$PrismaModel>
        gt?: number | IntFieldRefInput<$PrismaModel>
        gte?: number | IntFieldRefInput<$PrismaModel>
        not?: NestedIntNullableFilter<$PrismaModel> | number | null
    };
    export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        in?: Date[] | string[]
        notIn?: Date[] | string[]
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
        _count?: NestedIntFilter<$PrismaModel>
        _min?: NestedDateTimeFilter<$PrismaModel>
        _max?: NestedDateTimeFilter<$PrismaModel>
    };
    export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
        in?: $Enums.UserRole[] | null
        notIn?: $Enums.UserRole[] | null
        not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
        _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    };
    export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
        not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedBoolNullableFilter<$PrismaModel>
        _max?: NestedBoolNullableFilter<$PrismaModel>
    };
    export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
        in?: Date[] | string[] | null
        notIn?: Date[] | string[] | null
        lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
        not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedDateTimeNullableFilter<$PrismaModel>
        _max?: NestedDateTimeNullableFilter<$PrismaModel>
    };
    export type NestedEnumAppointmentCategoryNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentCategory | EnumAppointmentCategoryFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentCategory[] | null
        notIn?: $Enums.AppointmentCategory[] | null
        not?: NestedEnumAppointmentCategoryNullableFilter<$PrismaModel> | $Enums.AppointmentCategory | null
    };
    export type NestedEnumAppointmentStatusNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentStatus[] | null
        notIn?: $Enums.AppointmentStatus[] | null
        not?: NestedEnumAppointmentStatusNullableFilter<$PrismaModel> | $Enums.AppointmentStatus | null
    };
    export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: number | IntFieldRefInput<$PrismaModel> | null
        in?: number[] | null
        notIn?: number[] | null
        lt?: number | IntFieldRefInput<$PrismaModel>
        lte?: number | IntFieldRefInput<$PrismaModel>
        gt?: number | IntFieldRefInput<$PrismaModel>
        gte?: number | IntFieldRefInput<$PrismaModel>
        not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _avg?: NestedFloatNullableFilter<$PrismaModel>
        _sum?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedIntNullableFilter<$PrismaModel>
        _max?: NestedIntNullableFilter<$PrismaModel>
    };
    export type NestedFloatNullableFilter<$PrismaModel = never> = {
        equals?: number | FloatFieldRefInput<$PrismaModel> | null
        in?: number[] | null
        notIn?: number[] | null
        lt?: number | FloatFieldRefInput<$PrismaModel>
        lte?: number | FloatFieldRefInput<$PrismaModel>
        gt?: number | FloatFieldRefInput<$PrismaModel>
        gte?: number | FloatFieldRefInput<$PrismaModel>
        not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    };
    export type NestedEnumAppointmentCategoryNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentCategory | EnumAppointmentCategoryFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentCategory[] | null
        notIn?: $Enums.AppointmentCategory[] | null
        not?: NestedEnumAppointmentCategoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentCategory | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumAppointmentCategoryNullableFilter<$PrismaModel>
        _max?: NestedEnumAppointmentCategoryNullableFilter<$PrismaModel>
    };
    export type NestedEnumAppointmentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.AppointmentStatus[] | null
        notIn?: $Enums.AppointmentStatus[] | null
        not?: NestedEnumAppointmentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumAppointmentStatusNullableFilter<$PrismaModel>
        _max?: NestedEnumAppointmentStatusNullableFilter<$PrismaModel>
    };
    export type NestedEnumSexNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
        in?: $Enums.Sex[] | null
        notIn?: $Enums.Sex[] | null
        not?: NestedEnumSexNullableFilter<$PrismaModel> | $Enums.Sex | null
    };
    export type NestedEnumRaceNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.Race | EnumRaceFieldRefInput<$PrismaModel> | null
        in?: $Enums.Race[] | null
        notIn?: $Enums.Race[] | null
        not?: NestedEnumRaceNullableFilter<$PrismaModel> | $Enums.Race | null
    };
    export type NestedEnumCivilStatusNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.CivilStatus[] | null
        notIn?: $Enums.CivilStatus[] | null
        not?: NestedEnumCivilStatusNullableFilter<$PrismaModel> | $Enums.CivilStatus | null
    };
    export type NestedEnumBloodTypeNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.BloodType[] | null
        notIn?: $Enums.BloodType[] | null
        not?: NestedEnumBloodTypeNullableFilter<$PrismaModel> | $Enums.BloodType | null
    };
    export type NestedEnumGenderIdentityNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.GenderIdentity | EnumGenderIdentityFieldRefInput<$PrismaModel> | null
        in?: $Enums.GenderIdentity[] | null
        notIn?: $Enums.GenderIdentity[] | null
        not?: NestedEnumGenderIdentityNullableFilter<$PrismaModel> | $Enums.GenderIdentity | null
    };
    export type NestedEnumSexNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
        in?: $Enums.Sex[] | null
        notIn?: $Enums.Sex[] | null
        not?: NestedEnumSexNullableWithAggregatesFilter<$PrismaModel> | $Enums.Sex | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumSexNullableFilter<$PrismaModel>
        _max?: NestedEnumSexNullableFilter<$PrismaModel>
    };
    export type NestedEnumRaceNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.Race | EnumRaceFieldRefInput<$PrismaModel> | null
        in?: $Enums.Race[] | null
        notIn?: $Enums.Race[] | null
        not?: NestedEnumRaceNullableWithAggregatesFilter<$PrismaModel> | $Enums.Race | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumRaceNullableFilter<$PrismaModel>
        _max?: NestedEnumRaceNullableFilter<$PrismaModel>
    };
    export type NestedEnumCivilStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
        in?: $Enums.CivilStatus[] | null
        notIn?: $Enums.CivilStatus[] | null
        not?: NestedEnumCivilStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.CivilStatus | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
        _max?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
    };
    export type NestedEnumBloodTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.BloodType[] | null
        notIn?: $Enums.BloodType[] | null
        not?: NestedEnumBloodTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BloodType | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
        _max?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
    };
    export type NestedEnumGenderIdentityNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.GenderIdentity | EnumGenderIdentityFieldRefInput<$PrismaModel> | null
        in?: $Enums.GenderIdentity[] | null
        notIn?: $Enums.GenderIdentity[] | null
        not?: NestedEnumGenderIdentityNullableWithAggregatesFilter<$PrismaModel> | $Enums.GenderIdentity | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumGenderIdentityNullableFilter<$PrismaModel>
        _max?: NestedEnumGenderIdentityNullableFilter<$PrismaModel>
    };
    export type NestedEnumEventCalendarTypeNullableFilter<$PrismaModel = never> = {
        equals?: $Enums.EventCalendarType | EnumEventCalendarTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.EventCalendarType[] | null
        notIn?: $Enums.EventCalendarType[] | null
        not?: NestedEnumEventCalendarTypeNullableFilter<$PrismaModel> | $Enums.EventCalendarType | null
    };
    export type NestedEnumEventCalendarTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
        equals?: $Enums.EventCalendarType | EnumEventCalendarTypeFieldRefInput<$PrismaModel> | null
        in?: $Enums.EventCalendarType[] | null
        notIn?: $Enums.EventCalendarType[] | null
        not?: NestedEnumEventCalendarTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.EventCalendarType | null
        _count?: NestedIntNullableFilter<$PrismaModel>
        _min?: NestedEnumEventCalendarTypeNullableFilter<$PrismaModel>
        _max?: NestedEnumEventCalendarTypeNullableFilter<$PrismaModel>
    };
    export type SessionCreateWithoutUserInput = {
        id?: string
        expiresAt: Date | string
        token: string
        createdAt?: Date | string
        updatedAt?: Date | string
        ipAddress?: string | null
        userAgent?: string | null
        impersonatedBy?: string | null
        activeOrganizationId?: string | null
    };
    export type SessionUncheckedCreateWithoutUserInput = {
        id?: string
        expiresAt: Date | string
        token: string
        createdAt?: Date | string
        updatedAt?: Date | string
        ipAddress?: string | null
        userAgent?: string | null
        impersonatedBy?: string | null
        activeOrganizationId?: string | null
    };
    export type SessionCreateOrConnectWithoutUserInput = {
        where: SessionWhereUniqueInput
        create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    };
    export type SessionCreateManyUserInputEnvelope = {
        data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    };
    export type AccountCreateWithoutUserInput = {
        id?: string
        accountId: string
        providerId: string
        accessToken?: string | null
        refreshToken?: string | null
        idToken?: string | null
        accessTokenExpiresAt?: Date | string | null
        refreshTokenExpiresAt?: Date | string | null
        scope?: string | null
        password?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type AccountUncheckedCreateWithoutUserInput = {
        id?: string
        accountId: string
        providerId: string
        accessToken?: string | null
        refreshToken?: string | null
        idToken?: string | null
        accessTokenExpiresAt?: Date | string | null
        refreshTokenExpiresAt?: Date | string | null
        scope?: string | null
        password?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type AccountCreateOrConnectWithoutUserInput = {
        where: AccountWhereUniqueInput
        create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    };
    export type AccountCreateManyUserInputEnvelope = {
        data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    };
    export type MemberCreateWithoutUserInput = {
        id?: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
        organization: OrganizationCreateNestedOneWithoutMembersInput
    };
    export type MemberUncheckedCreateWithoutUserInput = {
        id?: string
        organizationId: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type MemberCreateOrConnectWithoutUserInput = {
        where: MemberWhereUniqueInput
        create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    };
    export type MemberCreateManyUserInputEnvelope = {
        data: MemberCreateManyUserInput | MemberCreateManyUserInput[]
    };
    export type InvitationCreateWithoutUserInput = {
        id?: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        organization: OrganizationCreateNestedOneWithoutInvitationsInput
    };
    export type InvitationUncheckedCreateWithoutUserInput = {
        id?: string
        organizationId: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
    };
    export type InvitationCreateOrConnectWithoutUserInput = {
        where: InvitationWhereUniqueInput
        create: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput>
    };
    export type InvitationCreateManyUserInputEnvelope = {
        data: InvitationCreateManyUserInput | InvitationCreateManyUserInput[]
    };
    export type PatientCreateWithoutUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutUserInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    };
    export type PatientCreateManyUserInputEnvelope = {
        data: PatientCreateManyUserInput | PatientCreateManyUserInput[]
    };
    export type AssetCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutUpdatedAssetsInput
        deletedByUser?: UserCreateNestedOneWithoutDeletedAssetsInput
        organization?: OrganizationCreateNestedOneWithoutAssetsInput
    };
    export type AssetUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetCreateOrConnectWithoutCreatedByUserInput = {
        where: AssetWhereUniqueInput
        create: XOR<AssetCreateWithoutCreatedByUserInput, AssetUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AssetCreateManyCreatedByUserInputEnvelope = {
        data: AssetCreateManyCreatedByUserInput | AssetCreateManyCreatedByUserInput[]
    };
    export type AssetCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutCreatedAssetsInput
        deletedByUser?: UserCreateNestedOneWithoutDeletedAssetsInput
        organization?: OrganizationCreateNestedOneWithoutAssetsInput
    };
    export type AssetUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetCreateOrConnectWithoutUpdatedByUserInput = {
        where: AssetWhereUniqueInput
        create: XOR<AssetCreateWithoutUpdatedByUserInput, AssetUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AssetCreateManyUpdatedByUserInputEnvelope = {
        data: AssetCreateManyUpdatedByUserInput | AssetCreateManyUpdatedByUserInput[]
    };
    export type AssetCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutCreatedAssetsInput
        updatedByUser?: UserCreateNestedOneWithoutUpdatedAssetsInput
        organization?: OrganizationCreateNestedOneWithoutAssetsInput
    };
    export type AssetUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetCreateOrConnectWithoutDeletedByUserInput = {
        where: AssetWhereUniqueInput
        create: XOR<AssetCreateWithoutDeletedByUserInput, AssetUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AssetCreateManyDeletedByUserInputEnvelope = {
        data: AssetCreateManyDeletedByUserInput | AssetCreateManyDeletedByUserInput[]
    };
    export type AppointmentCidCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input
        appointment: AppointmentCreateNestedOneWithoutCidsInput
        cid: CidCreateNestedOneWithoutAppointmentCidInput
    };
    export type AppointmentCidUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidCreateOrConnectWithoutCreatedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        create: XOR<AppointmentCidCreateWithoutCreatedByUserInput, AppointmentCidUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AppointmentCidCreateManyCreatedByUserInputEnvelope = {
        data: AppointmentCidCreateManyCreatedByUserInput | AppointmentCidCreateManyCreatedByUserInput[]
    };
    export type AppointmentCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutCreatedByUserInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutCreatedByUserInput, AppointmentUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AppointmentCreateManyCreatedByUserInputEnvelope = {
        data: AppointmentCreateManyCreatedByUserInput | AppointmentCreateManyCreatedByUserInput[]
    };
    export type PatientCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutCreatedByUserInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutCreatedByUserInput, PatientUncheckedCreateWithoutCreatedByUserInput>
    };
    export type PatientCreateManyCreatedByUserInputEnvelope = {
        data: PatientCreateManyCreatedByUserInput | PatientCreateManyCreatedByUserInput[]
    };
    export type VaccinationsCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input
        patient: PatientCreateNestedOneWithoutVaccinationsInput
        vaccinationsValues: VaccinationsValuesCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type VaccinationsCreateOrConnectWithoutCreatedByUserInput = {
        where: VaccinationsWhereUniqueInput
        create: XOR<VaccinationsCreateWithoutCreatedByUserInput, VaccinationsUncheckedCreateWithoutCreatedByUserInput>
    };
    export type VaccinationsCreateManyCreatedByUserInputEnvelope = {
        data: VaccinationsCreateManyCreatedByUserInput | VaccinationsCreateManyCreatedByUserInput[]
    };
    export type AllergiesCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesCreateOrConnectWithoutCreatedByUserInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutCreatedByUserInput, AllergiesUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AllergiesCreateManyCreatedByUserInputEnvelope = {
        data: AllergiesCreateManyCreatedByUserInput | AllergiesCreateManyCreatedByUserInput[]
    };
    export type MedicationsCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateOrConnectWithoutCreatedByUserInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutCreatedByUserInput, MedicationsUncheckedCreateWithoutCreatedByUserInput>
    };
    export type MedicationsCreateManyCreatedByUserInputEnvelope = {
        data: MedicationsCreateManyCreatedByUserInput | MedicationsCreateManyCreatedByUserInput[]
    };
    export type ExamResultsCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input
        patient: PatientCreateNestedOneWithoutExamResultsInput
        examResultsValues: ExamResultsValuesCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsCreateOrConnectWithoutCreatedByUserInput = {
        where: ExamResultsWhereUniqueInput
        create: XOR<ExamResultsCreateWithoutCreatedByUserInput, ExamResultsUncheckedCreateWithoutCreatedByUserInput>
    };
    export type ExamResultsCreateManyCreatedByUserInputEnvelope = {
        data: ExamResultsCreateManyCreatedByUserInput | ExamResultsCreateManyCreatedByUserInput[]
    };
    export type ComorbiditiesCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesCreateOrConnectWithoutCreatedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutCreatedByUserInput, ComorbiditiesUncheckedCreateWithoutCreatedByUserInput>
    };
    export type ComorbiditiesCreateManyCreatedByUserInputEnvelope = {
        data: ComorbiditiesCreateManyCreatedByUserInput | ComorbiditiesCreateManyCreatedByUserInput[]
    };
    export type SurgeriesCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input
        patient: PatientCreateNestedOneWithoutSurgeriesInput
        surgeriesValues: SurgeriesValuesCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type SurgeriesCreateOrConnectWithoutCreatedByUserInput = {
        where: SurgeriesWhereUniqueInput
        create: XOR<SurgeriesCreateWithoutCreatedByUserInput, SurgeriesUncheckedCreateWithoutCreatedByUserInput>
    };
    export type SurgeriesCreateManyCreatedByUserInputEnvelope = {
        data: SurgeriesCreateManyCreatedByUserInput | SurgeriesCreateManyCreatedByUserInput[]
    };
    export type HealthPlansCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input
        patient: PatientCreateNestedOneWithoutHealthPlansInput
        healthPlansValues: HealthPlansValuesCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type HealthPlansCreateOrConnectWithoutCreatedByUserInput = {
        where: HealthPlansWhereUniqueInput
        create: XOR<HealthPlansCreateWithoutCreatedByUserInput, HealthPlansUncheckedCreateWithoutCreatedByUserInput>
    };
    export type HealthPlansCreateManyCreatedByUserInputEnvelope = {
        data: HealthPlansCreateManyCreatedByUserInput | HealthPlansCreateManyCreatedByUserInput[]
    };
    export type DefaultObjectiveInformationCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        text?: string | null
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Defau_0Input
    };
    export type DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type DefaultObjectiveInformationCreateOrConnectWithoutCreatedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        create: XOR<DefaultObjectiveInformationCreateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput>
    };
    export type DefaultObjectiveInformationCreateManyCreatedByUserInputEnvelope = {
        data: DefaultObjectiveInformationCreateManyCreatedByUserInput | DefaultObjectiveInformationCreateManyCreatedByUserInput[]
    };
    export type EventCalendarCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Event_0Input
        appointment?: AppointmentCreateNestedOneWithoutEventCalendarInput
    };
    export type EventCalendarUncheckedCreateWithoutCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type EventCalendarCreateOrConnectWithoutCreatedByUserInput = {
        where: EventCalendarWhereUniqueInput
        create: XOR<EventCalendarCreateWithoutCreatedByUserInput, EventCalendarUncheckedCreateWithoutCreatedByUserInput>
    };
    export type EventCalendarCreateManyCreatedByUserInputEnvelope = {
        data: EventCalendarCreateManyCreatedByUserInput | EventCalendarCreateManyCreatedByUserInput[]
    };
    export type AppointmentCidCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input
        appointment: AppointmentCreateNestedOneWithoutCidsInput
        cid: CidCreateNestedOneWithoutAppointmentCidInput
    };
    export type AppointmentCidUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidCreateOrConnectWithoutUpdatedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        create: XOR<AppointmentCidCreateWithoutUpdatedByUserInput, AppointmentCidUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AppointmentCidCreateManyUpdatedByUserInputEnvelope = {
        data: AppointmentCidCreateManyUpdatedByUserInput | AppointmentCidCreateManyUpdatedByUserInput[]
    };
    export type AppointmentCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutUpdatedByUserInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutUpdatedByUserInput, AppointmentUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AppointmentCreateManyUpdatedByUserInputEnvelope = {
        data: AppointmentCreateManyUpdatedByUserInput | AppointmentCreateManyUpdatedByUserInput[]
    };
    export type PatientCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutUpdatedByUserInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutUpdatedByUserInput, PatientUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type PatientCreateManyUpdatedByUserInputEnvelope = {
        data: PatientCreateManyUpdatedByUserInput | PatientCreateManyUpdatedByUserInput[]
    };
    export type VaccinationsCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input
        patient: PatientCreateNestedOneWithoutVaccinationsInput
        vaccinationsValues: VaccinationsValuesCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type VaccinationsCreateOrConnectWithoutUpdatedByUserInput = {
        where: VaccinationsWhereUniqueInput
        create: XOR<VaccinationsCreateWithoutUpdatedByUserInput, VaccinationsUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type VaccinationsCreateManyUpdatedByUserInputEnvelope = {
        data: VaccinationsCreateManyUpdatedByUserInput | VaccinationsCreateManyUpdatedByUserInput[]
    };
    export type AllergiesCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesCreateOrConnectWithoutUpdatedByUserInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutUpdatedByUserInput, AllergiesUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AllergiesCreateManyUpdatedByUserInputEnvelope = {
        data: AllergiesCreateManyUpdatedByUserInput | AllergiesCreateManyUpdatedByUserInput[]
    };
    export type MedicationsCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateOrConnectWithoutUpdatedByUserInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutUpdatedByUserInput, MedicationsUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type MedicationsCreateManyUpdatedByUserInputEnvelope = {
        data: MedicationsCreateManyUpdatedByUserInput | MedicationsCreateManyUpdatedByUserInput[]
    };
    export type ExamResultsCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input
        patient: PatientCreateNestedOneWithoutExamResultsInput
        examResultsValues: ExamResultsValuesCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsCreateOrConnectWithoutUpdatedByUserInput = {
        where: ExamResultsWhereUniqueInput
        create: XOR<ExamResultsCreateWithoutUpdatedByUserInput, ExamResultsUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type ExamResultsCreateManyUpdatedByUserInputEnvelope = {
        data: ExamResultsCreateManyUpdatedByUserInput | ExamResultsCreateManyUpdatedByUserInput[]
    };
    export type ComorbiditiesCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesCreateOrConnectWithoutUpdatedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutUpdatedByUserInput, ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type ComorbiditiesCreateManyUpdatedByUserInputEnvelope = {
        data: ComorbiditiesCreateManyUpdatedByUserInput | ComorbiditiesCreateManyUpdatedByUserInput[]
    };
    export type SurgeriesCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input
        patient: PatientCreateNestedOneWithoutSurgeriesInput
        surgeriesValues: SurgeriesValuesCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type SurgeriesCreateOrConnectWithoutUpdatedByUserInput = {
        where: SurgeriesWhereUniqueInput
        create: XOR<SurgeriesCreateWithoutUpdatedByUserInput, SurgeriesUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type SurgeriesCreateManyUpdatedByUserInputEnvelope = {
        data: SurgeriesCreateManyUpdatedByUserInput | SurgeriesCreateManyUpdatedByUserInput[]
    };
    export type HealthPlansCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input
        patient: PatientCreateNestedOneWithoutHealthPlansInput
        healthPlansValues: HealthPlansValuesCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type HealthPlansCreateOrConnectWithoutUpdatedByUserInput = {
        where: HealthPlansWhereUniqueInput
        create: XOR<HealthPlansCreateWithoutUpdatedByUserInput, HealthPlansUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type HealthPlansCreateManyUpdatedByUserInputEnvelope = {
        data: HealthPlansCreateManyUpdatedByUserInput | HealthPlansCreateManyUpdatedByUserInput[]
    };
    export type DefaultObjectiveInformationCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        text?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Defau_0Input
    };
    export type DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type DefaultObjectiveInformationCreateOrConnectWithoutUpdatedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        create: XOR<DefaultObjectiveInformationCreateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type DefaultObjectiveInformationCreateManyUpdatedByUserInputEnvelope = {
        data: DefaultObjectiveInformationCreateManyUpdatedByUserInput | DefaultObjectiveInformationCreateManyUpdatedByUserInput[]
    };
    export type EventCalendarCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_EventC_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Event_0Input
        appointment?: AppointmentCreateNestedOneWithoutEventCalendarInput
    };
    export type EventCalendarUncheckedCreateWithoutUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type EventCalendarCreateOrConnectWithoutUpdatedByUserInput = {
        where: EventCalendarWhereUniqueInput
        create: XOR<EventCalendarCreateWithoutUpdatedByUserInput, EventCalendarUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type EventCalendarCreateManyUpdatedByUserInputEnvelope = {
        data: EventCalendarCreateManyUpdatedByUserInput | EventCalendarCreateManyUpdatedByUserInput[]
    };
    export type AppointmentCidCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input
        appointment: AppointmentCreateNestedOneWithoutCidsInput
        cid: CidCreateNestedOneWithoutAppointmentCidInput
    };
    export type AppointmentCidUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidCreateOrConnectWithoutDeletedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        create: XOR<AppointmentCidCreateWithoutDeletedByUserInput, AppointmentCidUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AppointmentCidCreateManyDeletedByUserInputEnvelope = {
        data: AppointmentCidCreateManyDeletedByUserInput | AppointmentCidCreateManyDeletedByUserInput[]
    };
    export type AppointmentCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutDeletedByUserInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutDeletedByUserInput, AppointmentUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AppointmentCreateManyDeletedByUserInputEnvelope = {
        data: AppointmentCreateManyDeletedByUserInput | AppointmentCreateManyDeletedByUserInput[]
    };
    export type PatientCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutDeletedByUserInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutDeletedByUserInput, PatientUncheckedCreateWithoutDeletedByUserInput>
    };
    export type PatientCreateManyDeletedByUserInputEnvelope = {
        data: PatientCreateManyDeletedByUserInput | PatientCreateManyDeletedByUserInput[]
    };
    export type VaccinationsCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input
        patient: PatientCreateNestedOneWithoutVaccinationsInput
        vaccinationsValues: VaccinationsValuesCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type VaccinationsCreateOrConnectWithoutDeletedByUserInput = {
        where: VaccinationsWhereUniqueInput
        create: XOR<VaccinationsCreateWithoutDeletedByUserInput, VaccinationsUncheckedCreateWithoutDeletedByUserInput>
    };
    export type VaccinationsCreateManyDeletedByUserInputEnvelope = {
        data: VaccinationsCreateManyDeletedByUserInput | VaccinationsCreateManyDeletedByUserInput[]
    };
    export type AllergiesCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesCreateOrConnectWithoutDeletedByUserInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutDeletedByUserInput, AllergiesUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AllergiesCreateManyDeletedByUserInputEnvelope = {
        data: AllergiesCreateManyDeletedByUserInput | AllergiesCreateManyDeletedByUserInput[]
    };
    export type MedicationsCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateOrConnectWithoutDeletedByUserInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutDeletedByUserInput, MedicationsUncheckedCreateWithoutDeletedByUserInput>
    };
    export type MedicationsCreateManyDeletedByUserInputEnvelope = {
        data: MedicationsCreateManyDeletedByUserInput | MedicationsCreateManyDeletedByUserInput[]
    };
    export type ExamResultsCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input
        patient: PatientCreateNestedOneWithoutExamResultsInput
        examResultsValues: ExamResultsValuesCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsCreateOrConnectWithoutDeletedByUserInput = {
        where: ExamResultsWhereUniqueInput
        create: XOR<ExamResultsCreateWithoutDeletedByUserInput, ExamResultsUncheckedCreateWithoutDeletedByUserInput>
    };
    export type ExamResultsCreateManyDeletedByUserInputEnvelope = {
        data: ExamResultsCreateManyDeletedByUserInput | ExamResultsCreateManyDeletedByUserInput[]
    };
    export type ComorbiditiesCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesCreateOrConnectWithoutDeletedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutDeletedByUserInput, ComorbiditiesUncheckedCreateWithoutDeletedByUserInput>
    };
    export type ComorbiditiesCreateManyDeletedByUserInputEnvelope = {
        data: ComorbiditiesCreateManyDeletedByUserInput | ComorbiditiesCreateManyDeletedByUserInput[]
    };
    export type SurgeriesCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input
        patient: PatientCreateNestedOneWithoutSurgeriesInput
        surgeriesValues: SurgeriesValuesCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type SurgeriesCreateOrConnectWithoutDeletedByUserInput = {
        where: SurgeriesWhereUniqueInput
        create: XOR<SurgeriesCreateWithoutDeletedByUserInput, SurgeriesUncheckedCreateWithoutDeletedByUserInput>
    };
    export type SurgeriesCreateManyDeletedByUserInputEnvelope = {
        data: SurgeriesCreateManyDeletedByUserInput | SurgeriesCreateManyDeletedByUserInput[]
    };
    export type HealthPlansCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input
        patient: PatientCreateNestedOneWithoutHealthPlansInput
        healthPlansValues: HealthPlansValuesCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type HealthPlansCreateOrConnectWithoutDeletedByUserInput = {
        where: HealthPlansWhereUniqueInput
        create: XOR<HealthPlansCreateWithoutDeletedByUserInput, HealthPlansUncheckedCreateWithoutDeletedByUserInput>
    };
    export type HealthPlansCreateManyDeletedByUserInputEnvelope = {
        data: HealthPlansCreateManyDeletedByUserInput | HealthPlansCreateManyDeletedByUserInput[]
    };
    export type DefaultObjectiveInformationCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        text?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Defau_0Input
    };
    export type DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type DefaultObjectiveInformationCreateOrConnectWithoutDeletedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        create: XOR<DefaultObjectiveInformationCreateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput>
    };
    export type DefaultObjectiveInformationCreateManyDeletedByUserInputEnvelope = {
        data: DefaultObjectiveInformationCreateManyDeletedByUserInput | DefaultObjectiveInformationCreateManyDeletedByUserInput[]
    };
    export type EventCalendarCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_EventC_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Event_0Input
        appointment?: AppointmentCreateNestedOneWithoutEventCalendarInput
    };
    export type EventCalendarUncheckedCreateWithoutDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type EventCalendarCreateOrConnectWithoutDeletedByUserInput = {
        where: EventCalendarWhereUniqueInput
        create: XOR<EventCalendarCreateWithoutDeletedByUserInput, EventCalendarUncheckedCreateWithoutDeletedByUserInput>
    };
    export type EventCalendarCreateManyDeletedByUserInputEnvelope = {
        data: EventCalendarCreateManyDeletedByUserInput | EventCalendarCreateManyDeletedByUserInput[]
    };
    export type SessionUpsertWithWhereUniqueWithoutUserInput = {
        where: SessionWhereUniqueInput
        update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
        create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    };
    export type SessionUpdateWithWhereUniqueWithoutUserInput = {
        where: SessionWhereUniqueInput
        data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    };
    export type SessionUpdateManyWithWhereWithoutUserInput = {
        where: SessionScalarWhereInput
        data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
    };
    export type SessionScalarWhereInput = {
        AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
        OR?: SessionScalarWhereInput[]
        NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
        id?: StringFilter<"Session"> | string
        expiresAt?: DateTimeFilter<"Session"> | Date | string
        token?: StringFilter<"Session"> | string
        createdAt?: DateTimeFilter<"Session"> | Date | string
        updatedAt?: DateTimeFilter<"Session"> | Date | string
        ipAddress?: StringNullableFilter<"Session"> | string | null
        userAgent?: StringNullableFilter<"Session"> | string | null
        userId?: StringFilter<"Session"> | string
        impersonatedBy?: StringNullableFilter<"Session"> | string | null
        activeOrganizationId?: StringNullableFilter<"Session"> | string | null
    };
    export type AccountUpsertWithWhereUniqueWithoutUserInput = {
        where: AccountWhereUniqueInput
        update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
        create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    };
    export type AccountUpdateWithWhereUniqueWithoutUserInput = {
        where: AccountWhereUniqueInput
        data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    };
    export type AccountUpdateManyWithWhereWithoutUserInput = {
        where: AccountScalarWhereInput
        data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
    };
    export type AccountScalarWhereInput = {
        AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
        OR?: AccountScalarWhereInput[]
        NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
        id?: StringFilter<"Account"> | string
        accountId?: StringFilter<"Account"> | string
        providerId?: StringFilter<"Account"> | string
        userId?: StringFilter<"Account"> | string
        accessToken?: StringNullableFilter<"Account"> | string | null
        refreshToken?: StringNullableFilter<"Account"> | string | null
        idToken?: StringNullableFilter<"Account"> | string | null
        accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
        refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
        scope?: StringNullableFilter<"Account"> | string | null
        password?: StringNullableFilter<"Account"> | string | null
        createdAt?: DateTimeFilter<"Account"> | Date | string
        updatedAt?: DateTimeFilter<"Account"> | Date | string
    };
    export type MemberUpsertWithWhereUniqueWithoutUserInput = {
        where: MemberWhereUniqueInput
        update: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
        create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
    };
    export type MemberUpdateWithWhereUniqueWithoutUserInput = {
        where: MemberWhereUniqueInput
        data: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
    };
    export type MemberUpdateManyWithWhereWithoutUserInput = {
        where: MemberScalarWhereInput
        data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutUserInput>
    };
    export type MemberScalarWhereInput = {
        AND?: MemberScalarWhereInput | MemberScalarWhereInput[]
        OR?: MemberScalarWhereInput[]
        NOT?: MemberScalarWhereInput | MemberScalarWhereInput[]
        id?: StringFilter<"Member"> | string
        organizationId?: StringFilter<"Member"> | string
        userId?: StringFilter<"Member"> | string
        role?: StringFilter<"Member"> | string
        createdAt?: DateTimeFilter<"Member"> | Date | string
        updatedAt?: DateTimeFilter<"Member"> | Date | string
    };
    export type InvitationUpsertWithWhereUniqueWithoutUserInput = {
        where: InvitationWhereUniqueInput
        update: XOR<InvitationUpdateWithoutUserInput, InvitationUncheckedUpdateWithoutUserInput>
        create: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput>
    };
    export type InvitationUpdateWithWhereUniqueWithoutUserInput = {
        where: InvitationWhereUniqueInput
        data: XOR<InvitationUpdateWithoutUserInput, InvitationUncheckedUpdateWithoutUserInput>
    };
    export type InvitationUpdateManyWithWhereWithoutUserInput = {
        where: InvitationScalarWhereInput
        data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutUserInput>
    };
    export type InvitationScalarWhereInput = {
        AND?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
        OR?: InvitationScalarWhereInput[]
        NOT?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
        id?: StringFilter<"Invitation"> | string
        organizationId?: StringFilter<"Invitation"> | string
        email?: StringFilter<"Invitation"> | string
        role?: StringNullableFilter<"Invitation"> | string | null
        status?: StringFilter<"Invitation"> | string
        expiresAt?: DateTimeFilter<"Invitation"> | Date | string
        createdAt?: DateTimeFilter<"Invitation"> | Date | string
        updatedAt?: DateTimeNullableFilter<"Invitation"> | Date | string | null
        inviterId?: StringFilter<"Invitation"> | string
    };
    export type PatientUpsertWithWhereUniqueWithoutUserInput = {
        where: PatientWhereUniqueInput
        update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
        create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    };
    export type PatientUpdateWithWhereUniqueWithoutUserInput = {
        where: PatientWhereUniqueInput
        data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    };
    export type PatientUpdateManyWithWhereWithoutUserInput = {
        where: PatientScalarWhereInput
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutUserInput>
    };
    export type PatientScalarWhereInput = {
        AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
        OR?: PatientScalarWhereInput[]
        NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
        id?: StringFilter<"Patient"> | string
        type?: StringFilter<"Patient"> | string
        createdAt?: DateTimeFilter<"Patient"> | Date | string
        createdById?: StringNullableFilter<"Patient"> | string | null
        updatedAt?: DateTimeFilter<"Patient"> | Date | string
        updatedById?: StringNullableFilter<"Patient"> | string | null
        deletedAt?: DateTimeNullableFilter<"Patient"> | Date | string | null
        deletedById?: StringNullableFilter<"Patient"> | string | null
        deleted?: BoolFilter<"Patient"> | boolean
        organizationId?: StringNullableFilter<"Patient"> | string | null
        name?: StringFilter<"Patient"> | string
        cpf?: StringFilter<"Patient"> | string
        cellphone?: StringFilter<"Patient"> | string
        email?: StringFilter<"Patient"> | string
        sex?: EnumSexNullableFilter<"Patient"> | $Enums.Sex | null
        responsible?: StringNullableFilter<"Patient"> | string | null
        nationality?: StringFilter<"Patient"> | string
        race?: EnumRaceNullableFilter<"Patient"> | $Enums.Race | null
        state?: StringFilter<"Patient"> | string
        city?: StringFilter<"Patient"> | string
        zipcode?: StringFilter<"Patient"> | string
        neighborhood?: StringFilter<"Patient"> | string
        street?: StringFilter<"Patient"> | string
        number?: StringFilter<"Patient"> | string
        complement?: StringNullableFilter<"Patient"> | string | null
        occupation?: StringFilter<"Patient"> | string
        sexualOrientation?: StringNullableFilter<"Patient"> | string | null
        civilStatus?: EnumCivilStatusNullableFilter<"Patient"> | $Enums.CivilStatus | null
        bloodType?: EnumBloodTypeNullableFilter<"Patient"> | $Enums.BloodType | null
        genderIdentity?: EnumGenderIdentityNullableFilter<"Patient"> | $Enums.GenderIdentity | null
        password?: StringNullableFilter<"Patient"> | string | null
        userId?: StringNullableFilter<"Patient"> | string | null
    };
    export type AssetUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: AssetWhereUniqueInput
        update: XOR<AssetUpdateWithoutCreatedByUserInput, AssetUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<AssetCreateWithoutCreatedByUserInput, AssetUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AssetUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: AssetWhereUniqueInput
        data: XOR<AssetUpdateWithoutCreatedByUserInput, AssetUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type AssetUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: AssetScalarWhereInput
        data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type AssetScalarWhereInput = {
        AND?: AssetScalarWhereInput | AssetScalarWhereInput[]
        OR?: AssetScalarWhereInput[]
        NOT?: AssetScalarWhereInput | AssetScalarWhereInput[]
        id?: StringFilter<"Asset"> | string
        type?: StringFilter<"Asset"> | string
        createdAt?: DateTimeFilter<"Asset"> | Date | string
        createdById?: StringNullableFilter<"Asset"> | string | null
        updatedAt?: DateTimeFilter<"Asset"> | Date | string
        updatedById?: StringNullableFilter<"Asset"> | string | null
        deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
        deletedById?: StringNullableFilter<"Asset"> | string | null
        deleted?: BoolFilter<"Asset"> | boolean
        organizationId?: StringNullableFilter<"Asset"> | string | null
    };
    export type AssetUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AssetWhereUniqueInput
        update: XOR<AssetUpdateWithoutUpdatedByUserInput, AssetUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<AssetCreateWithoutUpdatedByUserInput, AssetUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AssetUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AssetWhereUniqueInput
        data: XOR<AssetUpdateWithoutUpdatedByUserInput, AssetUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type AssetUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: AssetScalarWhereInput
        data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type AssetUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: AssetWhereUniqueInput
        update: XOR<AssetUpdateWithoutDeletedByUserInput, AssetUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<AssetCreateWithoutDeletedByUserInput, AssetUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AssetUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: AssetWhereUniqueInput
        data: XOR<AssetUpdateWithoutDeletedByUserInput, AssetUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type AssetUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: AssetScalarWhereInput
        data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type AppointmentCidUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        update: XOR<AppointmentCidUpdateWithoutCreatedByUserInput, AppointmentCidUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<AppointmentCidCreateWithoutCreatedByUserInput, AppointmentCidUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AppointmentCidUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        data: XOR<AppointmentCidUpdateWithoutCreatedByUserInput, AppointmentCidUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type AppointmentCidUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: AppointmentCidScalarWhereInput
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type AppointmentCidScalarWhereInput = {
        AND?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
        OR?: AppointmentCidScalarWhereInput[]
        NOT?: AppointmentCidScalarWhereInput | AppointmentCidScalarWhereInput[]
        id?: StringFilter<"AppointmentCid"> | string
        type?: StringFilter<"AppointmentCid"> | string
        createdAt?: DateTimeFilter<"AppointmentCid"> | Date | string
        createdById?: StringNullableFilter<"AppointmentCid"> | string | null
        updatedAt?: DateTimeFilter<"AppointmentCid"> | Date | string
        updatedById?: StringNullableFilter<"AppointmentCid"> | string | null
        deletedAt?: DateTimeNullableFilter<"AppointmentCid"> | Date | string | null
        deletedById?: StringNullableFilter<"AppointmentCid"> | string | null
        deleted?: BoolFilter<"AppointmentCid"> | boolean
        organizationId?: StringNullableFilter<"AppointmentCid"> | string | null
        appointmentId?: StringFilter<"AppointmentCid"> | string
        cidId?: StringFilter<"AppointmentCid"> | string
    };
    export type AppointmentUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: AppointmentWhereUniqueInput
        update: XOR<AppointmentUpdateWithoutCreatedByUserInput, AppointmentUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<AppointmentCreateWithoutCreatedByUserInput, AppointmentUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AppointmentUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: AppointmentWhereUniqueInput
        data: XOR<AppointmentUpdateWithoutCreatedByUserInput, AppointmentUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type AppointmentUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: AppointmentScalarWhereInput
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type AppointmentScalarWhereInput = {
        AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
        OR?: AppointmentScalarWhereInput[]
        NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
        id?: StringFilter<"Appointment"> | string
        type?: StringFilter<"Appointment"> | string
        createdAt?: DateTimeFilter<"Appointment"> | Date | string
        createdById?: StringNullableFilter<"Appointment"> | string | null
        updatedAt?: DateTimeFilter<"Appointment"> | Date | string
        updatedById?: StringNullableFilter<"Appointment"> | string | null
        deletedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        deletedById?: StringNullableFilter<"Appointment"> | string | null
        deleted?: BoolFilter<"Appointment"> | boolean
        organizationId?: StringNullableFilter<"Appointment"> | string | null
        motive?: StringFilter<"Appointment"> | string
        subjective?: StringFilter<"Appointment"> | string
        objective?: StringFilter<"Appointment"> | string
        evaluation?: StringFilter<"Appointment"> | string
        plan?: StringFilter<"Appointment"> | string
        startDate?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        endDate?: DateTimeNullableFilter<"Appointment"> | Date | string | null
        sickNoteDays?: IntNullableFilter<"Appointment"> | number | null
        category?: EnumAppointmentCategoryNullableFilter<"Appointment"> | $Enums.AppointmentCategory | null
        status?: EnumAppointmentStatusNullableFilter<"Appointment"> | $Enums.AppointmentStatus | null
        followUpId?: StringNullableFilter<"Appointment"> | string | null
        patientId?: StringFilter<"Appointment"> | string
    };
    export type PatientUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: PatientWhereUniqueInput
        update: XOR<PatientUpdateWithoutCreatedByUserInput, PatientUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<PatientCreateWithoutCreatedByUserInput, PatientUncheckedCreateWithoutCreatedByUserInput>
    };
    export type PatientUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: PatientWhereUniqueInput
        data: XOR<PatientUpdateWithoutCreatedByUserInput, PatientUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type PatientUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: PatientScalarWhereInput
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type VaccinationsUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: VaccinationsWhereUniqueInput
        update: XOR<VaccinationsUpdateWithoutCreatedByUserInput, VaccinationsUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<VaccinationsCreateWithoutCreatedByUserInput, VaccinationsUncheckedCreateWithoutCreatedByUserInput>
    };
    export type VaccinationsUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: VaccinationsWhereUniqueInput
        data: XOR<VaccinationsUpdateWithoutCreatedByUserInput, VaccinationsUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type VaccinationsUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: VaccinationsScalarWhereInput
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type VaccinationsScalarWhereInput = {
        AND?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
        OR?: VaccinationsScalarWhereInput[]
        NOT?: VaccinationsScalarWhereInput | VaccinationsScalarWhereInput[]
        id?: StringFilter<"Vaccinations"> | string
        type?: StringFilter<"Vaccinations"> | string
        createdAt?: DateTimeFilter<"Vaccinations"> | Date | string
        createdById?: StringNullableFilter<"Vaccinations"> | string | null
        updatedAt?: DateTimeFilter<"Vaccinations"> | Date | string
        updatedById?: StringNullableFilter<"Vaccinations"> | string | null
        deletedAt?: DateTimeNullableFilter<"Vaccinations"> | Date | string | null
        deletedById?: StringNullableFilter<"Vaccinations"> | string | null
        deleted?: BoolFilter<"Vaccinations"> | boolean
        organizationId?: StringNullableFilter<"Vaccinations"> | string | null
        patientId?: StringFilter<"Vaccinations"> | string
        vaccinationsValuesId?: StringFilter<"Vaccinations"> | string
    };
    export type AllergiesUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutCreatedByUserInput, AllergiesUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<AllergiesCreateWithoutCreatedByUserInput, AllergiesUncheckedCreateWithoutCreatedByUserInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutCreatedByUserInput, AllergiesUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type AllergiesScalarWhereInput = {
        AND?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
        OR?: AllergiesScalarWhereInput[]
        NOT?: AllergiesScalarWhereInput | AllergiesScalarWhereInput[]
        id?: StringFilter<"Allergies"> | string
        type?: StringFilter<"Allergies"> | string
        createdAt?: DateTimeFilter<"Allergies"> | Date | string
        createdById?: StringNullableFilter<"Allergies"> | string | null
        updatedAt?: DateTimeFilter<"Allergies"> | Date | string
        updatedById?: StringNullableFilter<"Allergies"> | string | null
        deletedAt?: DateTimeNullableFilter<"Allergies"> | Date | string | null
        deletedById?: StringNullableFilter<"Allergies"> | string | null
        deleted?: BoolFilter<"Allergies"> | boolean
        organizationId?: StringNullableFilter<"Allergies"> | string | null
        patientId?: StringNullableFilter<"Allergies"> | string | null
        allergiesValuesId?: StringFilter<"Allergies"> | string
        appointmentId?: StringNullableFilter<"Allergies"> | string | null
    };
    export type MedicationsUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutCreatedByUserInput, MedicationsUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<MedicationsCreateWithoutCreatedByUserInput, MedicationsUncheckedCreateWithoutCreatedByUserInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutCreatedByUserInput, MedicationsUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type MedicationsScalarWhereInput = {
        AND?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
        OR?: MedicationsScalarWhereInput[]
        NOT?: MedicationsScalarWhereInput | MedicationsScalarWhereInput[]
        id?: StringFilter<"Medications"> | string
        type?: StringFilter<"Medications"> | string
        createdAt?: DateTimeFilter<"Medications"> | Date | string
        createdById?: StringNullableFilter<"Medications"> | string | null
        updatedAt?: DateTimeFilter<"Medications"> | Date | string
        updatedById?: StringNullableFilter<"Medications"> | string | null
        deletedAt?: DateTimeNullableFilter<"Medications"> | Date | string | null
        deletedById?: StringNullableFilter<"Medications"> | string | null
        deleted?: BoolFilter<"Medications"> | boolean
        organizationId?: StringNullableFilter<"Medications"> | string | null
        patientId?: StringNullableFilter<"Medications"> | string | null
        medicationsValuesId?: StringFilter<"Medications"> | string
        appointmentId?: StringNullableFilter<"Medications"> | string | null
    };
    export type ExamResultsUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: ExamResultsWhereUniqueInput
        update: XOR<ExamResultsUpdateWithoutCreatedByUserInput, ExamResultsUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<ExamResultsCreateWithoutCreatedByUserInput, ExamResultsUncheckedCreateWithoutCreatedByUserInput>
    };
    export type ExamResultsUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: ExamResultsWhereUniqueInput
        data: XOR<ExamResultsUpdateWithoutCreatedByUserInput, ExamResultsUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type ExamResultsUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: ExamResultsScalarWhereInput
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type ExamResultsScalarWhereInput = {
        AND?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
        OR?: ExamResultsScalarWhereInput[]
        NOT?: ExamResultsScalarWhereInput | ExamResultsScalarWhereInput[]
        id?: StringFilter<"ExamResults"> | string
        type?: StringFilter<"ExamResults"> | string
        createdAt?: DateTimeFilter<"ExamResults"> | Date | string
        createdById?: StringNullableFilter<"ExamResults"> | string | null
        updatedAt?: DateTimeFilter<"ExamResults"> | Date | string
        updatedById?: StringNullableFilter<"ExamResults"> | string | null
        deletedAt?: DateTimeNullableFilter<"ExamResults"> | Date | string | null
        deletedById?: StringNullableFilter<"ExamResults"> | string | null
        deleted?: BoolFilter<"ExamResults"> | boolean
        organizationId?: StringNullableFilter<"ExamResults"> | string | null
        patientId?: StringFilter<"ExamResults"> | string
        examResultsValuesId?: StringFilter<"ExamResults"> | string
        result?: StringFilter<"ExamResults"> | string
        date?: DateTimeFilter<"ExamResults"> | Date | string
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutCreatedByUserInput, ComorbiditiesUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<ComorbiditiesCreateWithoutCreatedByUserInput, ComorbiditiesUncheckedCreateWithoutCreatedByUserInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutCreatedByUserInput, ComorbiditiesUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type ComorbiditiesScalarWhereInput = {
        AND?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
        OR?: ComorbiditiesScalarWhereInput[]
        NOT?: ComorbiditiesScalarWhereInput | ComorbiditiesScalarWhereInput[]
        id?: StringFilter<"Comorbidities"> | string
        type?: StringFilter<"Comorbidities"> | string
        createdAt?: DateTimeFilter<"Comorbidities"> | Date | string
        createdById?: StringNullableFilter<"Comorbidities"> | string | null
        updatedAt?: DateTimeFilter<"Comorbidities"> | Date | string
        updatedById?: StringNullableFilter<"Comorbidities"> | string | null
        deletedAt?: DateTimeNullableFilter<"Comorbidities"> | Date | string | null
        deletedById?: StringNullableFilter<"Comorbidities"> | string | null
        deleted?: BoolFilter<"Comorbidities"> | boolean
        organizationId?: StringNullableFilter<"Comorbidities"> | string | null
        patientId?: StringNullableFilter<"Comorbidities"> | string | null
        comorbiditiesValuesId?: StringFilter<"Comorbidities"> | string
        appointmentId?: StringNullableFilter<"Comorbidities"> | string | null
    };
    export type SurgeriesUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: SurgeriesWhereUniqueInput
        update: XOR<SurgeriesUpdateWithoutCreatedByUserInput, SurgeriesUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<SurgeriesCreateWithoutCreatedByUserInput, SurgeriesUncheckedCreateWithoutCreatedByUserInput>
    };
    export type SurgeriesUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: SurgeriesWhereUniqueInput
        data: XOR<SurgeriesUpdateWithoutCreatedByUserInput, SurgeriesUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type SurgeriesUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: SurgeriesScalarWhereInput
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type SurgeriesScalarWhereInput = {
        AND?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
        OR?: SurgeriesScalarWhereInput[]
        NOT?: SurgeriesScalarWhereInput | SurgeriesScalarWhereInput[]
        id?: StringFilter<"Surgeries"> | string
        type?: StringFilter<"Surgeries"> | string
        createdAt?: DateTimeFilter<"Surgeries"> | Date | string
        createdById?: StringNullableFilter<"Surgeries"> | string | null
        updatedAt?: DateTimeFilter<"Surgeries"> | Date | string
        updatedById?: StringNullableFilter<"Surgeries"> | string | null
        deletedAt?: DateTimeNullableFilter<"Surgeries"> | Date | string | null
        deletedById?: StringNullableFilter<"Surgeries"> | string | null
        deleted?: BoolFilter<"Surgeries"> | boolean
        organizationId?: StringNullableFilter<"Surgeries"> | string | null
        patientId?: StringFilter<"Surgeries"> | string
        surgeriesValuesId?: StringFilter<"Surgeries"> | string
    };
    export type HealthPlansUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: HealthPlansWhereUniqueInput
        update: XOR<HealthPlansUpdateWithoutCreatedByUserInput, HealthPlansUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<HealthPlansCreateWithoutCreatedByUserInput, HealthPlansUncheckedCreateWithoutCreatedByUserInput>
    };
    export type HealthPlansUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: HealthPlansWhereUniqueInput
        data: XOR<HealthPlansUpdateWithoutCreatedByUserInput, HealthPlansUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type HealthPlansUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: HealthPlansScalarWhereInput
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type HealthPlansScalarWhereInput = {
        AND?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
        OR?: HealthPlansScalarWhereInput[]
        NOT?: HealthPlansScalarWhereInput | HealthPlansScalarWhereInput[]
        id?: StringFilter<"HealthPlans"> | string
        type?: StringFilter<"HealthPlans"> | string
        createdAt?: DateTimeFilter<"HealthPlans"> | Date | string
        createdById?: StringNullableFilter<"HealthPlans"> | string | null
        updatedAt?: DateTimeFilter<"HealthPlans"> | Date | string
        updatedById?: StringNullableFilter<"HealthPlans"> | string | null
        deletedAt?: DateTimeNullableFilter<"HealthPlans"> | Date | string | null
        deletedById?: StringNullableFilter<"HealthPlans"> | string | null
        deleted?: BoolFilter<"HealthPlans"> | boolean
        organizationId?: StringNullableFilter<"HealthPlans"> | string | null
        patientId?: StringFilter<"HealthPlans"> | string
        healthPlansValuesId?: StringFilter<"HealthPlans"> | string
    };
    export type DefaultObjectiveInformationUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        update: XOR<DefaultObjectiveInformationUpdateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<DefaultObjectiveInformationCreateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutCreatedByUserInput>
    };
    export type DefaultObjectiveInformationUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        data: XOR<DefaultObjectiveInformationUpdateWithoutCreatedByUserInput, DefaultObjectiveInformationUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type DefaultObjectiveInformationUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: DefaultObjectiveInformationScalarWhereInput
        data: XOR<DefaultObjectiveInformationUpdateManyMutationInput, DefaultObjectiveInformationUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type DefaultObjectiveInformationScalarWhereInput = {
        AND?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
        OR?: DefaultObjectiveInformationScalarWhereInput[]
        NOT?: DefaultObjectiveInformationScalarWhereInput | DefaultObjectiveInformationScalarWhereInput[]
        id?: StringFilter<"DefaultObjectiveInformation"> | string
        type?: StringFilter<"DefaultObjectiveInformation"> | string
        createdAt?: DateTimeFilter<"DefaultObjectiveInformation"> | Date | string
        createdById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        updatedAt?: DateTimeFilter<"DefaultObjectiveInformation"> | Date | string
        updatedById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        deletedAt?: DateTimeNullableFilter<"DefaultObjectiveInformation"> | Date | string | null
        deletedById?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        deleted?: BoolFilter<"DefaultObjectiveInformation"> | boolean
        organizationId?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
        text?: StringNullableFilter<"DefaultObjectiveInformation"> | string | null
    };
    export type EventCalendarUpsertWithWhereUniqueWithoutCreatedByUserInput = {
        where: EventCalendarWhereUniqueInput
        update: XOR<EventCalendarUpdateWithoutCreatedByUserInput, EventCalendarUncheckedUpdateWithoutCreatedByUserInput>
        create: XOR<EventCalendarCreateWithoutCreatedByUserInput, EventCalendarUncheckedCreateWithoutCreatedByUserInput>
    };
    export type EventCalendarUpdateWithWhereUniqueWithoutCreatedByUserInput = {
        where: EventCalendarWhereUniqueInput
        data: XOR<EventCalendarUpdateWithoutCreatedByUserInput, EventCalendarUncheckedUpdateWithoutCreatedByUserInput>
    };
    export type EventCalendarUpdateManyWithWhereWithoutCreatedByUserInput = {
        where: EventCalendarScalarWhereInput
        data: XOR<EventCalendarUpdateManyMutationInput, EventCalendarUncheckedUpdateManyWithoutCreatedByUserInput>
    };
    export type EventCalendarScalarWhereInput = {
        AND?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
        OR?: EventCalendarScalarWhereInput[]
        NOT?: EventCalendarScalarWhereInput | EventCalendarScalarWhereInput[]
        id?: StringFilter<"EventCalendar"> | string
        type?: StringFilter<"EventCalendar"> | string
        createdAt?: DateTimeFilter<"EventCalendar"> | Date | string
        createdById?: StringNullableFilter<"EventCalendar"> | string | null
        updatedAt?: DateTimeFilter<"EventCalendar"> | Date | string
        updatedById?: StringNullableFilter<"EventCalendar"> | string | null
        deletedAt?: DateTimeNullableFilter<"EventCalendar"> | Date | string | null
        deletedById?: StringNullableFilter<"EventCalendar"> | string | null
        deleted?: BoolFilter<"EventCalendar"> | boolean
        organizationId?: StringNullableFilter<"EventCalendar"> | string | null
        title?: StringFilter<"EventCalendar"> | string
        description?: StringNullableFilter<"EventCalendar"> | string | null
        start?: DateTimeFilter<"EventCalendar"> | Date | string
        end?: DateTimeFilter<"EventCalendar"> | Date | string
        allDay?: BoolNullableFilter<"EventCalendar"> | boolean | null
        eventType?: EnumEventCalendarTypeNullableFilter<"EventCalendar"> | $Enums.EventCalendarType | null
        rrule?: StringNullableFilter<"EventCalendar"> | string | null
        appointmentId?: StringNullableFilter<"EventCalendar"> | string | null
    };
    export type AppointmentCidUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        update: XOR<AppointmentCidUpdateWithoutUpdatedByUserInput, AppointmentCidUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<AppointmentCidCreateWithoutUpdatedByUserInput, AppointmentCidUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AppointmentCidUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        data: XOR<AppointmentCidUpdateWithoutUpdatedByUserInput, AppointmentCidUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type AppointmentCidUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: AppointmentCidScalarWhereInput
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type AppointmentUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AppointmentWhereUniqueInput
        update: XOR<AppointmentUpdateWithoutUpdatedByUserInput, AppointmentUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<AppointmentCreateWithoutUpdatedByUserInput, AppointmentUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AppointmentUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AppointmentWhereUniqueInput
        data: XOR<AppointmentUpdateWithoutUpdatedByUserInput, AppointmentUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type AppointmentUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: AppointmentScalarWhereInput
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type PatientUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: PatientWhereUniqueInput
        update: XOR<PatientUpdateWithoutUpdatedByUserInput, PatientUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<PatientCreateWithoutUpdatedByUserInput, PatientUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type PatientUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: PatientWhereUniqueInput
        data: XOR<PatientUpdateWithoutUpdatedByUserInput, PatientUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type PatientUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: PatientScalarWhereInput
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type VaccinationsUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: VaccinationsWhereUniqueInput
        update: XOR<VaccinationsUpdateWithoutUpdatedByUserInput, VaccinationsUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<VaccinationsCreateWithoutUpdatedByUserInput, VaccinationsUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type VaccinationsUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: VaccinationsWhereUniqueInput
        data: XOR<VaccinationsUpdateWithoutUpdatedByUserInput, VaccinationsUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type VaccinationsUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: VaccinationsScalarWhereInput
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type AllergiesUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutUpdatedByUserInput, AllergiesUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<AllergiesCreateWithoutUpdatedByUserInput, AllergiesUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutUpdatedByUserInput, AllergiesUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type MedicationsUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutUpdatedByUserInput, MedicationsUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<MedicationsCreateWithoutUpdatedByUserInput, MedicationsUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutUpdatedByUserInput, MedicationsUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type ExamResultsUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: ExamResultsWhereUniqueInput
        update: XOR<ExamResultsUpdateWithoutUpdatedByUserInput, ExamResultsUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<ExamResultsCreateWithoutUpdatedByUserInput, ExamResultsUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type ExamResultsUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: ExamResultsWhereUniqueInput
        data: XOR<ExamResultsUpdateWithoutUpdatedByUserInput, ExamResultsUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type ExamResultsUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: ExamResultsScalarWhereInput
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutUpdatedByUserInput, ComorbiditiesUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<ComorbiditiesCreateWithoutUpdatedByUserInput, ComorbiditiesUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutUpdatedByUserInput, ComorbiditiesUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type SurgeriesUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: SurgeriesWhereUniqueInput
        update: XOR<SurgeriesUpdateWithoutUpdatedByUserInput, SurgeriesUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<SurgeriesCreateWithoutUpdatedByUserInput, SurgeriesUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type SurgeriesUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: SurgeriesWhereUniqueInput
        data: XOR<SurgeriesUpdateWithoutUpdatedByUserInput, SurgeriesUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type SurgeriesUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: SurgeriesScalarWhereInput
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type HealthPlansUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: HealthPlansWhereUniqueInput
        update: XOR<HealthPlansUpdateWithoutUpdatedByUserInput, HealthPlansUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<HealthPlansCreateWithoutUpdatedByUserInput, HealthPlansUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type HealthPlansUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: HealthPlansWhereUniqueInput
        data: XOR<HealthPlansUpdateWithoutUpdatedByUserInput, HealthPlansUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type HealthPlansUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: HealthPlansScalarWhereInput
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type DefaultObjectiveInformationUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        update: XOR<DefaultObjectiveInformationUpdateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<DefaultObjectiveInformationCreateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type DefaultObjectiveInformationUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        data: XOR<DefaultObjectiveInformationUpdateWithoutUpdatedByUserInput, DefaultObjectiveInformationUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type DefaultObjectiveInformationUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: DefaultObjectiveInformationScalarWhereInput
        data: XOR<DefaultObjectiveInformationUpdateManyMutationInput, DefaultObjectiveInformationUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type EventCalendarUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
        where: EventCalendarWhereUniqueInput
        update: XOR<EventCalendarUpdateWithoutUpdatedByUserInput, EventCalendarUncheckedUpdateWithoutUpdatedByUserInput>
        create: XOR<EventCalendarCreateWithoutUpdatedByUserInput, EventCalendarUncheckedCreateWithoutUpdatedByUserInput>
    };
    export type EventCalendarUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
        where: EventCalendarWhereUniqueInput
        data: XOR<EventCalendarUpdateWithoutUpdatedByUserInput, EventCalendarUncheckedUpdateWithoutUpdatedByUserInput>
    };
    export type EventCalendarUpdateManyWithWhereWithoutUpdatedByUserInput = {
        where: EventCalendarScalarWhereInput
        data: XOR<EventCalendarUpdateManyMutationInput, EventCalendarUncheckedUpdateManyWithoutUpdatedByUserInput>
    };
    export type AppointmentCidUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        update: XOR<AppointmentCidUpdateWithoutDeletedByUserInput, AppointmentCidUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<AppointmentCidCreateWithoutDeletedByUserInput, AppointmentCidUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AppointmentCidUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: AppointmentCidWhereUniqueInput
        data: XOR<AppointmentCidUpdateWithoutDeletedByUserInput, AppointmentCidUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type AppointmentCidUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: AppointmentCidScalarWhereInput
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type AppointmentUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: AppointmentWhereUniqueInput
        update: XOR<AppointmentUpdateWithoutDeletedByUserInput, AppointmentUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<AppointmentCreateWithoutDeletedByUserInput, AppointmentUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AppointmentUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: AppointmentWhereUniqueInput
        data: XOR<AppointmentUpdateWithoutDeletedByUserInput, AppointmentUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type AppointmentUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: AppointmentScalarWhereInput
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type PatientUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: PatientWhereUniqueInput
        update: XOR<PatientUpdateWithoutDeletedByUserInput, PatientUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<PatientCreateWithoutDeletedByUserInput, PatientUncheckedCreateWithoutDeletedByUserInput>
    };
    export type PatientUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: PatientWhereUniqueInput
        data: XOR<PatientUpdateWithoutDeletedByUserInput, PatientUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type PatientUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: PatientScalarWhereInput
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type VaccinationsUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: VaccinationsWhereUniqueInput
        update: XOR<VaccinationsUpdateWithoutDeletedByUserInput, VaccinationsUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<VaccinationsCreateWithoutDeletedByUserInput, VaccinationsUncheckedCreateWithoutDeletedByUserInput>
    };
    export type VaccinationsUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: VaccinationsWhereUniqueInput
        data: XOR<VaccinationsUpdateWithoutDeletedByUserInput, VaccinationsUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type VaccinationsUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: VaccinationsScalarWhereInput
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type AllergiesUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutDeletedByUserInput, AllergiesUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<AllergiesCreateWithoutDeletedByUserInput, AllergiesUncheckedCreateWithoutDeletedByUserInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutDeletedByUserInput, AllergiesUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type MedicationsUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutDeletedByUserInput, MedicationsUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<MedicationsCreateWithoutDeletedByUserInput, MedicationsUncheckedCreateWithoutDeletedByUserInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutDeletedByUserInput, MedicationsUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type ExamResultsUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: ExamResultsWhereUniqueInput
        update: XOR<ExamResultsUpdateWithoutDeletedByUserInput, ExamResultsUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<ExamResultsCreateWithoutDeletedByUserInput, ExamResultsUncheckedCreateWithoutDeletedByUserInput>
    };
    export type ExamResultsUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: ExamResultsWhereUniqueInput
        data: XOR<ExamResultsUpdateWithoutDeletedByUserInput, ExamResultsUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type ExamResultsUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: ExamResultsScalarWhereInput
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutDeletedByUserInput, ComorbiditiesUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<ComorbiditiesCreateWithoutDeletedByUserInput, ComorbiditiesUncheckedCreateWithoutDeletedByUserInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutDeletedByUserInput, ComorbiditiesUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type SurgeriesUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: SurgeriesWhereUniqueInput
        update: XOR<SurgeriesUpdateWithoutDeletedByUserInput, SurgeriesUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<SurgeriesCreateWithoutDeletedByUserInput, SurgeriesUncheckedCreateWithoutDeletedByUserInput>
    };
    export type SurgeriesUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: SurgeriesWhereUniqueInput
        data: XOR<SurgeriesUpdateWithoutDeletedByUserInput, SurgeriesUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type SurgeriesUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: SurgeriesScalarWhereInput
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type HealthPlansUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: HealthPlansWhereUniqueInput
        update: XOR<HealthPlansUpdateWithoutDeletedByUserInput, HealthPlansUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<HealthPlansCreateWithoutDeletedByUserInput, HealthPlansUncheckedCreateWithoutDeletedByUserInput>
    };
    export type HealthPlansUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: HealthPlansWhereUniqueInput
        data: XOR<HealthPlansUpdateWithoutDeletedByUserInput, HealthPlansUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type HealthPlansUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: HealthPlansScalarWhereInput
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type DefaultObjectiveInformationUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        update: XOR<DefaultObjectiveInformationUpdateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<DefaultObjectiveInformationCreateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedCreateWithoutDeletedByUserInput>
    };
    export type DefaultObjectiveInformationUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        data: XOR<DefaultObjectiveInformationUpdateWithoutDeletedByUserInput, DefaultObjectiveInformationUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type DefaultObjectiveInformationUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: DefaultObjectiveInformationScalarWhereInput
        data: XOR<DefaultObjectiveInformationUpdateManyMutationInput, DefaultObjectiveInformationUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type EventCalendarUpsertWithWhereUniqueWithoutDeletedByUserInput = {
        where: EventCalendarWhereUniqueInput
        update: XOR<EventCalendarUpdateWithoutDeletedByUserInput, EventCalendarUncheckedUpdateWithoutDeletedByUserInput>
        create: XOR<EventCalendarCreateWithoutDeletedByUserInput, EventCalendarUncheckedCreateWithoutDeletedByUserInput>
    };
    export type EventCalendarUpdateWithWhereUniqueWithoutDeletedByUserInput = {
        where: EventCalendarWhereUniqueInput
        data: XOR<EventCalendarUpdateWithoutDeletedByUserInput, EventCalendarUncheckedUpdateWithoutDeletedByUserInput>
    };
    export type EventCalendarUpdateManyWithWhereWithoutDeletedByUserInput = {
        where: EventCalendarScalarWhereInput
        data: XOR<EventCalendarUpdateManyMutationInput, EventCalendarUncheckedUpdateManyWithoutDeletedByUserInput>
    };
    export type UserCreateWithoutCreatedAssetsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutCreatedAssetsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutCreatedAssetsInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutCreatedAssetsInput, UserUncheckedCreateWithoutCreatedAssetsInput>
    };
    export type UserCreateWithoutUpdatedAssetsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutUpdatedAssetsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutUpdatedAssetsInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutUpdatedAssetsInput, UserUncheckedCreateWithoutUpdatedAssetsInput>
    };
    export type UserCreateWithoutDeletedAssetsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDeletedAssetsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDeletedAssetsInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDeletedAssetsInput, UserUncheckedCreateWithoutDeletedAssetsInput>
    };
    export type OrganizationCreateWithoutAssetsInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutAssetsInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutAssetsInput = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutAssetsInput, OrganizationUncheckedCreateWithoutAssetsInput>
    };
    export type UserUpsertWithoutCreatedAssetsInput = {
        update: XOR<UserUpdateWithoutCreatedAssetsInput, UserUncheckedUpdateWithoutCreatedAssetsInput>
        create: XOR<UserCreateWithoutCreatedAssetsInput, UserUncheckedCreateWithoutCreatedAssetsInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutCreatedAssetsInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutCreatedAssetsInput, UserUncheckedUpdateWithoutCreatedAssetsInput>
    };
    export type UserUpdateWithoutCreatedAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutCreatedAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutUpdatedAssetsInput = {
        update: XOR<UserUpdateWithoutUpdatedAssetsInput, UserUncheckedUpdateWithoutUpdatedAssetsInput>
        create: XOR<UserCreateWithoutUpdatedAssetsInput, UserUncheckedCreateWithoutUpdatedAssetsInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutUpdatedAssetsInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutUpdatedAssetsInput, UserUncheckedUpdateWithoutUpdatedAssetsInput>
    };
    export type UserUpdateWithoutUpdatedAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutUpdatedAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDeletedAssetsInput = {
        update: XOR<UserUpdateWithoutDeletedAssetsInput, UserUncheckedUpdateWithoutDeletedAssetsInput>
        create: XOR<UserCreateWithoutDeletedAssetsInput, UserUncheckedCreateWithoutDeletedAssetsInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDeletedAssetsInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDeletedAssetsInput, UserUncheckedUpdateWithoutDeletedAssetsInput>
    };
    export type UserUpdateWithoutDeletedAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDeletedAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutAssetsInput = {
        update: XOR<OrganizationUpdateWithoutAssetsInput, OrganizationUncheckedUpdateWithoutAssetsInput>
        create: XOR<OrganizationCreateWithoutAssetsInput, OrganizationUncheckedCreateWithoutAssetsInput>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutAssetsInput = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutAssetsInput, OrganizationUncheckedUpdateWithoutAssetsInput>
    };
    export type OrganizationUpdateWithoutAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutAssetsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type UserCreateWithoutSessionsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutSessionsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutSessionsInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    };
    export type UserUpsertWithoutSessionsInput = {
        update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
        create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutSessionsInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    };
    export type UserUpdateWithoutSessionsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutSessionsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserCreateWithoutAccountsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutAccountsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutAccountsInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    };
    export type UserUpsertWithoutAccountsInput = {
        update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
        create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutAccountsInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    };
    export type UserUpdateWithoutAccountsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutAccountsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type MemberCreateWithoutOrganizationInput = {
        id?: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
        user: UserCreateNestedOneWithoutMembersInput
    };
    export type MemberUncheckedCreateWithoutOrganizationInput = {
        id?: string
        userId: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type MemberCreateOrConnectWithoutOrganizationInput = {
        where: MemberWhereUniqueInput
        create: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput>
    };
    export type MemberCreateManyOrganizationInputEnvelope = {
        data: MemberCreateManyOrganizationInput | MemberCreateManyOrganizationInput[]
    };
    export type InvitationCreateWithoutOrganizationInput = {
        id?: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        user: UserCreateNestedOneWithoutInvitationsInput
    };
    export type InvitationUncheckedCreateWithoutOrganizationInput = {
        id?: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        inviterId: string
    };
    export type InvitationCreateOrConnectWithoutOrganizationInput = {
        where: InvitationWhereUniqueInput
        create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
    };
    export type InvitationCreateManyOrganizationInputEnvelope = {
        data: InvitationCreateManyOrganizationInput | InvitationCreateManyOrganizationInput[]
    };
    export type AssetCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutCreatedAssetsInput
        updatedByUser?: UserCreateNestedOneWithoutUpdatedAssetsInput
        deletedByUser?: UserCreateNestedOneWithoutDeletedAssetsInput
    };
    export type AssetUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
    };
    export type AssetCreateOrConnectWithoutOrganizationInput = {
        where: AssetWhereUniqueInput
        create: XOR<AssetCreateWithoutOrganizationInput, AssetUncheckedCreateWithoutOrganizationInput>
    };
    export type AssetCreateManyOrganizationInputEnvelope = {
        data: AssetCreateManyOrganizationInput | AssetCreateManyOrganizationInput[]
    };
    export type AppointmentCidCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        appointment: AppointmentCreateNestedOneWithoutCidsInput
        cid: CidCreateNestedOneWithoutAppointmentCidInput
    };
    export type AppointmentCidUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        appointmentId: string
        cidId: string
    };
    export type AppointmentCidCreateOrConnectWithoutOrganizationInput = {
        where: AppointmentCidWhereUniqueInput
        create: XOR<AppointmentCidCreateWithoutOrganizationInput, AppointmentCidUncheckedCreateWithoutOrganizationInput>
    };
    export type AppointmentCidCreateManyOrganizationInputEnvelope = {
        data: AppointmentCidCreateManyOrganizationInput | AppointmentCidCreateManyOrganizationInput[]
    };
    export type AppointmentCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutOrganizationInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutOrganizationInput, AppointmentUncheckedCreateWithoutOrganizationInput>
    };
    export type AppointmentCreateManyOrganizationInputEnvelope = {
        data: AppointmentCreateManyOrganizationInput | AppointmentCreateManyOrganizationInput[]
    };
    export type PatientCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutOrganizationInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutOrganizationInput, PatientUncheckedCreateWithoutOrganizationInput>
    };
    export type PatientCreateManyOrganizationInputEnvelope = {
        data: PatientCreateManyOrganizationInput | PatientCreateManyOrganizationInput[]
    };
    export type VaccinationsCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        patient: PatientCreateNestedOneWithoutVaccinationsInput
        vaccinationsValues: VaccinationsValuesCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        vaccinationsValuesId: string
    };
    export type VaccinationsCreateOrConnectWithoutOrganizationInput = {
        where: VaccinationsWhereUniqueInput
        create: XOR<VaccinationsCreateWithoutOrganizationInput, VaccinationsUncheckedCreateWithoutOrganizationInput>
    };
    export type VaccinationsCreateManyOrganizationInputEnvelope = {
        data: VaccinationsCreateManyOrganizationInput | VaccinationsCreateManyOrganizationInput[]
    };
    export type AllergiesCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesCreateOrConnectWithoutOrganizationInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutOrganizationInput, AllergiesUncheckedCreateWithoutOrganizationInput>
    };
    export type AllergiesCreateManyOrganizationInputEnvelope = {
        data: AllergiesCreateManyOrganizationInput | AllergiesCreateManyOrganizationInput[]
    };
    export type MedicationsCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateOrConnectWithoutOrganizationInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutOrganizationInput, MedicationsUncheckedCreateWithoutOrganizationInput>
    };
    export type MedicationsCreateManyOrganizationInputEnvelope = {
        data: MedicationsCreateManyOrganizationInput | MedicationsCreateManyOrganizationInput[]
    };
    export type ExamResultsCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        patient: PatientCreateNestedOneWithoutExamResultsInput
        examResultsValues: ExamResultsValuesCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsCreateOrConnectWithoutOrganizationInput = {
        where: ExamResultsWhereUniqueInput
        create: XOR<ExamResultsCreateWithoutOrganizationInput, ExamResultsUncheckedCreateWithoutOrganizationInput>
    };
    export type ExamResultsCreateManyOrganizationInputEnvelope = {
        data: ExamResultsCreateManyOrganizationInput | ExamResultsCreateManyOrganizationInput[]
    };
    export type ComorbiditiesCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesCreateOrConnectWithoutOrganizationInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutOrganizationInput, ComorbiditiesUncheckedCreateWithoutOrganizationInput>
    };
    export type ComorbiditiesCreateManyOrganizationInputEnvelope = {
        data: ComorbiditiesCreateManyOrganizationInput | ComorbiditiesCreateManyOrganizationInput[]
    };
    export type SurgeriesCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        patient: PatientCreateNestedOneWithoutSurgeriesInput
        surgeriesValues: SurgeriesValuesCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        surgeriesValuesId: string
    };
    export type SurgeriesCreateOrConnectWithoutOrganizationInput = {
        where: SurgeriesWhereUniqueInput
        create: XOR<SurgeriesCreateWithoutOrganizationInput, SurgeriesUncheckedCreateWithoutOrganizationInput>
    };
    export type SurgeriesCreateManyOrganizationInputEnvelope = {
        data: SurgeriesCreateManyOrganizationInput | SurgeriesCreateManyOrganizationInput[]
    };
    export type HealthPlansCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input
        patient: PatientCreateNestedOneWithoutHealthPlansInput
        healthPlansValues: HealthPlansValuesCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        healthPlansValuesId: string
    };
    export type HealthPlansCreateOrConnectWithoutOrganizationInput = {
        where: HealthPlansWhereUniqueInput
        create: XOR<HealthPlansCreateWithoutOrganizationInput, HealthPlansUncheckedCreateWithoutOrganizationInput>
    };
    export type HealthPlansCreateManyOrganizationInputEnvelope = {
        data: HealthPlansCreateManyOrganizationInput | HealthPlansCreateManyOrganizationInput[]
    };
    export type DefaultObjectiveInformationCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        text?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Defaul_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Defaul_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Defaul_0Input
    };
    export type DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        text?: string | null
    };
    export type DefaultObjectiveInformationCreateOrConnectWithoutOrganizationInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        create: XOR<DefaultObjectiveInformationCreateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput>
    };
    export type DefaultObjectiveInformationCreateManyOrganizationInputEnvelope = {
        data: DefaultObjectiveInformationCreateManyOrganizationInput | DefaultObjectiveInformationCreateManyOrganizationInput[]
    };
    export type EventCalendarCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_EventC_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        appointment?: AppointmentCreateNestedOneWithoutEventCalendarInput
    };
    export type EventCalendarUncheckedCreateWithoutOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type EventCalendarCreateOrConnectWithoutOrganizationInput = {
        where: EventCalendarWhereUniqueInput
        create: XOR<EventCalendarCreateWithoutOrganizationInput, EventCalendarUncheckedCreateWithoutOrganizationInput>
    };
    export type EventCalendarCreateManyOrganizationInputEnvelope = {
        data: EventCalendarCreateManyOrganizationInput | EventCalendarCreateManyOrganizationInput[]
    };
    export type MemberUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: MemberWhereUniqueInput
        update: XOR<MemberUpdateWithoutOrganizationInput, MemberUncheckedUpdateWithoutOrganizationInput>
        create: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput>
    };
    export type MemberUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: MemberWhereUniqueInput
        data: XOR<MemberUpdateWithoutOrganizationInput, MemberUncheckedUpdateWithoutOrganizationInput>
    };
    export type MemberUpdateManyWithWhereWithoutOrganizationInput = {
        where: MemberScalarWhereInput
        data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type InvitationUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: InvitationWhereUniqueInput
        update: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
        create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
    };
    export type InvitationUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: InvitationWhereUniqueInput
        data: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
    };
    export type InvitationUpdateManyWithWhereWithoutOrganizationInput = {
        where: InvitationScalarWhereInput
        data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type AssetUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: AssetWhereUniqueInput
        update: XOR<AssetUpdateWithoutOrganizationInput, AssetUncheckedUpdateWithoutOrganizationInput>
        create: XOR<AssetCreateWithoutOrganizationInput, AssetUncheckedCreateWithoutOrganizationInput>
    };
    export type AssetUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: AssetWhereUniqueInput
        data: XOR<AssetUpdateWithoutOrganizationInput, AssetUncheckedUpdateWithoutOrganizationInput>
    };
    export type AssetUpdateManyWithWhereWithoutOrganizationInput = {
        where: AssetScalarWhereInput
        data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type AppointmentCidUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: AppointmentCidWhereUniqueInput
        update: XOR<AppointmentCidUpdateWithoutOrganizationInput, AppointmentCidUncheckedUpdateWithoutOrganizationInput>
        create: XOR<AppointmentCidCreateWithoutOrganizationInput, AppointmentCidUncheckedCreateWithoutOrganizationInput>
    };
    export type AppointmentCidUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: AppointmentCidWhereUniqueInput
        data: XOR<AppointmentCidUpdateWithoutOrganizationInput, AppointmentCidUncheckedUpdateWithoutOrganizationInput>
    };
    export type AppointmentCidUpdateManyWithWhereWithoutOrganizationInput = {
        where: AppointmentCidScalarWhereInput
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type AppointmentUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: AppointmentWhereUniqueInput
        update: XOR<AppointmentUpdateWithoutOrganizationInput, AppointmentUncheckedUpdateWithoutOrganizationInput>
        create: XOR<AppointmentCreateWithoutOrganizationInput, AppointmentUncheckedCreateWithoutOrganizationInput>
    };
    export type AppointmentUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: AppointmentWhereUniqueInput
        data: XOR<AppointmentUpdateWithoutOrganizationInput, AppointmentUncheckedUpdateWithoutOrganizationInput>
    };
    export type AppointmentUpdateManyWithWhereWithoutOrganizationInput = {
        where: AppointmentScalarWhereInput
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type PatientUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: PatientWhereUniqueInput
        update: XOR<PatientUpdateWithoutOrganizationInput, PatientUncheckedUpdateWithoutOrganizationInput>
        create: XOR<PatientCreateWithoutOrganizationInput, PatientUncheckedCreateWithoutOrganizationInput>
    };
    export type PatientUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: PatientWhereUniqueInput
        data: XOR<PatientUpdateWithoutOrganizationInput, PatientUncheckedUpdateWithoutOrganizationInput>
    };
    export type PatientUpdateManyWithWhereWithoutOrganizationInput = {
        where: PatientScalarWhereInput
        data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type VaccinationsUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: VaccinationsWhereUniqueInput
        update: XOR<VaccinationsUpdateWithoutOrganizationInput, VaccinationsUncheckedUpdateWithoutOrganizationInput>
        create: XOR<VaccinationsCreateWithoutOrganizationInput, VaccinationsUncheckedCreateWithoutOrganizationInput>
    };
    export type VaccinationsUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: VaccinationsWhereUniqueInput
        data: XOR<VaccinationsUpdateWithoutOrganizationInput, VaccinationsUncheckedUpdateWithoutOrganizationInput>
    };
    export type VaccinationsUpdateManyWithWhereWithoutOrganizationInput = {
        where: VaccinationsScalarWhereInput
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type AllergiesUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutOrganizationInput, AllergiesUncheckedUpdateWithoutOrganizationInput>
        create: XOR<AllergiesCreateWithoutOrganizationInput, AllergiesUncheckedCreateWithoutOrganizationInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutOrganizationInput, AllergiesUncheckedUpdateWithoutOrganizationInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutOrganizationInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type MedicationsUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutOrganizationInput, MedicationsUncheckedUpdateWithoutOrganizationInput>
        create: XOR<MedicationsCreateWithoutOrganizationInput, MedicationsUncheckedCreateWithoutOrganizationInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutOrganizationInput, MedicationsUncheckedUpdateWithoutOrganizationInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutOrganizationInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type ExamResultsUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: ExamResultsWhereUniqueInput
        update: XOR<ExamResultsUpdateWithoutOrganizationInput, ExamResultsUncheckedUpdateWithoutOrganizationInput>
        create: XOR<ExamResultsCreateWithoutOrganizationInput, ExamResultsUncheckedCreateWithoutOrganizationInput>
    };
    export type ExamResultsUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: ExamResultsWhereUniqueInput
        data: XOR<ExamResultsUpdateWithoutOrganizationInput, ExamResultsUncheckedUpdateWithoutOrganizationInput>
    };
    export type ExamResultsUpdateManyWithWhereWithoutOrganizationInput = {
        where: ExamResultsScalarWhereInput
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutOrganizationInput, ComorbiditiesUncheckedUpdateWithoutOrganizationInput>
        create: XOR<ComorbiditiesCreateWithoutOrganizationInput, ComorbiditiesUncheckedCreateWithoutOrganizationInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutOrganizationInput, ComorbiditiesUncheckedUpdateWithoutOrganizationInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutOrganizationInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type SurgeriesUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: SurgeriesWhereUniqueInput
        update: XOR<SurgeriesUpdateWithoutOrganizationInput, SurgeriesUncheckedUpdateWithoutOrganizationInput>
        create: XOR<SurgeriesCreateWithoutOrganizationInput, SurgeriesUncheckedCreateWithoutOrganizationInput>
    };
    export type SurgeriesUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: SurgeriesWhereUniqueInput
        data: XOR<SurgeriesUpdateWithoutOrganizationInput, SurgeriesUncheckedUpdateWithoutOrganizationInput>
    };
    export type SurgeriesUpdateManyWithWhereWithoutOrganizationInput = {
        where: SurgeriesScalarWhereInput
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type HealthPlansUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: HealthPlansWhereUniqueInput
        update: XOR<HealthPlansUpdateWithoutOrganizationInput, HealthPlansUncheckedUpdateWithoutOrganizationInput>
        create: XOR<HealthPlansCreateWithoutOrganizationInput, HealthPlansUncheckedCreateWithoutOrganizationInput>
    };
    export type HealthPlansUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: HealthPlansWhereUniqueInput
        data: XOR<HealthPlansUpdateWithoutOrganizationInput, HealthPlansUncheckedUpdateWithoutOrganizationInput>
    };
    export type HealthPlansUpdateManyWithWhereWithoutOrganizationInput = {
        where: HealthPlansScalarWhereInput
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type DefaultObjectiveInformationUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        update: XOR<DefaultObjectiveInformationUpdateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedUpdateWithoutOrganizationInput>
        create: XOR<DefaultObjectiveInformationCreateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedCreateWithoutOrganizationInput>
    };
    export type DefaultObjectiveInformationUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: DefaultObjectiveInformationWhereUniqueInput
        data: XOR<DefaultObjectiveInformationUpdateWithoutOrganizationInput, DefaultObjectiveInformationUncheckedUpdateWithoutOrganizationInput>
    };
    export type DefaultObjectiveInformationUpdateManyWithWhereWithoutOrganizationInput = {
        where: DefaultObjectiveInformationScalarWhereInput
        data: XOR<DefaultObjectiveInformationUpdateManyMutationInput, DefaultObjectiveInformationUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type EventCalendarUpsertWithWhereUniqueWithoutOrganizationInput = {
        where: EventCalendarWhereUniqueInput
        update: XOR<EventCalendarUpdateWithoutOrganizationInput, EventCalendarUncheckedUpdateWithoutOrganizationInput>
        create: XOR<EventCalendarCreateWithoutOrganizationInput, EventCalendarUncheckedCreateWithoutOrganizationInput>
    };
    export type EventCalendarUpdateWithWhereUniqueWithoutOrganizationInput = {
        where: EventCalendarWhereUniqueInput
        data: XOR<EventCalendarUpdateWithoutOrganizationInput, EventCalendarUncheckedUpdateWithoutOrganizationInput>
    };
    export type EventCalendarUpdateManyWithWhereWithoutOrganizationInput = {
        where: EventCalendarScalarWhereInput
        data: XOR<EventCalendarUpdateManyMutationInput, EventCalendarUncheckedUpdateManyWithoutOrganizationInput>
    };
    export type OrganizationCreateWithoutMembersInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
        assets?: AssetCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutMembersInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
        assets?: AssetUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutMembersInput = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    };
    export type UserCreateWithoutMembersInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutMembersInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutMembersInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    };
    export type OrganizationUpsertWithoutMembersInput = {
        update: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
        create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutMembersInput = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
    };
    export type OrganizationUpdateWithoutMembersInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
        assets?: AssetUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutMembersInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
        assets?: AssetUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type UserUpsertWithoutMembersInput = {
        update: XOR<UserUpdateWithoutMembersInput, UserUncheckedUpdateWithoutMembersInput>
        create: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutMembersInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutMembersInput, UserUncheckedUpdateWithoutMembersInput>
    };
    export type UserUpdateWithoutMembersInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutMembersInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type OrganizationCreateWithoutInvitationsInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        assets?: AssetCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutInvitationsInput = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        assets?: AssetUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutInvitationsInput = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    };
    export type UserCreateWithoutInvitationsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutInvitationsInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutInvitationsInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    };
    export type OrganizationUpsertWithoutInvitationsInput = {
        update: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
        create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutInvitationsInput = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
    };
    export type OrganizationUpdateWithoutInvitationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        assets?: AssetUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutInvitationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        assets?: AssetUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type UserUpsertWithoutInvitationsInput = {
        update: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
        create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutInvitationsInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
    };
    export type UserUpdateWithoutInvitationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutInvitationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type AppointmentCidCreateWithoutCidInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input
        appointment: AppointmentCreateNestedOneWithoutCidsInput
    };
    export type AppointmentCidUncheckedCreateWithoutCidInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
    };
    export type AppointmentCidCreateOrConnectWithoutCidInput = {
        where: AppointmentCidWhereUniqueInput
        create: XOR<AppointmentCidCreateWithoutCidInput, AppointmentCidUncheckedCreateWithoutCidInput>
    };
    export type AppointmentCidCreateManyCidInputEnvelope = {
        data: AppointmentCidCreateManyCidInput | AppointmentCidCreateManyCidInput[]
    };
    export type AppointmentCidUpsertWithWhereUniqueWithoutCidInput = {
        where: AppointmentCidWhereUniqueInput
        update: XOR<AppointmentCidUpdateWithoutCidInput, AppointmentCidUncheckedUpdateWithoutCidInput>
        create: XOR<AppointmentCidCreateWithoutCidInput, AppointmentCidUncheckedCreateWithoutCidInput>
    };
    export type AppointmentCidUpdateWithWhereUniqueWithoutCidInput = {
        where: AppointmentCidWhereUniqueInput
        data: XOR<AppointmentCidUpdateWithoutCidInput, AppointmentCidUncheckedUpdateWithoutCidInput>
    };
    export type AppointmentCidUpdateManyWithWhereWithoutCidInput = {
        where: AppointmentCidScalarWhereInput
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyWithoutCidInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
    };
    export type AppointmentCreateWithoutCidsInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutCidsInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutCidsInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutCidsInput, AppointmentUncheckedCreateWithoutCidsInput>
    };
    export type CidCreateWithoutAppointmentCidInput = {
        id?: string
        code: string
        description: string
        createdAt?: Date | string
        updatedAt?: Date | string | null
    };
    export type CidUncheckedCreateWithoutAppointmentCidInput = {
        id?: string
        code: string
        description: string
        createdAt?: Date | string
        updatedAt?: Date | string | null
    };
    export type CidCreateOrConnectWithoutAppointmentCidInput = {
        where: CidWhereUniqueInput
        create: XOR<CidCreateWithoutAppointmentCidInput, CidUncheckedCreateWithoutAppointmentCidInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type AppointmentUpsertWithoutCidsInput = {
        update: XOR<AppointmentUpdateWithoutCidsInput, AppointmentUncheckedUpdateWithoutCidsInput>
        create: XOR<AppointmentCreateWithoutCidsInput, AppointmentUncheckedCreateWithoutCidsInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutCidsInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutCidsInput, AppointmentUncheckedUpdateWithoutCidsInput>
    };
    export type AppointmentUpdateWithoutCidsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutCidsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type CidUpsertWithoutAppointmentCidInput = {
        update: XOR<CidUpdateWithoutAppointmentCidInput, CidUncheckedUpdateWithoutAppointmentCidInput>
        create: XOR<CidCreateWithoutAppointmentCidInput, CidUncheckedCreateWithoutAppointmentCidInput>
        where?: CidWhereInput
    };
    export type CidUpdateToOneWithWhereWithoutAppointmentCidInput = {
        where?: CidWhereInput
        data: XOR<CidUpdateWithoutAppointmentCidInput, CidUncheckedUpdateWithoutAppointmentCidInput>
    };
    export type CidUpdateWithoutAppointmentCidInput = {
        id?: StringFieldUpdateOperationsInput | string
        code?: StringFieldUpdateOperationsInput | string
        description?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type CidUncheckedUpdateWithoutAppointmentCidInput = {
        id?: StringFieldUpdateOperationsInput | string
        code?: StringFieldUpdateOperationsInput | string
        description?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
    };
    export type AppointmentCreateWithoutPredecessorFollowUpInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutPredecessorFollowUpInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutPredecessorFollowUpInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutPredecessorFollowUpInput, AppointmentUncheckedCreateWithoutPredecessorFollowUpInput>
    };
    export type AppointmentCreateWithoutFollowUpInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutFollowUpInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutFollowUpInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutFollowUpInput, AppointmentUncheckedCreateWithoutFollowUpInput>
    };
    export type AppointmentCidCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_0Input
        cid: CidCreateNestedOneWithoutAppointmentCidInput
    };
    export type AppointmentCidUncheckedCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        cidId: string
    };
    export type AppointmentCidCreateOrConnectWithoutAppointmentInput = {
        where: AppointmentCidWhereUniqueInput
        create: XOR<AppointmentCidCreateWithoutAppointmentInput, AppointmentCidUncheckedCreateWithoutAppointmentInput>
    };
    export type AppointmentCidCreateManyAppointmentInputEnvelope = {
        data: AppointmentCidCreateManyAppointmentInput | AppointmentCidCreateManyAppointmentInput[]
    };
    export type AllergiesCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
    };
    export type AllergiesCreateOrConnectWithoutAppointmentInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutAppointmentInput, AllergiesUncheckedCreateWithoutAppointmentInput>
    };
    export type AllergiesCreateManyAppointmentInputEnvelope = {
        data: AllergiesCreateManyAppointmentInput | AllergiesCreateManyAppointmentInput[]
    };
    export type MedicationsCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
    };
    export type MedicationsCreateOrConnectWithoutAppointmentInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutAppointmentInput, MedicationsUncheckedCreateWithoutAppointmentInput>
    };
    export type MedicationsCreateManyAppointmentInputEnvelope = {
        data: MedicationsCreateManyAppointmentInput | MedicationsCreateManyAppointmentInput[]
    };
    export type ComorbiditiesCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
    };
    export type ComorbiditiesCreateOrConnectWithoutAppointmentInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutAppointmentInput, ComorbiditiesUncheckedCreateWithoutAppointmentInput>
    };
    export type ComorbiditiesCreateManyAppointmentInputEnvelope = {
        data: ComorbiditiesCreateManyAppointmentInput | ComorbiditiesCreateManyAppointmentInput[]
    };
    export type PatientCreateWithoutAppointmentsInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutAppointmentsInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutAppointmentsInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    };
    export type EventCalendarCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_EventC_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_EventC_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_EventC_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Event_0Input
    };
    export type EventCalendarUncheckedCreateWithoutAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
    };
    export type EventCalendarCreateOrConnectWithoutAppointmentInput = {
        where: EventCalendarWhereUniqueInput
        create: XOR<EventCalendarCreateWithoutAppointmentInput, EventCalendarUncheckedCreateWithoutAppointmentInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Appoin_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Appoin_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Appoin_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Appoi_1Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type AppointmentUpsertWithoutPredecessorFollowUpInput = {
        update: XOR<AppointmentUpdateWithoutPredecessorFollowUpInput, AppointmentUncheckedUpdateWithoutPredecessorFollowUpInput>
        create: XOR<AppointmentCreateWithoutPredecessorFollowUpInput, AppointmentUncheckedCreateWithoutPredecessorFollowUpInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutPredecessorFollowUpInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutPredecessorFollowUpInput, AppointmentUncheckedUpdateWithoutPredecessorFollowUpInput>
    };
    export type AppointmentUpdateWithoutPredecessorFollowUpInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutPredecessorFollowUpInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUpsertWithoutFollowUpInput = {
        update: XOR<AppointmentUpdateWithoutFollowUpInput, AppointmentUncheckedUpdateWithoutFollowUpInput>
        create: XOR<AppointmentCreateWithoutFollowUpInput, AppointmentUncheckedCreateWithoutFollowUpInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutFollowUpInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutFollowUpInput, AppointmentUncheckedUpdateWithoutFollowUpInput>
    };
    export type AppointmentUpdateWithoutFollowUpInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutFollowUpInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentCidUpsertWithWhereUniqueWithoutAppointmentInput = {
        where: AppointmentCidWhereUniqueInput
        update: XOR<AppointmentCidUpdateWithoutAppointmentInput, AppointmentCidUncheckedUpdateWithoutAppointmentInput>
        create: XOR<AppointmentCidCreateWithoutAppointmentInput, AppointmentCidUncheckedCreateWithoutAppointmentInput>
    };
    export type AppointmentCidUpdateWithWhereUniqueWithoutAppointmentInput = {
        where: AppointmentCidWhereUniqueInput
        data: XOR<AppointmentCidUpdateWithoutAppointmentInput, AppointmentCidUncheckedUpdateWithoutAppointmentInput>
    };
    export type AppointmentCidUpdateManyWithWhereWithoutAppointmentInput = {
        where: AppointmentCidScalarWhereInput
        data: XOR<AppointmentCidUpdateManyMutationInput, AppointmentCidUncheckedUpdateManyWithoutAppointmentInput>
    };
    export type AllergiesUpsertWithWhereUniqueWithoutAppointmentInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutAppointmentInput, AllergiesUncheckedUpdateWithoutAppointmentInput>
        create: XOR<AllergiesCreateWithoutAppointmentInput, AllergiesUncheckedCreateWithoutAppointmentInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutAppointmentInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutAppointmentInput, AllergiesUncheckedUpdateWithoutAppointmentInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutAppointmentInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutAppointmentInput>
    };
    export type MedicationsUpsertWithWhereUniqueWithoutAppointmentInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutAppointmentInput, MedicationsUncheckedUpdateWithoutAppointmentInput>
        create: XOR<MedicationsCreateWithoutAppointmentInput, MedicationsUncheckedCreateWithoutAppointmentInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutAppointmentInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutAppointmentInput, MedicationsUncheckedUpdateWithoutAppointmentInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutAppointmentInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutAppointmentInput>
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutAppointmentInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutAppointmentInput, ComorbiditiesUncheckedUpdateWithoutAppointmentInput>
        create: XOR<ComorbiditiesCreateWithoutAppointmentInput, ComorbiditiesUncheckedCreateWithoutAppointmentInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutAppointmentInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutAppointmentInput, ComorbiditiesUncheckedUpdateWithoutAppointmentInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutAppointmentInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutAppointmentInput>
    };
    export type PatientUpsertWithoutAppointmentsInput = {
        update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
        create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutAppointmentsInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    };
    export type PatientUpdateWithoutAppointmentsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutAppointmentsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type EventCalendarUpsertWithoutAppointmentInput = {
        update: XOR<EventCalendarUpdateWithoutAppointmentInput, EventCalendarUncheckedUpdateWithoutAppointmentInput>
        create: XOR<EventCalendarCreateWithoutAppointmentInput, EventCalendarUncheckedCreateWithoutAppointmentInput>
        where?: EventCalendarWhereInput
    };
    export type EventCalendarUpdateToOneWithWhereWithoutAppointmentInput = {
        where?: EventCalendarWhereInput
        data: XOR<EventCalendarUpdateWithoutAppointmentInput, EventCalendarUncheckedUpdateWithoutAppointmentInput>
    };
    export type EventCalendarUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_EventC_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_EventC_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_EventC_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Event_0NestedInput
    };
    export type EventCalendarUncheckedUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Patie_0Input>
    };
    export type UserCreateWithoutPatientUserInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutPatientUserInput = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutPatientUserInput = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutPatientUserInput, UserUncheckedCreateWithoutPatientUserInput>
    };
    export type AppointmentCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutPatientInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
    };
    export type AppointmentCreateManyPatientInputEnvelope = {
        data: AppointmentCreateManyPatientInput | AppointmentCreateManyPatientInput[]
    };
    export type VaccinationsCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input
        vaccinationsValues: VaccinationsValuesCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        vaccinationsValuesId: string
    };
    export type VaccinationsCreateOrConnectWithoutPatientInput = {
        where: VaccinationsWhereUniqueInput
        create: XOR<VaccinationsCreateWithoutPatientInput, VaccinationsUncheckedCreateWithoutPatientInput>
    };
    export type VaccinationsCreateManyPatientInputEnvelope = {
        data: VaccinationsCreateManyPatientInput | VaccinationsCreateManyPatientInput[]
    };
    export type AllergiesCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        allergiesValues: AllergiesValuesCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type AllergiesCreateOrConnectWithoutPatientInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutPatientInput, AllergiesUncheckedCreateWithoutPatientInput>
    };
    export type AllergiesCreateManyPatientInputEnvelope = {
        data: AllergiesCreateManyPatientInput | AllergiesCreateManyPatientInput[]
    };
    export type MedicationsCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        medicationsValues: MedicationsValuesCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateOrConnectWithoutPatientInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutPatientInput, MedicationsUncheckedCreateWithoutPatientInput>
    };
    export type MedicationsCreateManyPatientInputEnvelope = {
        data: MedicationsCreateManyPatientInput | MedicationsCreateManyPatientInput[]
    };
    export type ExamResultsCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input
        examResultsValues: ExamResultsValuesCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ExamResultsCreateOrConnectWithoutPatientInput = {
        where: ExamResultsWhereUniqueInput
        create: XOR<ExamResultsCreateWithoutPatientInput, ExamResultsUncheckedCreateWithoutPatientInput>
    };
    export type ExamResultsCreateManyPatientInputEnvelope = {
        data: ExamResultsCreateManyPatientInput | ExamResultsCreateManyPatientInput[]
    };
    export type ComorbiditiesCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        comorbiditiesValues: ComorbiditiesValuesCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type ComorbiditiesCreateOrConnectWithoutPatientInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutPatientInput, ComorbiditiesUncheckedCreateWithoutPatientInput>
    };
    export type ComorbiditiesCreateManyPatientInputEnvelope = {
        data: ComorbiditiesCreateManyPatientInput | ComorbiditiesCreateManyPatientInput[]
    };
    export type SurgeriesCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input
        surgeriesValues: SurgeriesValuesCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        surgeriesValuesId: string
    };
    export type SurgeriesCreateOrConnectWithoutPatientInput = {
        where: SurgeriesWhereUniqueInput
        create: XOR<SurgeriesCreateWithoutPatientInput, SurgeriesUncheckedCreateWithoutPatientInput>
    };
    export type SurgeriesCreateManyPatientInputEnvelope = {
        data: SurgeriesCreateManyPatientInput | SurgeriesCreateManyPatientInput[]
    };
    export type HealthPlansCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input
        healthPlansValues: HealthPlansValuesCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateWithoutPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        healthPlansValuesId: string
    };
    export type HealthPlansCreateOrConnectWithoutPatientInput = {
        where: HealthPlansWhereUniqueInput
        create: XOR<HealthPlansCreateWithoutPatientInput, HealthPlansUncheckedCreateWithoutPatientInput>
    };
    export type HealthPlansCreateManyPatientInputEnvelope = {
        data: HealthPlansCreateManyPatientInput | HealthPlansCreateManyPatientInput[]
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Patien_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Patien_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Patien_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Patie_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Patie_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type UserUpsertWithoutPatientUserInput = {
        update: XOR<UserUpdateWithoutPatientUserInput, UserUncheckedUpdateWithoutPatientUserInput>
        create: XOR<UserCreateWithoutPatientUserInput, UserUncheckedCreateWithoutPatientUserInput>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutPatientUserInput = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutPatientUserInput, UserUncheckedUpdateWithoutPatientUserInput>
    };
    export type UserUpdateWithoutPatientUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutPatientUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
        where: AppointmentWhereUniqueInput
        update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
        create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
    };
    export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
        where: AppointmentWhereUniqueInput
        data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    };
    export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
        where: AppointmentScalarWhereInput
        data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientInput>
    };
    export type VaccinationsUpsertWithWhereUniqueWithoutPatientInput = {
        where: VaccinationsWhereUniqueInput
        update: XOR<VaccinationsUpdateWithoutPatientInput, VaccinationsUncheckedUpdateWithoutPatientInput>
        create: XOR<VaccinationsCreateWithoutPatientInput, VaccinationsUncheckedCreateWithoutPatientInput>
    };
    export type VaccinationsUpdateWithWhereUniqueWithoutPatientInput = {
        where: VaccinationsWhereUniqueInput
        data: XOR<VaccinationsUpdateWithoutPatientInput, VaccinationsUncheckedUpdateWithoutPatientInput>
    };
    export type VaccinationsUpdateManyWithWhereWithoutPatientInput = {
        where: VaccinationsScalarWhereInput
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyWithoutPatientInput>
    };
    export type AllergiesUpsertWithWhereUniqueWithoutPatientInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutPatientInput, AllergiesUncheckedUpdateWithoutPatientInput>
        create: XOR<AllergiesCreateWithoutPatientInput, AllergiesUncheckedCreateWithoutPatientInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutPatientInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutPatientInput, AllergiesUncheckedUpdateWithoutPatientInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutPatientInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutPatientInput>
    };
    export type MedicationsUpsertWithWhereUniqueWithoutPatientInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutPatientInput, MedicationsUncheckedUpdateWithoutPatientInput>
        create: XOR<MedicationsCreateWithoutPatientInput, MedicationsUncheckedCreateWithoutPatientInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutPatientInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutPatientInput, MedicationsUncheckedUpdateWithoutPatientInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutPatientInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutPatientInput>
    };
    export type ExamResultsUpsertWithWhereUniqueWithoutPatientInput = {
        where: ExamResultsWhereUniqueInput
        update: XOR<ExamResultsUpdateWithoutPatientInput, ExamResultsUncheckedUpdateWithoutPatientInput>
        create: XOR<ExamResultsCreateWithoutPatientInput, ExamResultsUncheckedCreateWithoutPatientInput>
    };
    export type ExamResultsUpdateWithWhereUniqueWithoutPatientInput = {
        where: ExamResultsWhereUniqueInput
        data: XOR<ExamResultsUpdateWithoutPatientInput, ExamResultsUncheckedUpdateWithoutPatientInput>
    };
    export type ExamResultsUpdateManyWithWhereWithoutPatientInput = {
        where: ExamResultsScalarWhereInput
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyWithoutPatientInput>
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutPatientInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutPatientInput, ComorbiditiesUncheckedUpdateWithoutPatientInput>
        create: XOR<ComorbiditiesCreateWithoutPatientInput, ComorbiditiesUncheckedCreateWithoutPatientInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutPatientInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutPatientInput, ComorbiditiesUncheckedUpdateWithoutPatientInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutPatientInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutPatientInput>
    };
    export type SurgeriesUpsertWithWhereUniqueWithoutPatientInput = {
        where: SurgeriesWhereUniqueInput
        update: XOR<SurgeriesUpdateWithoutPatientInput, SurgeriesUncheckedUpdateWithoutPatientInput>
        create: XOR<SurgeriesCreateWithoutPatientInput, SurgeriesUncheckedCreateWithoutPatientInput>
    };
    export type SurgeriesUpdateWithWhereUniqueWithoutPatientInput = {
        where: SurgeriesWhereUniqueInput
        data: XOR<SurgeriesUpdateWithoutPatientInput, SurgeriesUncheckedUpdateWithoutPatientInput>
    };
    export type SurgeriesUpdateManyWithWhereWithoutPatientInput = {
        where: SurgeriesScalarWhereInput
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyWithoutPatientInput>
    };
    export type HealthPlansUpsertWithWhereUniqueWithoutPatientInput = {
        where: HealthPlansWhereUniqueInput
        update: XOR<HealthPlansUpdateWithoutPatientInput, HealthPlansUncheckedUpdateWithoutPatientInput>
        create: XOR<HealthPlansCreateWithoutPatientInput, HealthPlansUncheckedCreateWithoutPatientInput>
    };
    export type HealthPlansUpdateWithWhereUniqueWithoutPatientInput = {
        where: HealthPlansWhereUniqueInput
        data: XOR<HealthPlansUpdateWithoutPatientInput, HealthPlansUncheckedUpdateWithoutPatientInput>
    };
    export type HealthPlansUpdateManyWithWhereWithoutPatientInput = {
        where: HealthPlansScalarWhereInput
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyWithoutPatientInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
    };
    export type PatientCreateWithoutVaccinationsInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutVaccinationsInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutVaccinationsInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutVaccinationsInput, PatientUncheckedCreateWithoutVaccinationsInput>
    };
    export type VaccinationsValuesCreateWithoutVaccinationsInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type VaccinationsValuesUncheckedCreateWithoutVaccinationsInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type VaccinationsValuesCreateOrConnectWithoutVaccinationsInput = {
        where: VaccinationsValuesWhereUniqueInput
        create: XOR<VaccinationsValuesCreateWithoutVaccinationsInput, VaccinationsValuesUncheckedCreateWithoutVaccinationsInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Vaccin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Vacci_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutVaccinationsInput = {
        update: XOR<PatientUpdateWithoutVaccinationsInput, PatientUncheckedUpdateWithoutVaccinationsInput>
        create: XOR<PatientCreateWithoutVaccinationsInput, PatientUncheckedCreateWithoutVaccinationsInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutVaccinationsInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutVaccinationsInput, PatientUncheckedUpdateWithoutVaccinationsInput>
    };
    export type PatientUpdateWithoutVaccinationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutVaccinationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type VaccinationsValuesUpsertWithoutVaccinationsInput = {
        update: XOR<VaccinationsValuesUpdateWithoutVaccinationsInput, VaccinationsValuesUncheckedUpdateWithoutVaccinationsInput>
        create: XOR<VaccinationsValuesCreateWithoutVaccinationsInput, VaccinationsValuesUncheckedCreateWithoutVaccinationsInput>
        where?: VaccinationsValuesWhereInput
    };
    export type VaccinationsValuesUpdateToOneWithWhereWithoutVaccinationsInput = {
        where?: VaccinationsValuesWhereInput
        data: XOR<VaccinationsValuesUpdateWithoutVaccinationsInput, VaccinationsValuesUncheckedUpdateWithoutVaccinationsInput>
    };
    export type VaccinationsValuesUpdateWithoutVaccinationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VaccinationsValuesUncheckedUpdateWithoutVaccinationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type VaccinationsCreateWithoutVaccinationsValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Vaccin_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Vacci_0Input
        patient: PatientCreateNestedOneWithoutVaccinationsInput
    };
    export type VaccinationsUncheckedCreateWithoutVaccinationsValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
    };
    export type VaccinationsCreateOrConnectWithoutVaccinationsValuesInput = {
        where: VaccinationsWhereUniqueInput
        create: XOR<VaccinationsCreateWithoutVaccinationsValuesInput, VaccinationsUncheckedCreateWithoutVaccinationsValuesInput>
    };
    export type VaccinationsCreateManyVaccinationsValuesInputEnvelope = {
        data: VaccinationsCreateManyVaccinationsValuesInput | VaccinationsCreateManyVaccinationsValuesInput[]
    };
    export type VaccinationsUpsertWithWhereUniqueWithoutVaccinationsValuesInput = {
        where: VaccinationsWhereUniqueInput
        update: XOR<VaccinationsUpdateWithoutVaccinationsValuesInput, VaccinationsUncheckedUpdateWithoutVaccinationsValuesInput>
        create: XOR<VaccinationsCreateWithoutVaccinationsValuesInput, VaccinationsUncheckedCreateWithoutVaccinationsValuesInput>
    };
    export type VaccinationsUpdateWithWhereUniqueWithoutVaccinationsValuesInput = {
        where: VaccinationsWhereUniqueInput
        data: XOR<VaccinationsUpdateWithoutVaccinationsValuesInput, VaccinationsUncheckedUpdateWithoutVaccinationsValuesInput>
    };
    export type VaccinationsUpdateManyWithWhereWithoutVaccinationsValuesInput = {
        where: VaccinationsScalarWhereInput
        data: XOR<VaccinationsUpdateManyMutationInput, VaccinationsUncheckedUpdateManyWithoutVaccinationsValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Aller_0Input>
    };
    export type PatientCreateWithoutAllergiesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutAllergiesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutAllergiesInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutAllergiesInput, PatientUncheckedCreateWithoutAllergiesInput>
    };
    export type AllergiesValuesCreateWithoutAllergiesInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type AllergiesValuesUncheckedCreateWithoutAllergiesInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type AllergiesValuesCreateOrConnectWithoutAllergiesInput = {
        where: AllergiesValuesWhereUniqueInput
        create: XOR<AllergiesValuesCreateWithoutAllergiesInput, AllergiesValuesUncheckedCreateWithoutAllergiesInput>
    };
    export type AppointmentCreateWithoutAllergiesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutAllergiesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutAllergiesInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutAllergiesInput, AppointmentUncheckedCreateWithoutAllergiesInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Allerg_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Allerg_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Allerg_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Aller_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Aller_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutAllergiesInput = {
        update: XOR<PatientUpdateWithoutAllergiesInput, PatientUncheckedUpdateWithoutAllergiesInput>
        create: XOR<PatientCreateWithoutAllergiesInput, PatientUncheckedCreateWithoutAllergiesInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutAllergiesInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutAllergiesInput, PatientUncheckedUpdateWithoutAllergiesInput>
    };
    export type PatientUpdateWithoutAllergiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutAllergiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type AllergiesValuesUpsertWithoutAllergiesInput = {
        update: XOR<AllergiesValuesUpdateWithoutAllergiesInput, AllergiesValuesUncheckedUpdateWithoutAllergiesInput>
        create: XOR<AllergiesValuesCreateWithoutAllergiesInput, AllergiesValuesUncheckedCreateWithoutAllergiesInput>
        where?: AllergiesValuesWhereInput
    };
    export type AllergiesValuesUpdateToOneWithWhereWithoutAllergiesInput = {
        where?: AllergiesValuesWhereInput
        data: XOR<AllergiesValuesUpdateWithoutAllergiesInput, AllergiesValuesUncheckedUpdateWithoutAllergiesInput>
    };
    export type AllergiesValuesUpdateWithoutAllergiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AllergiesValuesUncheckedUpdateWithoutAllergiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AppointmentUpsertWithoutAllergiesInput = {
        update: XOR<AppointmentUpdateWithoutAllergiesInput, AppointmentUncheckedUpdateWithoutAllergiesInput>
        create: XOR<AppointmentCreateWithoutAllergiesInput, AppointmentUncheckedCreateWithoutAllergiesInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutAllergiesInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutAllergiesInput, AppointmentUncheckedUpdateWithoutAllergiesInput>
    };
    export type AppointmentUpdateWithoutAllergiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutAllergiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AllergiesCreateWithoutAllergiesValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Allerg_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Allerg_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Allerg_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Aller_0Input
        patient?: PatientCreateNestedOneWithoutAllergiesInput
        appointment?: AppointmentCreateNestedOneWithoutAllergiesInput
    };
    export type AllergiesUncheckedCreateWithoutAllergiesValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        appointmentId?: string | null
    };
    export type AllergiesCreateOrConnectWithoutAllergiesValuesInput = {
        where: AllergiesWhereUniqueInput
        create: XOR<AllergiesCreateWithoutAllergiesValuesInput, AllergiesUncheckedCreateWithoutAllergiesValuesInput>
    };
    export type AllergiesCreateManyAllergiesValuesInputEnvelope = {
        data: AllergiesCreateManyAllergiesValuesInput | AllergiesCreateManyAllergiesValuesInput[]
    };
    export type AllergiesUpsertWithWhereUniqueWithoutAllergiesValuesInput = {
        where: AllergiesWhereUniqueInput
        update: XOR<AllergiesUpdateWithoutAllergiesValuesInput, AllergiesUncheckedUpdateWithoutAllergiesValuesInput>
        create: XOR<AllergiesCreateWithoutAllergiesValuesInput, AllergiesUncheckedCreateWithoutAllergiesValuesInput>
    };
    export type AllergiesUpdateWithWhereUniqueWithoutAllergiesValuesInput = {
        where: AllergiesWhereUniqueInput
        data: XOR<AllergiesUpdateWithoutAllergiesValuesInput, AllergiesUncheckedUpdateWithoutAllergiesValuesInput>
    };
    export type AllergiesUpdateManyWithWhereWithoutAllergiesValuesInput = {
        where: AllergiesScalarWhereInput
        data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyWithoutAllergiesValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Medic_0Input>
    };
    export type PatientCreateWithoutMedicationsInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutMedicationsInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutMedicationsInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutMedicationsInput, PatientUncheckedCreateWithoutMedicationsInput>
    };
    export type MedicationsValuesCreateWithoutMedicationsInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type MedicationsValuesUncheckedCreateWithoutMedicationsInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type MedicationsValuesCreateOrConnectWithoutMedicationsInput = {
        where: MedicationsValuesWhereUniqueInput
        create: XOR<MedicationsValuesCreateWithoutMedicationsInput, MedicationsValuesUncheckedCreateWithoutMedicationsInput>
    };
    export type AppointmentCreateWithoutMedicationsInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutMedicationsInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutMedicationsInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutMedicationsInput, AppointmentUncheckedCreateWithoutMedicationsInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Medica_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Medica_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Medica_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Medic_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Medic_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutMedicationsInput = {
        update: XOR<PatientUpdateWithoutMedicationsInput, PatientUncheckedUpdateWithoutMedicationsInput>
        create: XOR<PatientCreateWithoutMedicationsInput, PatientUncheckedCreateWithoutMedicationsInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutMedicationsInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutMedicationsInput, PatientUncheckedUpdateWithoutMedicationsInput>
    };
    export type PatientUpdateWithoutMedicationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutMedicationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type MedicationsValuesUpsertWithoutMedicationsInput = {
        update: XOR<MedicationsValuesUpdateWithoutMedicationsInput, MedicationsValuesUncheckedUpdateWithoutMedicationsInput>
        create: XOR<MedicationsValuesCreateWithoutMedicationsInput, MedicationsValuesUncheckedCreateWithoutMedicationsInput>
        where?: MedicationsValuesWhereInput
    };
    export type MedicationsValuesUpdateToOneWithWhereWithoutMedicationsInput = {
        where?: MedicationsValuesWhereInput
        data: XOR<MedicationsValuesUpdateWithoutMedicationsInput, MedicationsValuesUncheckedUpdateWithoutMedicationsInput>
    };
    export type MedicationsValuesUpdateWithoutMedicationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MedicationsValuesUncheckedUpdateWithoutMedicationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AppointmentUpsertWithoutMedicationsInput = {
        update: XOR<AppointmentUpdateWithoutMedicationsInput, AppointmentUncheckedUpdateWithoutMedicationsInput>
        create: XOR<AppointmentCreateWithoutMedicationsInput, AppointmentUncheckedCreateWithoutMedicationsInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutMedicationsInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutMedicationsInput, AppointmentUncheckedUpdateWithoutMedicationsInput>
    };
    export type AppointmentUpdateWithoutMedicationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutMedicationsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type MedicationsCreateWithoutMedicationsValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Medica_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Medica_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Medica_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Medic_0Input
        patient?: PatientCreateNestedOneWithoutMedicationsInput
        appointment?: AppointmentCreateNestedOneWithoutMedicationsInput
    };
    export type MedicationsUncheckedCreateWithoutMedicationsValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        appointmentId?: string | null
    };
    export type MedicationsCreateOrConnectWithoutMedicationsValuesInput = {
        where: MedicationsWhereUniqueInput
        create: XOR<MedicationsCreateWithoutMedicationsValuesInput, MedicationsUncheckedCreateWithoutMedicationsValuesInput>
    };
    export type MedicationsCreateManyMedicationsValuesInputEnvelope = {
        data: MedicationsCreateManyMedicationsValuesInput | MedicationsCreateManyMedicationsValuesInput[]
    };
    export type MedicationsUpsertWithWhereUniqueWithoutMedicationsValuesInput = {
        where: MedicationsWhereUniqueInput
        update: XOR<MedicationsUpdateWithoutMedicationsValuesInput, MedicationsUncheckedUpdateWithoutMedicationsValuesInput>
        create: XOR<MedicationsCreateWithoutMedicationsValuesInput, MedicationsUncheckedCreateWithoutMedicationsValuesInput>
    };
    export type MedicationsUpdateWithWhereUniqueWithoutMedicationsValuesInput = {
        where: MedicationsWhereUniqueInput
        data: XOR<MedicationsUpdateWithoutMedicationsValuesInput, MedicationsUncheckedUpdateWithoutMedicationsValuesInput>
    };
    export type MedicationsUpdateManyWithWhereWithoutMedicationsValuesInput = {
        where: MedicationsScalarWhereInput
        data: XOR<MedicationsUpdateManyMutationInput, MedicationsUncheckedUpdateManyWithoutMedicationsValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
    };
    export type PatientCreateWithoutExamResultsInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutExamResultsInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutExamResultsInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutExamResultsInput, PatientUncheckedCreateWithoutExamResultsInput>
    };
    export type ExamResultsValuesCreateWithoutExamResultsInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type ExamResultsValuesUncheckedCreateWithoutExamResultsInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type ExamResultsValuesCreateOrConnectWithoutExamResultsInput = {
        where: ExamResultsValuesWhereUniqueInput
        create: XOR<ExamResultsValuesCreateWithoutExamResultsInput, ExamResultsValuesUncheckedCreateWithoutExamResultsInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_ExamRe_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_ExamR_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutExamResultsInput = {
        update: XOR<PatientUpdateWithoutExamResultsInput, PatientUncheckedUpdateWithoutExamResultsInput>
        create: XOR<PatientCreateWithoutExamResultsInput, PatientUncheckedCreateWithoutExamResultsInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutExamResultsInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutExamResultsInput, PatientUncheckedUpdateWithoutExamResultsInput>
    };
    export type PatientUpdateWithoutExamResultsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutExamResultsInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type ExamResultsValuesUpsertWithoutExamResultsInput = {
        update: XOR<ExamResultsValuesUpdateWithoutExamResultsInput, ExamResultsValuesUncheckedUpdateWithoutExamResultsInput>
        create: XOR<ExamResultsValuesCreateWithoutExamResultsInput, ExamResultsValuesUncheckedCreateWithoutExamResultsInput>
        where?: ExamResultsValuesWhereInput
    };
    export type ExamResultsValuesUpdateToOneWithWhereWithoutExamResultsInput = {
        where?: ExamResultsValuesWhereInput
        data: XOR<ExamResultsValuesUpdateWithoutExamResultsInput, ExamResultsValuesUncheckedUpdateWithoutExamResultsInput>
    };
    export type ExamResultsValuesUpdateWithoutExamResultsInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsValuesUncheckedUpdateWithoutExamResultsInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsCreateWithoutExamResultsValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        result: string
        date: Date | string
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_ExamRe_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_ExamR_0Input
        patient: PatientCreateNestedOneWithoutExamResultsInput
    };
    export type ExamResultsUncheckedCreateWithoutExamResultsValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        result: string
        date: Date | string
    };
    export type ExamResultsCreateOrConnectWithoutExamResultsValuesInput = {
        where: ExamResultsWhereUniqueInput
        create: XOR<ExamResultsCreateWithoutExamResultsValuesInput, ExamResultsUncheckedCreateWithoutExamResultsValuesInput>
    };
    export type ExamResultsCreateManyExamResultsValuesInputEnvelope = {
        data: ExamResultsCreateManyExamResultsValuesInput | ExamResultsCreateManyExamResultsValuesInput[]
    };
    export type ExamResultsUpsertWithWhereUniqueWithoutExamResultsValuesInput = {
        where: ExamResultsWhereUniqueInput
        update: XOR<ExamResultsUpdateWithoutExamResultsValuesInput, ExamResultsUncheckedUpdateWithoutExamResultsValuesInput>
        create: XOR<ExamResultsCreateWithoutExamResultsValuesInput, ExamResultsUncheckedCreateWithoutExamResultsValuesInput>
    };
    export type ExamResultsUpdateWithWhereUniqueWithoutExamResultsValuesInput = {
        where: ExamResultsWhereUniqueInput
        data: XOR<ExamResultsUpdateWithoutExamResultsValuesInput, ExamResultsUncheckedUpdateWithoutExamResultsValuesInput>
    };
    export type ExamResultsUpdateManyWithWhereWithoutExamResultsValuesInput = {
        where: ExamResultsScalarWhereInput
        data: XOR<ExamResultsUpdateManyMutationInput, ExamResultsUncheckedUpdateManyWithoutExamResultsValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Comor_0Input>
    };
    export type PatientCreateWithoutComorbiditiesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutComorbiditiesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutComorbiditiesInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutComorbiditiesInput, PatientUncheckedCreateWithoutComorbiditiesInput>
    };
    export type ComorbiditiesValuesCreateWithoutComorbiditiesInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type ComorbiditiesValuesUncheckedCreateWithoutComorbiditiesInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type ComorbiditiesValuesCreateOrConnectWithoutComorbiditiesInput = {
        where: ComorbiditiesValuesWhereUniqueInput
        create: XOR<ComorbiditiesValuesCreateWithoutComorbiditiesInput, ComorbiditiesValuesUncheckedCreateWithoutComorbiditiesInput>
    };
    export type AppointmentCreateWithoutComorbiditiesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
        eventCalendar?: EventCalendarCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentUncheckedCreateWithoutComorbiditiesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        eventCalendar?: EventCalendarUncheckedCreateNestedOneWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutComorbiditiesInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutComorbiditiesInput, AppointmentUncheckedCreateWithoutComorbiditiesInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Comorb_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Comorb_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Comorb_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Comor_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Comor_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutComorbiditiesInput = {
        update: XOR<PatientUpdateWithoutComorbiditiesInput, PatientUncheckedUpdateWithoutComorbiditiesInput>
        create: XOR<PatientCreateWithoutComorbiditiesInput, PatientUncheckedCreateWithoutComorbiditiesInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutComorbiditiesInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutComorbiditiesInput, PatientUncheckedUpdateWithoutComorbiditiesInput>
    };
    export type PatientUpdateWithoutComorbiditiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutComorbiditiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type ComorbiditiesValuesUpsertWithoutComorbiditiesInput = {
        update: XOR<ComorbiditiesValuesUpdateWithoutComorbiditiesInput, ComorbiditiesValuesUncheckedUpdateWithoutComorbiditiesInput>
        create: XOR<ComorbiditiesValuesCreateWithoutComorbiditiesInput, ComorbiditiesValuesUncheckedCreateWithoutComorbiditiesInput>
        where?: ComorbiditiesValuesWhereInput
    };
    export type ComorbiditiesValuesUpdateToOneWithWhereWithoutComorbiditiesInput = {
        where?: ComorbiditiesValuesWhereInput
        data: XOR<ComorbiditiesValuesUpdateWithoutComorbiditiesInput, ComorbiditiesValuesUncheckedUpdateWithoutComorbiditiesInput>
    };
    export type ComorbiditiesValuesUpdateWithoutComorbiditiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesValuesUncheckedUpdateWithoutComorbiditiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AppointmentUpsertWithoutComorbiditiesInput = {
        update: XOR<AppointmentUpdateWithoutComorbiditiesInput, AppointmentUncheckedUpdateWithoutComorbiditiesInput>
        create: XOR<AppointmentCreateWithoutComorbiditiesInput, AppointmentUncheckedCreateWithoutComorbiditiesInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutComorbiditiesInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutComorbiditiesInput, AppointmentUncheckedUpdateWithoutComorbiditiesInput>
    };
    export type AppointmentUpdateWithoutComorbiditiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutComorbiditiesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type ComorbiditiesCreateWithoutComorbiditiesValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Comorb_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Comorb_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Comorb_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Comor_0Input
        patient?: PatientCreateNestedOneWithoutComorbiditiesInput
        appointment?: AppointmentCreateNestedOneWithoutComorbiditiesInput
    };
    export type ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        appointmentId?: string | null
    };
    export type ComorbiditiesCreateOrConnectWithoutComorbiditiesValuesInput = {
        where: ComorbiditiesWhereUniqueInput
        create: XOR<ComorbiditiesCreateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput>
    };
    export type ComorbiditiesCreateManyComorbiditiesValuesInputEnvelope = {
        data: ComorbiditiesCreateManyComorbiditiesValuesInput | ComorbiditiesCreateManyComorbiditiesValuesInput[]
    };
    export type ComorbiditiesUpsertWithWhereUniqueWithoutComorbiditiesValuesInput = {
        where: ComorbiditiesWhereUniqueInput
        update: XOR<ComorbiditiesUpdateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedUpdateWithoutComorbiditiesValuesInput>
        create: XOR<ComorbiditiesCreateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedCreateWithoutComorbiditiesValuesInput>
    };
    export type ComorbiditiesUpdateWithWhereUniqueWithoutComorbiditiesValuesInput = {
        where: ComorbiditiesWhereUniqueInput
        data: XOR<ComorbiditiesUpdateWithoutComorbiditiesValuesInput, ComorbiditiesUncheckedUpdateWithoutComorbiditiesValuesInput>
    };
    export type ComorbiditiesUpdateManyWithWhereWithoutComorbiditiesValuesInput = {
        where: ComorbiditiesScalarWhereInput
        data: XOR<ComorbiditiesUpdateManyMutationInput, ComorbiditiesUncheckedUpdateManyWithoutComorbiditiesValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Surge_0Input>
    };
    export type PatientCreateWithoutSurgeriesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutSurgeriesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        healthPlans?: HealthPlansUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutSurgeriesInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutSurgeriesInput, PatientUncheckedCreateWithoutSurgeriesInput>
    };
    export type SurgeriesValuesCreateWithoutSurgeriesInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type SurgeriesValuesUncheckedCreateWithoutSurgeriesInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type SurgeriesValuesCreateOrConnectWithoutSurgeriesInput = {
        where: SurgeriesValuesWhereUniqueInput
        create: XOR<SurgeriesValuesCreateWithoutSurgeriesInput, SurgeriesValuesUncheckedCreateWithoutSurgeriesInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Surger_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Surger_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Surger_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Surge_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Surge_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutSurgeriesInput = {
        update: XOR<PatientUpdateWithoutSurgeriesInput, PatientUncheckedUpdateWithoutSurgeriesInput>
        create: XOR<PatientCreateWithoutSurgeriesInput, PatientUncheckedCreateWithoutSurgeriesInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutSurgeriesInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutSurgeriesInput, PatientUncheckedUpdateWithoutSurgeriesInput>
    };
    export type PatientUpdateWithoutSurgeriesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutSurgeriesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type SurgeriesValuesUpsertWithoutSurgeriesInput = {
        update: XOR<SurgeriesValuesUpdateWithoutSurgeriesInput, SurgeriesValuesUncheckedUpdateWithoutSurgeriesInput>
        create: XOR<SurgeriesValuesCreateWithoutSurgeriesInput, SurgeriesValuesUncheckedCreateWithoutSurgeriesInput>
        where?: SurgeriesValuesWhereInput
    };
    export type SurgeriesValuesUpdateToOneWithWhereWithoutSurgeriesInput = {
        where?: SurgeriesValuesWhereInput
        data: XOR<SurgeriesValuesUpdateWithoutSurgeriesInput, SurgeriesValuesUncheckedUpdateWithoutSurgeriesInput>
    };
    export type SurgeriesValuesUpdateWithoutSurgeriesInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type SurgeriesValuesUncheckedUpdateWithoutSurgeriesInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type SurgeriesCreateWithoutSurgeriesValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Surger_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Surger_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Surger_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Surge_0Input
        patient: PatientCreateNestedOneWithoutSurgeriesInput
    };
    export type SurgeriesUncheckedCreateWithoutSurgeriesValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
    };
    export type SurgeriesCreateOrConnectWithoutSurgeriesValuesInput = {
        where: SurgeriesWhereUniqueInput
        create: XOR<SurgeriesCreateWithoutSurgeriesValuesInput, SurgeriesUncheckedCreateWithoutSurgeriesValuesInput>
    };
    export type SurgeriesCreateManySurgeriesValuesInputEnvelope = {
        data: SurgeriesCreateManySurgeriesValuesInput | SurgeriesCreateManySurgeriesValuesInput[]
    };
    export type SurgeriesUpsertWithWhereUniqueWithoutSurgeriesValuesInput = {
        where: SurgeriesWhereUniqueInput
        update: XOR<SurgeriesUpdateWithoutSurgeriesValuesInput, SurgeriesUncheckedUpdateWithoutSurgeriesValuesInput>
        create: XOR<SurgeriesCreateWithoutSurgeriesValuesInput, SurgeriesUncheckedCreateWithoutSurgeriesValuesInput>
    };
    export type SurgeriesUpdateWithWhereUniqueWithoutSurgeriesValuesInput = {
        where: SurgeriesWhereUniqueInput
        data: XOR<SurgeriesUpdateWithoutSurgeriesValuesInput, SurgeriesUncheckedUpdateWithoutSurgeriesValuesInput>
    };
    export type SurgeriesUpdateManyWithWhereWithoutSurgeriesValuesInput = {
        where: SurgeriesScalarWhereInput
        data: XOR<SurgeriesUpdateManyMutationInput, SurgeriesUncheckedUpdateManyWithoutSurgeriesValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Health_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Healt_0Input>
    };
    export type PatientCreateWithoutHealthPlansInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Patien_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Patien_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Patien_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Patie_0Input
        user?: UserCreateNestedOneWithoutPatientUserInput
        appointments?: AppointmentCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsCreateNestedManyWithoutPatientInput
        allergies?: AllergiesCreateNestedManyWithoutPatientInput
        medications?: MedicationsCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesCreateNestedManyWithoutPatientInput
    };
    export type PatientUncheckedCreateWithoutHealthPlansInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
        appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
        vaccinations?: VaccinationsUncheckedCreateNestedManyWithoutPatientInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutPatientInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutPatientInput
        examResults?: ExamResultsUncheckedCreateNestedManyWithoutPatientInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutPatientInput
        surgeries?: SurgeriesUncheckedCreateNestedManyWithoutPatientInput
    };
    export type PatientCreateOrConnectWithoutHealthPlansInput = {
        where: PatientWhereUniqueInput
        create: XOR<PatientCreateWithoutHealthPlansInput, PatientUncheckedCreateWithoutHealthPlansInput>
    };
    export type HealthPlansValuesCreateWithoutHealthPlansInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type HealthPlansValuesUncheckedCreateWithoutHealthPlansInput = {
        id?: string
        value: string
        createdAt?: Date | string
    };
    export type HealthPlansValuesCreateOrConnectWithoutHealthPlansInput = {
        where: HealthPlansValuesWhereUniqueInput
        create: XOR<HealthPlansValuesCreateWithoutHealthPlansInput, HealthPlansValuesUncheckedCreateWithoutHealthPlansInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Health_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Health_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Health_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Health_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Healt_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Healt_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type PatientUpsertWithoutHealthPlansInput = {
        update: XOR<PatientUpdateWithoutHealthPlansInput, PatientUncheckedUpdateWithoutHealthPlansInput>
        create: XOR<PatientCreateWithoutHealthPlansInput, PatientUncheckedCreateWithoutHealthPlansInput>
        where?: PatientWhereInput
    };
    export type PatientUpdateToOneWithWhereWithoutHealthPlansInput = {
        where?: PatientWhereInput
        data: XOR<PatientUpdateWithoutHealthPlansInput, PatientUncheckedUpdateWithoutHealthPlansInput>
    };
    export type PatientUpdateWithoutHealthPlansInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutHealthPlansInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type HealthPlansValuesUpsertWithoutHealthPlansInput = {
        update: XOR<HealthPlansValuesUpdateWithoutHealthPlansInput, HealthPlansValuesUncheckedUpdateWithoutHealthPlansInput>
        create: XOR<HealthPlansValuesCreateWithoutHealthPlansInput, HealthPlansValuesUncheckedCreateWithoutHealthPlansInput>
        where?: HealthPlansValuesWhereInput
    };
    export type HealthPlansValuesUpdateToOneWithWhereWithoutHealthPlansInput = {
        where?: HealthPlansValuesWhereInput
        data: XOR<HealthPlansValuesUpdateWithoutHealthPlansInput, HealthPlansValuesUncheckedUpdateWithoutHealthPlansInput>
    };
    export type HealthPlansValuesUpdateWithoutHealthPlansInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type HealthPlansValuesUncheckedUpdateWithoutHealthPlansInput = {
        id?: StringFieldUpdateOperationsInput | string
        value?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type HealthPlansCreateWithoutHealthPlansValuesInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Health_0Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Health_0Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Health_0Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Healt_0Input
        patient: PatientCreateNestedOneWithoutHealthPlansInput
    };
    export type HealthPlansUncheckedCreateWithoutHealthPlansValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
    };
    export type HealthPlansCreateOrConnectWithoutHealthPlansValuesInput = {
        where: HealthPlansWhereUniqueInput
        create: XOR<HealthPlansCreateWithoutHealthPlansValuesInput, HealthPlansUncheckedCreateWithoutHealthPlansValuesInput>
    };
    export type HealthPlansCreateManyHealthPlansValuesInputEnvelope = {
        data: HealthPlansCreateManyHealthPlansValuesInput | HealthPlansCreateManyHealthPlansValuesInput[]
    };
    export type HealthPlansUpsertWithWhereUniqueWithoutHealthPlansValuesInput = {
        where: HealthPlansWhereUniqueInput
        update: XOR<HealthPlansUpdateWithoutHealthPlansValuesInput, HealthPlansUncheckedUpdateWithoutHealthPlansValuesInput>
        create: XOR<HealthPlansCreateWithoutHealthPlansValuesInput, HealthPlansUncheckedCreateWithoutHealthPlansValuesInput>
    };
    export type HealthPlansUpdateWithWhereUniqueWithoutHealthPlansValuesInput = {
        where: HealthPlansWhereUniqueInput
        data: XOR<HealthPlansUpdateWithoutHealthPlansValuesInput, HealthPlansUncheckedUpdateWithoutHealthPlansValuesInput>
    };
    export type HealthPlansUpdateManyWithWhereWithoutHealthPlansValuesInput = {
        where: HealthPlansScalarWhereInput
        data: XOR<HealthPlansUpdateManyMutationInput, HealthPlansUncheckedUpdateManyWithoutHealthPlansValuesInput>
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Defau_0Input>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_Defaul_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_Defaul_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_Defaul_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Defau_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Defau_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type UserCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        deletedAssets?: AssetUncheckedCreateNestedManyWithoutDeletedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
    };
    export type UserCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionCreateNestedManyWithoutUserInput
        accounts?: AccountCreateNestedManyWithoutUserInput
        members?: MemberCreateNestedManyWithoutUserInput
        invitations?: InvitationCreateNestedManyWithoutUserInput
        patientUser?: PatientCreateNestedManyWithoutUserInput
        createdAssets?: AssetCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        id?: string
        name: string
        email: string
        emailVerified: boolean
        image?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        username?: string | null
        displayUsername?: string | null
        role?: $Enums.UserRole | null
        banned?: boolean | null
        banReason?: string | null
        banExpires?: Date | string | null
        changePassword?: boolean | null
        sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
        accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
        members?: MemberUncheckedCreateNestedManyWithoutUserInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
        patientUser?: PatientUncheckedCreateNestedManyWithoutUserInput
        createdAssets?: AssetUncheckedCreateNestedManyWithoutCreatedByUserInput
        updatedAssets?: AssetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    };
    export type UserCreateOrConnectWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        where: UserWhereUniqueInput
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
    };
    export type OrganizationCreateWithoutDelegate_aux_Organization_assets_Event_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Event_0Input = {
        id?: string
        name: string
        slug?: string | null
        logo?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
        metadata?: string | null
        members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
        invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    };
    export type OrganizationCreateOrConnectWithoutDelegate_aux_Organization_assets_Event_0Input = {
        where: OrganizationWhereUniqueInput
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Event_0Input>
    };
    export type AppointmentCreateWithoutEventCalendarInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        createdByUser?: UserCreateNestedOneWithoutDelegate_aux_User_createdAssets_Appoin_1Input
        updatedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_updatedAssets_Appoin_1Input
        deletedByUser?: UserCreateNestedOneWithoutDelegate_aux_User_deletedAssets_Appoin_1Input
        organization?: OrganizationCreateNestedOneWithoutDelegate_aux_Organization_assets_Appoi_1Input
        followUp?: AppointmentCreateNestedOneWithoutPredecessorFollowUpInput
        predecessorFollowUp?: AppointmentCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesCreateNestedManyWithoutAppointmentInput
        patient: PatientCreateNestedOneWithoutAppointmentsInput
    };
    export type AppointmentUncheckedCreateWithoutEventCalendarInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
        predecessorFollowUp?: AppointmentUncheckedCreateNestedOneWithoutFollowUpInput
        cids?: AppointmentCidUncheckedCreateNestedManyWithoutAppointmentInput
        allergies?: AllergiesUncheckedCreateNestedManyWithoutAppointmentInput
        medications?: MedicationsUncheckedCreateNestedManyWithoutAppointmentInput
        comorbidities?: ComorbiditiesUncheckedCreateNestedManyWithoutAppointmentInput
    };
    export type AppointmentCreateOrConnectWithoutEventCalendarInput = {
        where: AppointmentWhereUniqueInput
        create: XOR<AppointmentCreateWithoutEventCalendarInput, AppointmentUncheckedCreateWithoutEventCalendarInput>
    };
    export type UserUpsertWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_createdAssets_EventC_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_updatedAssets_EventC_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        deletedAssets?: AssetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    };
    export type UserUpsertWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        update: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
        create: XOR<UserCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUncheckedCreateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
        where?: UserWhereInput
    };
    export type UserUpdateToOneWithWhereWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        where?: UserWhereInput
        data: XOR<UserUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input, UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input>
    };
    export type UserUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUpdateManyWithoutUserNestedInput
        accounts?: AccountUpdateManyWithoutUserNestedInput
        members?: MemberUpdateManyWithoutUserNestedInput
        invitations?: InvitationUpdateManyWithoutUserNestedInput
        patientUser?: PatientUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type UserUncheckedUpdateWithoutDelegate_aux_User_deletedAssets_EventC_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        emailVerified?: BoolFieldUpdateOperationsInput | boolean
        image?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        username?: NullableStringFieldUpdateOperationsInput | string | null
        displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
        role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
        banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
        banReason?: NullableStringFieldUpdateOperationsInput | string | null
        banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        changePassword?: NullableBoolFieldUpdateOperationsInput | boolean | null
        sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
        accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
        members?: MemberUncheckedUpdateManyWithoutUserNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
        patientUser?: PatientUncheckedUpdateManyWithoutUserNestedInput
        createdAssets?: AssetUncheckedUpdateManyWithoutCreatedByUserNestedInput
        updatedAssets?: AssetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    };
    export type OrganizationUpsertWithoutDelegate_aux_Organization_assets_Event_0Input = {
        update: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Event_0Input>
        create: XOR<OrganizationCreateWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUncheckedCreateWithoutDelegate_aux_Organization_assets_Event_0Input>
        where?: OrganizationWhereInput
    };
    export type OrganizationUpdateToOneWithWhereWithoutDelegate_aux_Organization_assets_Event_0Input = {
        where?: OrganizationWhereInput
        data: XOR<OrganizationUpdateWithoutDelegate_aux_Organization_assets_Event_0Input, OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Event_0Input>
    };
    export type OrganizationUpdateWithoutDelegate_aux_Organization_assets_Event_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    };
    export type OrganizationUncheckedUpdateWithoutDelegate_aux_Organization_assets_Event_0Input = {
        id?: StringFieldUpdateOperationsInput | string
        name?: StringFieldUpdateOperationsInput | string
        slug?: NullableStringFieldUpdateOperationsInput | string | null
        logo?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        metadata?: NullableStringFieldUpdateOperationsInput | string | null
        members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
        invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    };
    export type AppointmentUpsertWithoutEventCalendarInput = {
        update: XOR<AppointmentUpdateWithoutEventCalendarInput, AppointmentUncheckedUpdateWithoutEventCalendarInput>
        create: XOR<AppointmentCreateWithoutEventCalendarInput, AppointmentUncheckedCreateWithoutEventCalendarInput>
        where?: AppointmentWhereInput
    };
    export type AppointmentUpdateToOneWithWhereWithoutEventCalendarInput = {
        where?: AppointmentWhereInput
        data: XOR<AppointmentUpdateWithoutEventCalendarInput, AppointmentUncheckedUpdateWithoutEventCalendarInput>
    };
    export type AppointmentUpdateWithoutEventCalendarInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutEventCalendarInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
    };
    export type SessionCreateManyUserInput = {
        id?: string
        expiresAt: Date | string
        token: string
        createdAt?: Date | string
        updatedAt?: Date | string
        ipAddress?: string | null
        userAgent?: string | null
        impersonatedBy?: string | null
        activeOrganizationId?: string | null
    };
    export type AccountCreateManyUserInput = {
        id?: string
        accountId: string
        providerId: string
        accessToken?: string | null
        refreshToken?: string | null
        idToken?: string | null
        accessTokenExpiresAt?: Date | string | null
        refreshTokenExpiresAt?: Date | string | null
        scope?: string | null
        password?: string | null
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type MemberCreateManyUserInput = {
        id?: string
        organizationId: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type InvitationCreateManyUserInput = {
        id?: string
        organizationId: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
    };
    export type PatientCreateManyUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
    };
    export type AssetCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AssetCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
    };
    export type AppointmentCidCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
    };
    export type PatientCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
    };
    export type VaccinationsCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type AllergiesCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type ExamResultsCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ComorbiditiesCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type SurgeriesCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type HealthPlansCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type DefaultObjectiveInformationCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type EventCalendarCreateManyCreatedByUserInput = {
        id?: string
        createdAt?: Date | string
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type AppointmentCidCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
    };
    export type PatientCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
    };
    export type VaccinationsCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type AllergiesCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type ExamResultsCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ComorbiditiesCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type SurgeriesCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type HealthPlansCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type DefaultObjectiveInformationCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type EventCalendarCreateManyUpdatedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type AppointmentCidCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
        cidId: string
    };
    export type AppointmentCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
    };
    export type PatientCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
    };
    export type VaccinationsCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        vaccinationsValuesId: string
    };
    export type AllergiesCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type ExamResultsCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ComorbiditiesCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type SurgeriesCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        surgeriesValuesId: string
    };
    export type HealthPlansCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        healthPlansValuesId: string
    };
    export type DefaultObjectiveInformationCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        text?: string | null
    };
    export type EventCalendarCreateManyDeletedByUserInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deleted?: boolean
        organizationId?: string | null
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type SessionUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SessionUncheckedUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SessionUncheckedUpdateManyWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        token?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
        userAgent?: NullableStringFieldUpdateOperationsInput | string | null
        impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
        activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AccountUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AccountUncheckedUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type AccountUncheckedUpdateManyWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        accountId?: StringFieldUpdateOperationsInput | string
        providerId?: StringFieldUpdateOperationsInput | string
        accessToken?: NullableStringFieldUpdateOperationsInput | string | null
        refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
        idToken?: NullableStringFieldUpdateOperationsInput | string | null
        accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        scope?: NullableStringFieldUpdateOperationsInput | string | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MemberUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    };
    export type MemberUncheckedUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MemberUncheckedUpdateManyWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type InvitationUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
    };
    export type InvitationUncheckedUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type InvitationUncheckedUpdateManyWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        organizationId?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    };
    export type PatientUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateManyWithoutUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutUpdatedAssetsNestedInput
        deletedByUser?: UserUpdateOneWithoutDeletedAssetsNestedInput
        organization?: OrganizationUpdateOneWithoutAssetsNestedInput
    };
    export type AssetUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutCreatedAssetsNestedInput
        deletedByUser?: UserUpdateOneWithoutDeletedAssetsNestedInput
        organization?: OrganizationUpdateOneWithoutAssetsNestedInput
    };
    export type AssetUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutCreatedAssetsNestedInput
        updatedByUser?: UserUpdateOneWithoutUpdatedAssetsNestedInput
        organization?: OrganizationUpdateOneWithoutAssetsNestedInput
    };
    export type AssetUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AssetUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AppointmentCidUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput
        appointment?: AppointmentUpdateOneRequiredWithoutCidsNestedInput
        cid?: CidUpdateOneRequiredWithoutAppointmentCidNestedInput
    };
    export type AppointmentCidUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type PatientUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type VaccinationsUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutVaccinationsNestedInput
        vaccinationsValues?: VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ExamResultsUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutExamResultsNestedInput
        examResultsValues?: ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SurgeriesUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutSurgeriesNestedInput
        surgeriesValues?: SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutHealthPlansNestedInput
        healthPlansValues?: HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type DefaultObjectiveInformationUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Defaul_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Defaul_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Defau_0NestedInput
    };
    export type DefaultObjectiveInformationUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_EventC_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_EventC_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Event_0NestedInput
        appointment?: AppointmentUpdateOneWithoutEventCalendarNestedInput
    };
    export type EventCalendarUncheckedUpdateWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUncheckedUpdateManyWithoutCreatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AppointmentCidUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput
        appointment?: AppointmentUpdateOneRequiredWithoutCidsNestedInput
        cid?: CidUpdateOneRequiredWithoutAppointmentCidNestedInput
    };
    export type AppointmentCidUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type PatientUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type VaccinationsUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutVaccinationsNestedInput
        vaccinationsValues?: VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ExamResultsUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutExamResultsNestedInput
        examResultsValues?: ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SurgeriesUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutSurgeriesNestedInput
        surgeriesValues?: SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutHealthPlansNestedInput
        healthPlansValues?: HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type DefaultObjectiveInformationUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Defaul_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Defaul_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Defau_0NestedInput
    };
    export type DefaultObjectiveInformationUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_EventC_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_EventC_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Event_0NestedInput
        appointment?: AppointmentUpdateOneWithoutEventCalendarNestedInput
    };
    export type EventCalendarUncheckedUpdateWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUncheckedUpdateManyWithoutUpdatedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AppointmentCidUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput
        appointment?: AppointmentUpdateOneRequiredWithoutCidsNestedInput
        cid?: CidUpdateOneRequiredWithoutAppointmentCidNestedInput
    };
    export type AppointmentCidUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type PatientUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Patie_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type VaccinationsUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutVaccinationsNestedInput
        vaccinationsValues?: VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ExamResultsUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutExamResultsNestedInput
        examResultsValues?: ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SurgeriesUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutSurgeriesNestedInput
        surgeriesValues?: SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutHealthPlansNestedInput
        healthPlansValues?: HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type DefaultObjectiveInformationUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Defaul_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Defaul_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Defau_0NestedInput
    };
    export type DefaultObjectiveInformationUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_EventC_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_EventC_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Event_0NestedInput
        appointment?: AppointmentUpdateOneWithoutEventCalendarNestedInput
    };
    export type EventCalendarUncheckedUpdateWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUncheckedUpdateManyWithoutDeletedByUserInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MemberCreateManyOrganizationInput = {
        id?: string
        userId: string
        role: string
        createdAt?: Date | string
        updatedAt?: Date | string
    };
    export type InvitationCreateManyOrganizationInput = {
        id?: string
        email: string
        role?: string | null
        status: string
        expiresAt: Date | string
        createdAt?: Date | string
        updatedAt?: Date | string | null
        inviterId: string
    };
    export type AssetCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
    };
    export type AppointmentCidCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        appointmentId: string
        cidId: string
    };
    export type AppointmentCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
        patientId: string
    };
    export type PatientCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        name: string
        cpf: string
        cellphone: string
        email: string
        sex?: $Enums.Sex | null
        responsible?: string | null
        nationality: string
        race?: $Enums.Race | null
        state: string
        city: string
        zipcode: string
        neighborhood: string
        street: string
        number: string
        complement?: string | null
        occupation: string
        sexualOrientation?: string | null
        civilStatus?: $Enums.CivilStatus | null
        bloodType?: $Enums.BloodType | null
        genderIdentity?: $Enums.GenderIdentity | null
        password?: string | null
        userId?: string | null
    };
    export type VaccinationsCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        vaccinationsValuesId: string
    };
    export type AllergiesCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type ExamResultsCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ComorbiditiesCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type SurgeriesCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        surgeriesValuesId: string
    };
    export type HealthPlansCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        patientId: string
        healthPlansValuesId: string
    };
    export type DefaultObjectiveInformationCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        text?: string | null
    };
    export type EventCalendarCreateManyOrganizationInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        title: string
        description?: string | null
        start: Date | string
        end: Date | string
        allDay?: boolean | null
        eventType?: $Enums.EventCalendarType | null
        rrule?: string | null
        appointmentId?: string | null
    };
    export type MemberUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        user?: UserUpdateOneRequiredWithoutMembersNestedInput
    };
    export type MemberUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        userId?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type MemberUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        userId?: StringFieldUpdateOperationsInput | string
        role?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type InvitationUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
    };
    export type InvitationUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        inviterId?: StringFieldUpdateOperationsInput | string
    };
    export type InvitationUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        role?: NullableStringFieldUpdateOperationsInput | string | null
        status?: StringFieldUpdateOperationsInput | string
        expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        inviterId?: StringFieldUpdateOperationsInput | string
    };
    export type AssetUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutCreatedAssetsNestedInput
        updatedByUser?: UserUpdateOneWithoutUpdatedAssetsNestedInput
        deletedByUser?: UserUpdateOneWithoutDeletedAssetsNestedInput
    };
    export type AssetUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type AssetUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
    };
    export type AppointmentCidUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput
        appointment?: AppointmentUpdateOneRequiredWithoutCidsNestedInput
        cid?: CidUpdateOneRequiredWithoutAppointmentCidNestedInput
    };
    export type AppointmentCidUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        appointmentId?: StringFieldUpdateOperationsInput | string
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type PatientUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Patien_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Patien_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Patien_0NestedInput
        user?: UserUpdateOneWithoutPatientUserNestedInput
        appointments?: AppointmentUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
        appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
        vaccinations?: VaccinationsUncheckedUpdateManyWithoutPatientNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutPatientNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutPatientNestedInput
        examResults?: ExamResultsUncheckedUpdateManyWithoutPatientNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutPatientNestedInput
        surgeries?: SurgeriesUncheckedUpdateManyWithoutPatientNestedInput
        healthPlans?: HealthPlansUncheckedUpdateManyWithoutPatientNestedInput
    };
    export type PatientUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        name?: StringFieldUpdateOperationsInput | string
        cpf?: StringFieldUpdateOperationsInput | string
        cellphone?: StringFieldUpdateOperationsInput | string
        email?: StringFieldUpdateOperationsInput | string
        sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
        responsible?: NullableStringFieldUpdateOperationsInput | string | null
        nationality?: StringFieldUpdateOperationsInput | string
        race?: NullableEnumRaceFieldUpdateOperationsInput | $Enums.Race | null
        state?: StringFieldUpdateOperationsInput | string
        city?: StringFieldUpdateOperationsInput | string
        zipcode?: StringFieldUpdateOperationsInput | string
        neighborhood?: StringFieldUpdateOperationsInput | string
        street?: StringFieldUpdateOperationsInput | string
        number?: StringFieldUpdateOperationsInput | string
        complement?: NullableStringFieldUpdateOperationsInput | string | null
        occupation?: StringFieldUpdateOperationsInput | string
        sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
        civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
        bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
        genderIdentity?: NullableEnumGenderIdentityFieldUpdateOperationsInput | $Enums.GenderIdentity | null
        password?: NullableStringFieldUpdateOperationsInput | string | null
        userId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type VaccinationsUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutVaccinationsNestedInput
        vaccinationsValues?: VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ExamResultsUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutExamResultsNestedInput
        examResultsValues?: ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SurgeriesUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutSurgeriesNestedInput
        surgeriesValues?: SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutHealthPlansNestedInput
        healthPlansValues?: HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        patientId?: StringFieldUpdateOperationsInput | string
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type DefaultObjectiveInformationUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Defaul_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Defaul_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Defaul_0NestedInput
    };
    export type DefaultObjectiveInformationUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type DefaultObjectiveInformationUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        text?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_EventC_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_EventC_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_EventC_0NestedInput
        appointment?: AppointmentUpdateOneWithoutEventCalendarNestedInput
    };
    export type EventCalendarUncheckedUpdateWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type EventCalendarUncheckedUpdateManyWithoutOrganizationInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        title?: StringFieldUpdateOperationsInput | string
        description?: NullableStringFieldUpdateOperationsInput | string | null
        start?: DateTimeFieldUpdateOperationsInput | Date | string
        end?: DateTimeFieldUpdateOperationsInput | Date | string
        allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
        eventType?: NullableEnumEventCalendarTypeFieldUpdateOperationsInput | $Enums.EventCalendarType | null
        rrule?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AppointmentCidCreateManyCidInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        appointmentId: string
    };
    export type AppointmentCidUpdateWithoutCidInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput
        appointment?: AppointmentUpdateOneRequiredWithoutCidsNestedInput
    };
    export type AppointmentCidUncheckedUpdateWithoutCidInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidUncheckedUpdateManyWithoutCidInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidCreateManyAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        cidId: string
    };
    export type AllergiesCreateManyAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        allergiesValuesId: string
    };
    export type MedicationsCreateManyAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        medicationsValuesId: string
    };
    export type ComorbiditiesCreateManyAppointmentInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        comorbiditiesValuesId: string
    };
    export type AppointmentCidUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_0NestedInput
        cid?: CidUpdateOneRequiredWithoutAppointmentCidNestedInput
    };
    export type AppointmentCidUncheckedUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCidUncheckedUpdateManyWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        cidId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUncheckedUpdateManyWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type MedicationsUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type MedicationsUncheckedUpdateManyWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type ComorbiditiesUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutAppointmentInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AppointmentCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        motive: string
        subjective: string
        objective: string
        evaluation: string
        plan: string
        startDate?: Date | string | null
        endDate?: Date | string | null
        sickNoteDays?: number | null
        category?: $Enums.AppointmentCategory | null
        status?: $Enums.AppointmentStatus | null
        followUpId?: string | null
    };
    export type VaccinationsCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        vaccinationsValuesId: string
    };
    export type AllergiesCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        allergiesValuesId: string
        appointmentId?: string | null
    };
    export type MedicationsCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        medicationsValuesId: string
        appointmentId?: string | null
    };
    export type ExamResultsCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        examResultsValuesId: string
        result: string
        date: Date | string
    };
    export type ComorbiditiesCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        comorbiditiesValuesId: string
        appointmentId?: string | null
    };
    export type SurgeriesCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        surgeriesValuesId: string
    };
    export type HealthPlansCreateManyPatientInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        healthPlansValuesId: string
    };
    export type AppointmentUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Appoin_1NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Appoin_1NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Appoin_1NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Appoi_1NestedInput
        followUp?: AppointmentUpdateOneWithoutPredecessorFollowUpNestedInput
        predecessorFollowUp?: AppointmentUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
        predecessorFollowUp?: AppointmentUncheckedUpdateOneWithoutFollowUpNestedInput
        cids?: AppointmentCidUncheckedUpdateManyWithoutAppointmentNestedInput
        allergies?: AllergiesUncheckedUpdateManyWithoutAppointmentNestedInput
        medications?: MedicationsUncheckedUpdateManyWithoutAppointmentNestedInput
        comorbidities?: ComorbiditiesUncheckedUpdateManyWithoutAppointmentNestedInput
        eventCalendar?: EventCalendarUncheckedUpdateOneWithoutAppointmentNestedInput
    };
    export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        motive?: StringFieldUpdateOperationsInput | string
        subjective?: StringFieldUpdateOperationsInput | string
        objective?: StringFieldUpdateOperationsInput | string
        evaluation?: StringFieldUpdateOperationsInput | string
        plan?: StringFieldUpdateOperationsInput | string
        startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        sickNoteDays?: NullableIntFieldUpdateOperationsInput | number | null
        category?: NullableEnumAppointmentCategoryFieldUpdateOperationsInput | $Enums.AppointmentCategory | null
        status?: NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null
        followUpId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type VaccinationsUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput
        vaccinationsValues?: VaccinationsValuesUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        vaccinationsValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        allergiesValues?: AllergiesValuesUpdateOneRequiredWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        allergiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        medicationsValues?: MedicationsValuesUpdateOneRequiredWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        medicationsValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ExamResultsUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput
        examResultsValues?: ExamResultsValuesUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        examResultsValuesId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        comorbiditiesValues?: ComorbiditiesValuesUpdateOneRequiredWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        comorbiditiesValuesId?: StringFieldUpdateOperationsInput | string
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SurgeriesUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput
        surgeriesValues?: SurgeriesValuesUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        surgeriesValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput
        healthPlansValues?: HealthPlansValuesUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUncheckedUpdateManyWithoutPatientInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        healthPlansValuesId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsCreateManyVaccinationsValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
    };
    export type VaccinationsUpdateWithoutVaccinationsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Vaccin_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Vaccin_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Vaccin_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Vacci_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutVaccinationsNestedInput
    };
    export type VaccinationsUncheckedUpdateWithoutVaccinationsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type VaccinationsUncheckedUpdateManyWithoutVaccinationsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type AllergiesCreateManyAllergiesValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        appointmentId?: string | null
    };
    export type AllergiesUpdateWithoutAllergiesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Allerg_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Allerg_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Allerg_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Aller_0NestedInput
        patient?: PatientUpdateOneWithoutAllergiesNestedInput
        appointment?: AppointmentUpdateOneWithoutAllergiesNestedInput
    };
    export type AllergiesUncheckedUpdateWithoutAllergiesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type AllergiesUncheckedUpdateManyWithoutAllergiesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsCreateManyMedicationsValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        appointmentId?: string | null
    };
    export type MedicationsUpdateWithoutMedicationsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Medica_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Medica_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Medica_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Medic_0NestedInput
        patient?: PatientUpdateOneWithoutMedicationsNestedInput
        appointment?: AppointmentUpdateOneWithoutMedicationsNestedInput
    };
    export type MedicationsUncheckedUpdateWithoutMedicationsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type MedicationsUncheckedUpdateManyWithoutMedicationsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ExamResultsCreateManyExamResultsValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
        result: string
        date: Date | string
    };
    export type ExamResultsUpdateWithoutExamResultsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_ExamRe_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_ExamRe_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_ExamRe_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_ExamR_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutExamResultsNestedInput
    };
    export type ExamResultsUncheckedUpdateWithoutExamResultsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ExamResultsUncheckedUpdateManyWithoutExamResultsValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
        result?: StringFieldUpdateOperationsInput | string
        date?: DateTimeFieldUpdateOperationsInput | Date | string
    };
    export type ComorbiditiesCreateManyComorbiditiesValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId?: string | null
        appointmentId?: string | null
    };
    export type ComorbiditiesUpdateWithoutComorbiditiesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Comorb_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Comorb_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Comorb_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Comor_0NestedInput
        patient?: PatientUpdateOneWithoutComorbiditiesNestedInput
        appointment?: AppointmentUpdateOneWithoutComorbiditiesNestedInput
    };
    export type ComorbiditiesUncheckedUpdateWithoutComorbiditiesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type ComorbiditiesUncheckedUpdateManyWithoutComorbiditiesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: NullableStringFieldUpdateOperationsInput | string | null
        appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    };
    export type SurgeriesCreateManySurgeriesValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
    };
    export type SurgeriesUpdateWithoutSurgeriesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Surger_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Surger_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Surger_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Surge_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutSurgeriesNestedInput
    };
    export type SurgeriesUncheckedUpdateWithoutSurgeriesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type SurgeriesUncheckedUpdateManyWithoutSurgeriesValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansCreateManyHealthPlansValuesInput = {
        id?: string
        createdAt?: Date | string
        createdById?: string | null
        updatedAt?: Date | string
        updatedById?: string | null
        deletedAt?: Date | string | null
        deletedById?: string | null
        deleted?: boolean
        organizationId?: string | null
        patientId: string
    };
    export type HealthPlansUpdateWithoutHealthPlansValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        createdByUser?: UserUpdateOneWithoutDelegate_aux_User_createdAssets_Health_0NestedInput
        updatedByUser?: UserUpdateOneWithoutDelegate_aux_User_updatedAssets_Health_0NestedInput
        deletedByUser?: UserUpdateOneWithoutDelegate_aux_User_deletedAssets_Health_0NestedInput
        organization?: OrganizationUpdateOneWithoutDelegate_aux_Organization_assets_Healt_0NestedInput
        patient?: PatientUpdateOneRequiredWithoutHealthPlansNestedInput
    };
    export type HealthPlansUncheckedUpdateWithoutHealthPlansValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    export type HealthPlansUncheckedUpdateManyWithoutHealthPlansValuesInput = {
        id?: StringFieldUpdateOperationsInput | string
        createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
        createdById?: NullableStringFieldUpdateOperationsInput | string | null
        updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
        updatedById?: NullableStringFieldUpdateOperationsInput | string | null
        deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
        deletedById?: NullableStringFieldUpdateOperationsInput | string | null
        deleted?: BoolFieldUpdateOperationsInput | boolean
        organizationId?: NullableStringFieldUpdateOperationsInput | string | null
        patientId?: StringFieldUpdateOperationsInput | string
    };
    /**
     * Batch Payload for updateMany & deleteMany & createMany
     */
    export type BatchPayload = {
        count: number
    };
}

/** Shape of the `auth()` function */
export type Auth = {
    userId: string;
    organizationId?: string | null;
    organizationRole?: string | null;
};
