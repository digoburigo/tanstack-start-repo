//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "generated/zenstack/logical-prisma-client"
  moduleFormat    = "cjs"
}

enum UserRole {
  admin
  user
}

enum MemberRole {
  owner
  admin
  secretary
  patient
  member
}

enum AppointmentCategory {
  NORMAL
  FOLLOW_UP
}

enum AppointmentStatus {
  PENDING
  ONGOING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
  NO_SHOW
}

enum Sex {
  male
  female
}

enum Race {
  black
  brown
  white
  yellow
  indigenous
}

enum CivilStatus {
  single
  married
  separated
  divorced
  widowed
}

enum BloodType {
  a_positive
  a_negative
  b_positive
  b_negative
  ab_positive
  ab_negative
  o_positive
  o_negative
}

enum GenderIdentity {
  cisgender
  transgender
  non_binary
}

enum EventCalendarType {
  APPOINTMENT
  APPOINTMENT_FOLLOW_UP
  CONSULTATION
  SURGERY
  EXAM
  MEETING
  OTHER
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth().userId == id)
model User {
  id                                       String                        @id() @default(nanoid())
  name                                     String
  email                                    String
  emailVerified                            Boolean
  image                                    String?
  createdAt                                DateTime                      @default(now())
  updatedAt                                DateTime                      @updatedAt()
  sessions                                 Session[]
  accounts                                 Account[]
  members                                  Member[]
  invitations                              Invitation[]
  username                                 String?
  displayUsername                          String?
  role                                     UserRole?                     @default(user)
  banned                                   Boolean?
  banReason                                String?
  banExpires                               DateTime?
  changePassword                           Boolean?                      @default(false)
  patientUser                              Patient[]                     @relation("patientUser")
  createdAssets                            Asset[]                       @relation("createdAssets")
  updatedAssets                            Asset[]                       @relation("updatedAssets")
  deletedAssets                            Asset[]                       @relation("deletedAssets")
  delegate_aux_User_createdAssets_Appoin_0 AppointmentCid[]              @relation("delegate_aux_User_createdAssets_Appoin_0")
  delegate_aux_User_createdAssets_Appoin_1 Appointment[]                 @relation("delegate_aux_User_createdAssets_Appoin_1")
  delegate_aux_User_createdAssets_Patien_0 Patient[]                     @relation("delegate_aux_User_createdAssets_Patien_0")
  delegate_aux_User_createdAssets_Vaccin_0 Vaccinations[]                @relation("delegate_aux_User_createdAssets_Vaccin_0")
  delegate_aux_User_createdAssets_Allerg_0 Allergies[]                   @relation("delegate_aux_User_createdAssets_Allerg_0")
  delegate_aux_User_createdAssets_Medica_0 Medications[]                 @relation("delegate_aux_User_createdAssets_Medica_0")
  delegate_aux_User_createdAssets_ExamRe_0 ExamResults[]                 @relation("delegate_aux_User_createdAssets_ExamRe_0")
  delegate_aux_User_createdAssets_Comorb_0 Comorbidities[]               @relation("delegate_aux_User_createdAssets_Comorb_0")
  delegate_aux_User_createdAssets_Surger_0 Surgeries[]                   @relation("delegate_aux_User_createdAssets_Surger_0")
  delegate_aux_User_createdAssets_Health_0 HealthPlans[]                 @relation("delegate_aux_User_createdAssets_Health_0")
  delegate_aux_User_createdAssets_Defaul_0 DefaultObjectiveInformation[] @relation("delegate_aux_User_createdAssets_Defaul_0")
  delegate_aux_User_createdAssets_EventC_0 EventCalendar[]               @relation("delegate_aux_User_createdAssets_EventC_0")
  delegate_aux_User_updatedAssets_Appoin_0 AppointmentCid[]              @relation("delegate_aux_User_updatedAssets_Appoin_0")
  delegate_aux_User_updatedAssets_Appoin_1 Appointment[]                 @relation("delegate_aux_User_updatedAssets_Appoin_1")
  delegate_aux_User_updatedAssets_Patien_0 Patient[]                     @relation("delegate_aux_User_updatedAssets_Patien_0")
  delegate_aux_User_updatedAssets_Vaccin_0 Vaccinations[]                @relation("delegate_aux_User_updatedAssets_Vaccin_0")
  delegate_aux_User_updatedAssets_Allerg_0 Allergies[]                   @relation("delegate_aux_User_updatedAssets_Allerg_0")
  delegate_aux_User_updatedAssets_Medica_0 Medications[]                 @relation("delegate_aux_User_updatedAssets_Medica_0")
  delegate_aux_User_updatedAssets_ExamRe_0 ExamResults[]                 @relation("delegate_aux_User_updatedAssets_ExamRe_0")
  delegate_aux_User_updatedAssets_Comorb_0 Comorbidities[]               @relation("delegate_aux_User_updatedAssets_Comorb_0")
  delegate_aux_User_updatedAssets_Surger_0 Surgeries[]                   @relation("delegate_aux_User_updatedAssets_Surger_0")
  delegate_aux_User_updatedAssets_Health_0 HealthPlans[]                 @relation("delegate_aux_User_updatedAssets_Health_0")
  delegate_aux_User_updatedAssets_Defaul_0 DefaultObjectiveInformation[] @relation("delegate_aux_User_updatedAssets_Defaul_0")
  delegate_aux_User_updatedAssets_EventC_0 EventCalendar[]               @relation("delegate_aux_User_updatedAssets_EventC_0")
  delegate_aux_User_deletedAssets_Appoin_0 AppointmentCid[]              @relation("delegate_aux_User_deletedAssets_Appoin_0")
  delegate_aux_User_deletedAssets_Appoin_1 Appointment[]                 @relation("delegate_aux_User_deletedAssets_Appoin_1")
  delegate_aux_User_deletedAssets_Patien_0 Patient[]                     @relation("delegate_aux_User_deletedAssets_Patien_0")
  delegate_aux_User_deletedAssets_Vaccin_0 Vaccinations[]                @relation("delegate_aux_User_deletedAssets_Vaccin_0")
  delegate_aux_User_deletedAssets_Allerg_0 Allergies[]                   @relation("delegate_aux_User_deletedAssets_Allerg_0")
  delegate_aux_User_deletedAssets_Medica_0 Medications[]                 @relation("delegate_aux_User_deletedAssets_Medica_0")
  delegate_aux_User_deletedAssets_ExamRe_0 ExamResults[]                 @relation("delegate_aux_User_deletedAssets_ExamRe_0")
  delegate_aux_User_deletedAssets_Comorb_0 Comorbidities[]               @relation("delegate_aux_User_deletedAssets_Comorb_0")
  delegate_aux_User_deletedAssets_Surger_0 Surgeries[]                   @relation("delegate_aux_User_deletedAssets_Surger_0")
  delegate_aux_User_deletedAssets_Health_0 HealthPlans[]                 @relation("delegate_aux_User_deletedAssets_Health_0")
  delegate_aux_User_deletedAssets_Defaul_0 DefaultObjectiveInformation[] @relation("delegate_aux_User_deletedAssets_Defaul_0")
  delegate_aux_User_deletedAssets_EventC_0 EventCalendar[]               @relation("delegate_aux_User_deletedAssets_EventC_0")

  @@unique([email])
  @@map("user")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@delegate(type)
model Asset {
  id             String        @id() @default(nanoid())
  type           String
  createdAt      DateTime      @default(now())
  createdById    String?       @default("")
  createdByUser  User?         @relation("createdAssets", fields: [createdById], references: [id], onDelete: SetNull)
  updatedAt      DateTime      @updatedAt()
  updatedById    String?       @default("")
  updatedByUser  User?         @relation("updatedAssets", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedAt      DateTime?
  deletedById    String?
  deletedByUser  User?         @relation("deletedAssets", fields: [deletedById], references: [id], onDelete: SetNull)
  /// @omit
  deleted        Boolean       @default(false)
  /// @allow('update', false)
  organizationId String?       @default("")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("asset")
}

model Session {
  id                   String   @id() @default(nanoid())
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt()
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id() @default(nanoid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  /// @omit
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt()

  @@map("account")
}

model Verification {
  id         String   @id() @default(nanoid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("verification")
}

/// @@allow('create,read', true)
model Organization {
  id                                       String                        @id() @default(nanoid())
  name                                     String
  slug                                     String?
  logo                                     String?
  createdAt                                DateTime                      @default(now())
  updatedAt                                DateTime                      @updatedAt()
  metadata                                 String?
  members                                  Member[]
  invitations                              Invitation[]
  assets                                   Asset[]
  delegate_aux_Organization_assets_Appoi_0 AppointmentCid[]              @relation("delegate_aux_Organization_assets_Appoi_0")
  delegate_aux_Organization_assets_Appoi_1 Appointment[]                 @relation("delegate_aux_Organization_assets_Appoi_1")
  delegate_aux_Organization_assets_Patie_0 Patient[]                     @relation("delegate_aux_Organization_assets_Patie_0")
  delegate_aux_Organization_assets_Vacci_0 Vaccinations[]                @relation("delegate_aux_Organization_assets_Vacci_0")
  delegate_aux_Organization_assets_Aller_0 Allergies[]                   @relation("delegate_aux_Organization_assets_Aller_0")
  delegate_aux_Organization_assets_Medic_0 Medications[]                 @relation("delegate_aux_Organization_assets_Medic_0")
  delegate_aux_Organization_assets_ExamR_0 ExamResults[]                 @relation("delegate_aux_Organization_assets_ExamR_0")
  delegate_aux_Organization_assets_Comor_0 Comorbidities[]               @relation("delegate_aux_Organization_assets_Comor_0")
  delegate_aux_Organization_assets_Surge_0 Surgeries[]                   @relation("delegate_aux_Organization_assets_Surge_0")
  delegate_aux_Organization_assets_Healt_0 HealthPlans[]                 @relation("delegate_aux_Organization_assets_Healt_0")
  delegate_aux_Organization_assets_Defau_0 DefaultObjectiveInformation[] @relation("delegate_aux_Organization_assets_Defau_0")
  delegate_aux_Organization_assets_Event_0 EventCalendar[]               @relation("delegate_aux_Organization_assets_Event_0")

  @@unique([slug])
  @@map("organization")
}

/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('read', auth().organizationId == organizationId)
model Member {
  id             String       @id() @default(nanoid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()

  @@map("member")
}

/// @@allow('read', auth().userId == inviterId && auth().organizationId == organizationId)
model Invitation {
  id             String       @id() @default(nanoid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt()
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

/// @@allow('read,create,delete', true)
model Cid {
  id             String           @id() @default(nanoid())
  code           String
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt()
  appointmentCid AppointmentCid[]

  @@unique([code])
  @@index([code])
  @@map("cid")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', appointment.patient.userId == auth().userId)
model AppointmentCid {
  id             String        @id() @default(nanoid())
  type           String
  createdAt      DateTime      @default(now())
  createdById    String?       @default("")
  createdByUser  User?         @relation("delegate_aux_User_createdAssets_Appoin_0", fields: [createdById], references: [id])
  updatedAt      DateTime      @updatedAt()
  updatedById    String?       @default("")
  updatedByUser  User?         @relation("delegate_aux_User_updatedAssets_Appoin_0", fields: [updatedById], references: [id])
  deletedAt      DateTime?
  deletedById    String?
  deletedByUser  User?         @relation("delegate_aux_User_deletedAssets_Appoin_0", fields: [deletedById], references: [id])
  /// @omit
  deleted        Boolean       @default(false)
  /// @allow('update', false)
  organizationId String?       @default("")
  organization   Organization? @relation("delegate_aux_Organization_assets_Appoi_0", fields: [organizationId], references: [id])
  appointmentId  String
  appointment    Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  cidId          String
  cid            Cid           @relation(fields: [cidId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, cidId])
  @@map("appointment_cid")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model Appointment {
  id                  String               @id() @default(nanoid())
  type                String
  createdAt           DateTime             @default(now())
  createdById         String?              @default("")
  createdByUser       User?                @relation("delegate_aux_User_createdAssets_Appoin_1", fields: [createdById], references: [id])
  updatedAt           DateTime             @updatedAt()
  updatedById         String?              @default("")
  updatedByUser       User?                @relation("delegate_aux_User_updatedAssets_Appoin_1", fields: [updatedById], references: [id])
  deletedAt           DateTime?
  deletedById         String?
  deletedByUser       User?                @relation("delegate_aux_User_deletedAssets_Appoin_1", fields: [deletedById], references: [id])
  /// @omit
  deleted             Boolean              @default(false)
  /// @allow('update', false)
  organizationId      String?              @default("")
  organization        Organization?        @relation("delegate_aux_Organization_assets_Appoi_1", fields: [organizationId], references: [id])
  motive              String
  subjective          String
  objective           String
  evaluation          String
  plan                String
  startDate           DateTime?
  endDate             DateTime?
  sickNoteDays        Int?
  category            AppointmentCategory?
  status              AppointmentStatus?
  followUpId          String?              @unique()
  followUp            Appointment?         @relation("FollowUpAppointment", fields: [followUpId], references: [id])
  predecessorFollowUp Appointment?         @relation("FollowUpAppointment")
  cids                AppointmentCid[]
  allergies           Allergies[]
  medications         Medications[]
  comorbidities       Comorbidities[]
  patientId           String
  patient             Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  eventCalendar       EventCalendar?

  @@map("appointment")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', auth().userId == userId)
model Patient {
  id                String          @id() @default(nanoid())
  type              String
  createdAt         DateTime        @default(now())
  createdById       String?         @default("")
  createdByUser     User?           @relation("delegate_aux_User_createdAssets_Patien_0", fields: [createdById], references: [id])
  updatedAt         DateTime        @updatedAt()
  updatedById       String?         @default("")
  updatedByUser     User?           @relation("delegate_aux_User_updatedAssets_Patien_0", fields: [updatedById], references: [id])
  deletedAt         DateTime?
  deletedById       String?
  deletedByUser     User?           @relation("delegate_aux_User_deletedAssets_Patien_0", fields: [deletedById], references: [id])
  /// @omit
  deleted           Boolean         @default(false)
  /// @allow('update', false)
  organizationId    String?         @default("")
  organization      Organization?   @relation("delegate_aux_Organization_assets_Patie_0", fields: [organizationId], references: [id])
  name              String
  cpf               String
  cellphone         String
  email             String
  sex               Sex?
  responsible       String?
  nationality       String
  race              Race?
  state             String
  city              String
  zipcode           String
  neighborhood      String
  street            String
  number            String
  complement        String?
  occupation        String
  sexualOrientation String?
  civilStatus       CivilStatus?
  bloodType         BloodType?
  genderIdentity    GenderIdentity?
  password          String?
  userId            String?
  user              User?           @relation("patientUser", fields: [userId], references: [id])
  appointments      Appointment[]
  vaccinations      Vaccinations[]
  allergies         Allergies[]
  medications       Medications[]
  examResults       ExamResults[]
  comorbidities     Comorbidities[]
  surgeries         Surgeries[]
  healthPlans       HealthPlans[]

  @@map("patient")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model Vaccinations {
  id                   String             @id() @default(nanoid())
  type                 String
  createdAt            DateTime           @default(now())
  createdById          String?            @default("")
  createdByUser        User?              @relation("delegate_aux_User_createdAssets_Vaccin_0", fields: [createdById], references: [id])
  updatedAt            DateTime           @updatedAt()
  updatedById          String?            @default("")
  updatedByUser        User?              @relation("delegate_aux_User_updatedAssets_Vaccin_0", fields: [updatedById], references: [id])
  deletedAt            DateTime?
  deletedById          String?
  deletedByUser        User?              @relation("delegate_aux_User_deletedAssets_Vaccin_0", fields: [deletedById], references: [id])
  /// @omit
  deleted              Boolean            @default(false)
  /// @allow('update', false)
  organizationId       String?            @default("")
  organization         Organization?      @relation("delegate_aux_Organization_assets_Vacci_0", fields: [organizationId], references: [id])
  patientId            String
  patient              Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  vaccinationsValuesId String
  vaccinationsValues   VaccinationsValues @relation(fields: [vaccinationsValuesId], references: [id], onDelete: Cascade)

  @@map("vaccinations")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update', true)
model VaccinationsValues {
  id           String         @id() @default(nanoid())
  value        String         @unique()
  createdAt    DateTime       @default(now())
  vaccinations Vaccinations[]

  @@map("vaccinations_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model Allergies {
  id                String          @id() @default(nanoid())
  type              String
  createdAt         DateTime        @default(now())
  createdById       String?         @default("")
  createdByUser     User?           @relation("delegate_aux_User_createdAssets_Allerg_0", fields: [createdById], references: [id])
  updatedAt         DateTime        @updatedAt()
  updatedById       String?         @default("")
  updatedByUser     User?           @relation("delegate_aux_User_updatedAssets_Allerg_0", fields: [updatedById], references: [id])
  deletedAt         DateTime?
  deletedById       String?
  deletedByUser     User?           @relation("delegate_aux_User_deletedAssets_Allerg_0", fields: [deletedById], references: [id])
  /// @omit
  deleted           Boolean         @default(false)
  /// @allow('update', false)
  organizationId    String?         @default("")
  organization      Organization?   @relation("delegate_aux_Organization_assets_Aller_0", fields: [organizationId], references: [id])
  patientId         String?
  patient           Patient?        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  allergiesValuesId String
  allergiesValues   AllergiesValues @relation(fields: [allergiesValuesId], references: [id], onDelete: Cascade)
  appointmentId     String?
  appointment       Appointment?    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("allergies")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update', true)
model AllergiesValues {
  id        String      @id() @default(nanoid())
  value     String      @unique()
  createdAt DateTime    @default(now())
  allergies Allergies[]

  @@map("allergies_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model Medications {
  id                  String            @id() @default(nanoid())
  type                String
  createdAt           DateTime          @default(now())
  createdById         String?           @default("")
  createdByUser       User?             @relation("delegate_aux_User_createdAssets_Medica_0", fields: [createdById], references: [id])
  updatedAt           DateTime          @updatedAt()
  updatedById         String?           @default("")
  updatedByUser       User?             @relation("delegate_aux_User_updatedAssets_Medica_0", fields: [updatedById], references: [id])
  deletedAt           DateTime?
  deletedById         String?
  deletedByUser       User?             @relation("delegate_aux_User_deletedAssets_Medica_0", fields: [deletedById], references: [id])
  /// @omit
  deleted             Boolean           @default(false)
  /// @allow('update', false)
  organizationId      String?           @default("")
  organization        Organization?     @relation("delegate_aux_Organization_assets_Medic_0", fields: [organizationId], references: [id])
  patientId           String?
  patient             Patient?          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicationsValuesId String
  medicationsValues   MedicationsValues @relation(fields: [medicationsValuesId], references: [id], onDelete: Cascade)
  appointmentId       String?
  appointment         Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("medications")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update', true)
model MedicationsValues {
  id          String        @id() @default(nanoid())
  value       String        @unique()
  createdAt   DateTime      @default(now())
  medications Medications[]

  @@map("medications_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model ExamResults {
  id                  String            @id() @default(nanoid())
  type                String
  createdAt           DateTime          @default(now())
  createdById         String?           @default("")
  createdByUser       User?             @relation("delegate_aux_User_createdAssets_ExamRe_0", fields: [createdById], references: [id])
  updatedAt           DateTime          @updatedAt()
  updatedById         String?           @default("")
  updatedByUser       User?             @relation("delegate_aux_User_updatedAssets_ExamRe_0", fields: [updatedById], references: [id])
  deletedAt           DateTime?
  deletedById         String?
  deletedByUser       User?             @relation("delegate_aux_User_deletedAssets_ExamRe_0", fields: [deletedById], references: [id])
  /// @omit
  deleted             Boolean           @default(false)
  /// @allow('update', false)
  organizationId      String?           @default("")
  organization        Organization?     @relation("delegate_aux_Organization_assets_ExamR_0", fields: [organizationId], references: [id])
  patientId           String
  patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  examResultsValuesId String
  examResultsValues   ExamResultsValues @relation(fields: [examResultsValuesId], references: [id], onDelete: Cascade)
  result              String
  date                DateTime

  @@map("exam_results")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update', true)
model ExamResultsValues {
  id          String        @id() @default(nanoid())
  value       String        @unique()
  createdAt   DateTime      @default(now())
  examResults ExamResults[]

  @@map("exam_results_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model Comorbidities {
  id                    String              @id() @default(nanoid())
  type                  String
  createdAt             DateTime            @default(now())
  createdById           String?             @default("")
  createdByUser         User?               @relation("delegate_aux_User_createdAssets_Comorb_0", fields: [createdById], references: [id])
  updatedAt             DateTime            @updatedAt()
  updatedById           String?             @default("")
  updatedByUser         User?               @relation("delegate_aux_User_updatedAssets_Comorb_0", fields: [updatedById], references: [id])
  deletedAt             DateTime?
  deletedById           String?
  deletedByUser         User?               @relation("delegate_aux_User_deletedAssets_Comorb_0", fields: [deletedById], references: [id])
  /// @omit
  deleted               Boolean             @default(false)
  /// @allow('update', false)
  organizationId        String?             @default("")
  organization          Organization?       @relation("delegate_aux_Organization_assets_Comor_0", fields: [organizationId], references: [id])
  patientId             String?
  patient               Patient?            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  comorbiditiesValuesId String
  comorbiditiesValues   ComorbiditiesValues @relation(fields: [comorbiditiesValuesId], references: [id], onDelete: Cascade)
  appointmentId         String?
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("comorbidities")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update,delete', true)
model ComorbiditiesValues {
  id            String          @id() @default(nanoid())
  value         String          @unique()
  createdAt     DateTime        @default(now())
  comorbidities Comorbidities[]

  @@map("comorbidities_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model Surgeries {
  id                String          @id() @default(nanoid())
  type              String
  createdAt         DateTime        @default(now())
  createdById       String?         @default("")
  createdByUser     User?           @relation("delegate_aux_User_createdAssets_Surger_0", fields: [createdById], references: [id])
  updatedAt         DateTime        @updatedAt()
  updatedById       String?         @default("")
  updatedByUser     User?           @relation("delegate_aux_User_updatedAssets_Surger_0", fields: [updatedById], references: [id])
  deletedAt         DateTime?
  deletedById       String?
  deletedByUser     User?           @relation("delegate_aux_User_deletedAssets_Surger_0", fields: [deletedById], references: [id])
  /// @omit
  deleted           Boolean         @default(false)
  /// @allow('update', false)
  organizationId    String?         @default("")
  organization      Organization?   @relation("delegate_aux_Organization_assets_Surge_0", fields: [organizationId], references: [id])
  patientId         String
  patient           Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  surgeriesValuesId String
  surgeriesValues   SurgeriesValues @relation(fields: [surgeriesValuesId], references: [id], onDelete: Cascade)

  @@map("surgeries")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update,delete', true)
model SurgeriesValues {
  id        String      @id() @default(nanoid())
  value     String      @unique()
  createdAt DateTime    @default(now())
  surgeries Surgeries[]

  @@map("surgeries_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', patient.userId == auth().userId)
model HealthPlans {
  id                  String            @id() @default(nanoid())
  type                String
  createdAt           DateTime          @default(now())
  createdById         String?           @default("")
  createdByUser       User?             @relation("delegate_aux_User_createdAssets_Health_0", fields: [createdById], references: [id])
  updatedAt           DateTime          @updatedAt()
  updatedById         String?           @default("")
  updatedByUser       User?             @relation("delegate_aux_User_updatedAssets_Health_0", fields: [updatedById], references: [id])
  deletedAt           DateTime?
  deletedById         String?
  deletedByUser       User?             @relation("delegate_aux_User_deletedAssets_Health_0", fields: [deletedById], references: [id])
  /// @omit
  deleted             Boolean           @default(false)
  /// @allow('update', false)
  organizationId      String?           @default("")
  organization        Organization?     @relation("delegate_aux_Organization_assets_Healt_0", fields: [organizationId], references: [id])
  patientId           String
  patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  healthPlansValuesId String
  healthPlansValues   HealthPlansValues @relation(fields: [healthPlansValuesId], references: [id], onDelete: Cascade)

  @@map("health_plans")
}

/// @@deny('all', auth() == null)
/// @@allow('create,read,update,delete', true)
model HealthPlansValues {
  id          String        @id() @default(nanoid())
  value       String        @unique()
  createdAt   DateTime      @default(now())
  healthPlans HealthPlans[]

  @@map("health_plans_values")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
model DefaultObjectiveInformation {
  id             String        @id() @default(nanoid())
  type           String
  createdAt      DateTime      @default(now())
  createdById    String?       @default("")
  createdByUser  User?         @relation("delegate_aux_User_createdAssets_Defaul_0", fields: [createdById], references: [id])
  updatedAt      DateTime      @updatedAt()
  updatedById    String?       @default("")
  updatedByUser  User?         @relation("delegate_aux_User_updatedAssets_Defaul_0", fields: [updatedById], references: [id])
  deletedAt      DateTime?
  deletedById    String?
  deletedByUser  User?         @relation("delegate_aux_User_deletedAssets_Defaul_0", fields: [deletedById], references: [id])
  /// @omit
  deleted        Boolean       @default(false)
  /// @allow('update', false)
  organizationId String?       @default("")
  organization   Organization? @relation("delegate_aux_Organization_assets_Defau_0", fields: [organizationId], references: [id])
  text           String?

  @@map("default_objective_information")
}

/// @@deny('read', deleted)
/// @@deny('all', auth() == null)
/// @@deny('all', auth().organizationId != organizationId)
/// @@allow('all', auth().userId == createdById || (auth().organizationId == organizationId && (auth().organizationRole == 'owner' || auth().organizationRole == 'admin')))
/// @@allow('read,create,update', organization.members?[userId == auth().userId && role != 'patient'])
/// @@allow('read', appointment.patient.userId == auth().userId)
model EventCalendar {
  id             String             @id() @default(nanoid())
  type           String
  createdAt      DateTime           @default(now())
  createdById    String?            @default("")
  createdByUser  User?              @relation("delegate_aux_User_createdAssets_EventC_0", fields: [createdById], references: [id])
  updatedAt      DateTime           @updatedAt()
  updatedById    String?            @default("")
  updatedByUser  User?              @relation("delegate_aux_User_updatedAssets_EventC_0", fields: [updatedById], references: [id])
  deletedAt      DateTime?
  deletedById    String?
  deletedByUser  User?              @relation("delegate_aux_User_deletedAssets_EventC_0", fields: [deletedById], references: [id])
  /// @omit
  deleted        Boolean            @default(false)
  /// @allow('update', false)
  organizationId String?            @default("")
  organization   Organization?      @relation("delegate_aux_Organization_assets_Event_0", fields: [organizationId], references: [id])
  title          String
  description    String?
  start          DateTime
  end            DateTime
  allDay         Boolean?           @default(false)
  eventType      EventCalendarType?
  rrule          String?
  appointmentId  String?            @unique()
  appointment    Appointment?       @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("event_calendar")
}
