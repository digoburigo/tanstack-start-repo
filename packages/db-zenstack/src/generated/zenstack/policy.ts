/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { type QueryContext, type CrudContract, type PermissionCheckerContext } from "@zenstackhq/runtime";
import { allFieldsEqual } from "@zenstackhq/runtime/validation";
import { type PolicyDef, type PermissionCheckerConstraint } from "@zenstackhq/runtime/enhancements/node";
import { UserRole } from "../prisma/client";
import { AppointmentCategory } from "../prisma/client";
import { AppointmentStatus } from "../prisma/client";
import { Sex } from "../prisma/client";
import { Race } from "../prisma/client";
import { CivilStatus } from "../prisma/client";
import { BloodType } from "../prisma/client";
import { GenderIdentity } from "../prisma/client";
import { EventCalendarType } from "../prisma/client";

const policy: PolicyDef = {
    policy: {
        user: {
            modelLevel: {
                read: { guard: User_read, permissionChecker: true, },
                create: { guard: User_create, permissionChecker: true, inputChecker: User_create_input, },
                update: { guard: User_update, permissionChecker: User$checker$update, },
                postUpdate: { guard: User_postUpdate, },
                delete: { guard: User_delete, permissionChecker: User$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        asset: {
            modelLevel: {
                read: { guard: Asset_read, permissionChecker: Asset$checker$read, },
                create: { guard: Asset_create, permissionChecker: Asset$checker$create, },
                update: { guard: Asset_update, permissionChecker: Asset$checker$update, },
                postUpdate: { guard: Asset_postUpdate, },
                delete: { guard: Asset_delete, permissionChecker: Asset$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Asset$organizationId_update,
                    },

                },
            },

        },
        session: {
            modelLevel: {
                read: { guard: Session_read, permissionChecker: false, },
                create: { guard: Session_create, permissionChecker: false, inputChecker: Session_create_input, },
                update: { guard: Session_update, permissionChecker: false, },
                postUpdate: { guard: Session_postUpdate, },
                delete: { guard: Session_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        account: {
            modelLevel: {
                read: { guard: Account_read, permissionChecker: false, },
                create: { guard: Account_create, permissionChecker: false, inputChecker: Account_create_input, },
                update: { guard: Account_update, permissionChecker: false, },
                postUpdate: { guard: Account_postUpdate, },
                delete: { guard: Account_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        verification: {
            modelLevel: {
                read: { guard: Verification_read, permissionChecker: false, },
                create: { guard: Verification_create, permissionChecker: false, inputChecker: Verification_create_input, },
                update: { guard: Verification_update, permissionChecker: false, },
                postUpdate: { guard: Verification_postUpdate, },
                delete: { guard: Verification_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        organization: {
            modelLevel: {
                read: { guard: Organization_read, permissionChecker: true, },
                create: { guard: Organization_create, permissionChecker: true, inputChecker: Organization_create_input, },
                update: { guard: Organization_update, permissionChecker: false, },
                postUpdate: { guard: Organization_postUpdate, },
                delete: { guard: Organization_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        member: {
            modelLevel: {
                read: { guard: Member_read, permissionChecker: Member$checker$read, },
                create: { guard: Member_create, permissionChecker: false, },
                update: { guard: Member_update, permissionChecker: false, },
                postUpdate: { guard: Member_postUpdate, },
                delete: { guard: Member_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        invitation: {
            modelLevel: {
                read: { guard: Invitation_read, permissionChecker: Invitation$checker$read, },
                create: { guard: Invitation_create, permissionChecker: false, inputChecker: Invitation_create_input, },
                update: { guard: Invitation_update, permissionChecker: false, },
                postUpdate: { guard: Invitation_postUpdate, },
                delete: { guard: Invitation_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        cid: {
            modelLevel: {
                read: { guard: Cid_read, permissionChecker: true, },
                create: { guard: Cid_create, permissionChecker: true, inputChecker: Cid_create_input, },
                update: { guard: Cid_update, permissionChecker: false, },
                postUpdate: { guard: Cid_postUpdate, },
                delete: { guard: Cid_delete, permissionChecker: true, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        appointmentCid: {
            modelLevel: {
                read: { guard: AppointmentCid_read, permissionChecker: AppointmentCid$checker$read, },
                create: { guard: AppointmentCid_create, permissionChecker: AppointmentCid$checker$create, },
                update: { guard: AppointmentCid_update, permissionChecker: AppointmentCid$checker$update, },
                postUpdate: { guard: AppointmentCid_postUpdate, },
                delete: { guard: AppointmentCid_delete, permissionChecker: AppointmentCid$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: AppointmentCid$organizationId_update,
                    },

                },
            },

        },
        appointment: {
            modelLevel: {
                read: { guard: Appointment_read, permissionChecker: Appointment$checker$read, },
                create: { guard: Appointment_create, permissionChecker: Appointment$checker$create, },
                update: { guard: Appointment_update, permissionChecker: Appointment$checker$update, },
                postUpdate: { guard: Appointment_postUpdate, },
                delete: { guard: Appointment_delete, permissionChecker: Appointment$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Appointment$organizationId_update,
                    },

                },
            },

        },
        patient: {
            modelLevel: {
                read: { guard: Patient_read, permissionChecker: Patient$checker$read, },
                create: { guard: Patient_create, permissionChecker: Patient$checker$create, },
                update: { guard: Patient_update, permissionChecker: Patient$checker$update, },
                postUpdate: { guard: Patient_postUpdate, },
                delete: { guard: Patient_delete, permissionChecker: Patient$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Patient$organizationId_update,
                    },

                },
            },

        },
        vaccinations: {
            modelLevel: {
                read: { guard: Vaccinations_read, permissionChecker: Vaccinations$checker$read, },
                create: { guard: Vaccinations_create, permissionChecker: Vaccinations$checker$create, },
                update: { guard: Vaccinations_update, permissionChecker: Vaccinations$checker$update, },
                postUpdate: { guard: Vaccinations_postUpdate, },
                delete: { guard: Vaccinations_delete, permissionChecker: Vaccinations$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Vaccinations$organizationId_update,
                    },

                },
            },

        },
        vaccinationsValues: {
            modelLevel: {
                read: { guard: VaccinationsValues_read, permissionChecker: VaccinationsValues$checker$read, },
                create: { guard: VaccinationsValues_create, permissionChecker: VaccinationsValues$checker$create, inputChecker: VaccinationsValues_create_input, },
                update: { guard: VaccinationsValues_update, permissionChecker: VaccinationsValues$checker$update, },
                postUpdate: { guard: VaccinationsValues_postUpdate, },
                delete: { guard: VaccinationsValues_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        allergies: {
            modelLevel: {
                read: { guard: Allergies_read, permissionChecker: Allergies$checker$read, },
                create: { guard: Allergies_create, permissionChecker: Allergies$checker$create, },
                update: { guard: Allergies_update, permissionChecker: Allergies$checker$update, },
                postUpdate: { guard: Allergies_postUpdate, },
                delete: { guard: Allergies_delete, permissionChecker: Allergies$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Allergies$organizationId_update,
                    },

                },
            },

        },
        allergiesValues: {
            modelLevel: {
                read: { guard: AllergiesValues_read, permissionChecker: AllergiesValues$checker$read, },
                create: { guard: AllergiesValues_create, permissionChecker: AllergiesValues$checker$create, inputChecker: AllergiesValues_create_input, },
                update: { guard: AllergiesValues_update, permissionChecker: AllergiesValues$checker$update, },
                postUpdate: { guard: AllergiesValues_postUpdate, },
                delete: { guard: AllergiesValues_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        medications: {
            modelLevel: {
                read: { guard: Medications_read, permissionChecker: Medications$checker$read, },
                create: { guard: Medications_create, permissionChecker: Medications$checker$create, },
                update: { guard: Medications_update, permissionChecker: Medications$checker$update, },
                postUpdate: { guard: Medications_postUpdate, },
                delete: { guard: Medications_delete, permissionChecker: Medications$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Medications$organizationId_update,
                    },

                },
            },

        },
        medicationsValues: {
            modelLevel: {
                read: { guard: MedicationsValues_read, permissionChecker: MedicationsValues$checker$read, },
                create: { guard: MedicationsValues_create, permissionChecker: MedicationsValues$checker$create, inputChecker: MedicationsValues_create_input, },
                update: { guard: MedicationsValues_update, permissionChecker: MedicationsValues$checker$update, },
                postUpdate: { guard: MedicationsValues_postUpdate, },
                delete: { guard: MedicationsValues_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        examResults: {
            modelLevel: {
                read: { guard: ExamResults_read, permissionChecker: ExamResults$checker$read, },
                create: { guard: ExamResults_create, permissionChecker: ExamResults$checker$create, },
                update: { guard: ExamResults_update, permissionChecker: ExamResults$checker$update, },
                postUpdate: { guard: ExamResults_postUpdate, },
                delete: { guard: ExamResults_delete, permissionChecker: ExamResults$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: ExamResults$organizationId_update,
                    },

                },
            },

        },
        examResultsValues: {
            modelLevel: {
                read: { guard: ExamResultsValues_read, permissionChecker: ExamResultsValues$checker$read, },
                create: { guard: ExamResultsValues_create, permissionChecker: ExamResultsValues$checker$create, inputChecker: ExamResultsValues_create_input, },
                update: { guard: ExamResultsValues_update, permissionChecker: ExamResultsValues$checker$update, },
                postUpdate: { guard: ExamResultsValues_postUpdate, },
                delete: { guard: ExamResultsValues_delete, permissionChecker: false, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        comorbidities: {
            modelLevel: {
                read: { guard: Comorbidities_read, permissionChecker: Comorbidities$checker$read, },
                create: { guard: Comorbidities_create, permissionChecker: Comorbidities$checker$create, },
                update: { guard: Comorbidities_update, permissionChecker: Comorbidities$checker$update, },
                postUpdate: { guard: Comorbidities_postUpdate, },
                delete: { guard: Comorbidities_delete, permissionChecker: Comorbidities$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Comorbidities$organizationId_update,
                    },

                },
            },

        },
        comorbiditiesValues: {
            modelLevel: {
                read: { guard: ComorbiditiesValues_read, permissionChecker: ComorbiditiesValues$checker$read, },
                create: { guard: ComorbiditiesValues_create, permissionChecker: ComorbiditiesValues$checker$create, inputChecker: ComorbiditiesValues_create_input, },
                update: { guard: ComorbiditiesValues_update, permissionChecker: ComorbiditiesValues$checker$update, },
                postUpdate: { guard: ComorbiditiesValues_postUpdate, },
                delete: { guard: ComorbiditiesValues_delete, permissionChecker: ComorbiditiesValues$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        surgeries: {
            modelLevel: {
                read: { guard: Surgeries_read, permissionChecker: Surgeries$checker$read, },
                create: { guard: Surgeries_create, permissionChecker: Surgeries$checker$create, },
                update: { guard: Surgeries_update, permissionChecker: Surgeries$checker$update, },
                postUpdate: { guard: Surgeries_postUpdate, },
                delete: { guard: Surgeries_delete, permissionChecker: Surgeries$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: Surgeries$organizationId_update,
                    },

                },
            },

        },
        surgeriesValues: {
            modelLevel: {
                read: { guard: SurgeriesValues_read, permissionChecker: SurgeriesValues$checker$read, },
                create: { guard: SurgeriesValues_create, permissionChecker: SurgeriesValues$checker$create, inputChecker: SurgeriesValues_create_input, },
                update: { guard: SurgeriesValues_update, permissionChecker: SurgeriesValues$checker$update, },
                postUpdate: { guard: SurgeriesValues_postUpdate, },
                delete: { guard: SurgeriesValues_delete, permissionChecker: SurgeriesValues$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        healthPlans: {
            modelLevel: {
                read: { guard: HealthPlans_read, permissionChecker: HealthPlans$checker$read, },
                create: { guard: HealthPlans_create, permissionChecker: HealthPlans$checker$create, },
                update: { guard: HealthPlans_update, permissionChecker: HealthPlans$checker$update, },
                postUpdate: { guard: HealthPlans_postUpdate, },
                delete: { guard: HealthPlans_delete, permissionChecker: HealthPlans$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: HealthPlans$organizationId_update,
                    },

                },
            },

        },
        healthPlansValues: {
            modelLevel: {
                read: { guard: HealthPlansValues_read, permissionChecker: HealthPlansValues$checker$read, },
                create: { guard: HealthPlansValues_create, permissionChecker: HealthPlansValues$checker$create, inputChecker: HealthPlansValues_create_input, },
                update: { guard: HealthPlansValues_update, permissionChecker: HealthPlansValues$checker$update, },
                postUpdate: { guard: HealthPlansValues_postUpdate, },
                delete: { guard: HealthPlansValues_delete, permissionChecker: HealthPlansValues$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        defaultObjectiveInformation: {
            modelLevel: {
                read: { guard: DefaultObjectiveInformation_read, permissionChecker: DefaultObjectiveInformation$checker$read, },
                create: { guard: DefaultObjectiveInformation_create, permissionChecker: DefaultObjectiveInformation$checker$create, },
                update: { guard: DefaultObjectiveInformation_update, permissionChecker: DefaultObjectiveInformation$checker$update, },
                postUpdate: { guard: DefaultObjectiveInformation_postUpdate, },
                delete: { guard: DefaultObjectiveInformation_delete, permissionChecker: DefaultObjectiveInformation$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: DefaultObjectiveInformation$organizationId_update,
                    },

                },
            },

        },
        eventCalendar: {
            modelLevel: {
                read: { guard: EventCalendar_read, permissionChecker: EventCalendar$checker$read, },
                create: { guard: EventCalendar_create, permissionChecker: EventCalendar$checker$create, },
                update: { guard: EventCalendar_update, permissionChecker: EventCalendar$checker$update, },
                postUpdate: { guard: EventCalendar_postUpdate, },
                delete: { guard: EventCalendar_delete, permissionChecker: EventCalendar$checker$delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {
                    organizationId: {
                        guard: EventCalendar$organizationId_update,
                    },

                },
            },

        },
    },
    validation: {
        user: { hasValidation: false },
        asset: { hasValidation: false },
        session: { hasValidation: false },
        account: { hasValidation: false },
        verification: { hasValidation: false },
        organization: { hasValidation: false },
        member: { hasValidation: false },
        invitation: { hasValidation: false },
        cid: { hasValidation: false },
        appointmentCid: { hasValidation: false },
        appointment: { hasValidation: false },
        patient: { hasValidation: false },
        vaccinations: { hasValidation: false },
        vaccinationsValues: { hasValidation: false },
        allergies: { hasValidation: false },
        allergiesValues: { hasValidation: false },
        medications: { hasValidation: false },
        medicationsValues: { hasValidation: false },
        examResults: { hasValidation: false },
        examResultsValues: { hasValidation: false },
        comorbidities: { hasValidation: false },
        comorbiditiesValues: { hasValidation: false },
        surgeries: { hasValidation: false },
        surgeriesValues: { hasValidation: false },
        healthPlans: { hasValidation: false },
        healthPlansValues: { hasValidation: false },
        defaultObjectiveInformation: { hasValidation: false },
        eventCalendar: { hasValidation: false },
    },
    authSelector: { "userId": true, "organizationId": true, "organizationRole": true },
};

function User_read(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_User_read(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function User_create(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_User_create(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function User_create_input(input: any, context: QueryContext): boolean {
    return true
}

function User_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return ((user?.userId ?? null) == null) ? { OR: [] } : { id: { equals: (user?.userId ?? null) } };
}

function User$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'id', type: 'string' } }] };
}

function $check_User_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user?.userId == input?.id)) { return true; }

    return false;
}

function User_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_User_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function User_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return ((user?.userId ?? null) == null) ? { OR: [] } : { id: { equals: (user?.userId ?? null) } };
}

function User$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'id', type: 'string' } }] };
}

function $check_User_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user?.userId == input?.id)) { return true; }

    return false;
}

function Asset_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return { AND: [{ AND: [{ NOT: { deleted: true } }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, { NOT: { organizationId: { not: { equals: (user?.organizationId ?? null) } } } }] }, { OR: [{ OR: [{ createdById: { equals: (user?.userId ?? null) } }, { AND: [{ organizationId: { equals: (user?.organizationId ?? null) } }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }] }] }, { organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } } }] }] };
}

function Asset$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Asset_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Asset_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return { AND: [{ AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, { NOT: { organizationId: { not: { equals: (user?.organizationId ?? null) } } } }] }, { OR: [{ OR: [{ createdById: { equals: (user?.userId ?? null) } }, { AND: [{ organizationId: { equals: (user?.organizationId ?? null) } }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }] }] }, { organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } } }] }] };
}

function Asset$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Asset_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Asset_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return { AND: [{ AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, { NOT: { organizationId: { not: { equals: (user?.organizationId ?? null) } } } }] }, { OR: [{ OR: [{ createdById: { equals: (user?.userId ?? null) } }, { AND: [{ organizationId: { equals: (user?.organizationId ?? null) } }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }] }] }, { organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } } }] }] };
}

function Asset$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Asset_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Asset_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Asset_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Asset_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return { AND: [{ AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, { NOT: { organizationId: { not: { equals: (user?.organizationId ?? null) } } } }] }, { OR: [{ createdById: { equals: (user?.userId ?? null) } }, { AND: [{ organizationId: { equals: (user?.organizationId ?? null) } }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }] }] }] };
}

function Asset$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Asset_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Asset$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Asset$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function Session_read(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Session_read(input: any, context: QueryContext): any {
    return false;
}

function Session_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Session_create(input: any, context: QueryContext): any {
    return false;
}

function Session_create_input(input: any, context: QueryContext): boolean {
    return false;
}

function Session_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Session_update(input: any, context: QueryContext): any {
    return false;
}

function Session_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Session_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Session_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Session_delete(input: any, context: QueryContext): any {
    return false;
}

function Account_read(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Account_read(input: any, context: QueryContext): any {
    return false;
}

function Account_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Account_create(input: any, context: QueryContext): any {
    return false;
}

function Account_create_input(input: any, context: QueryContext): boolean {
    return false;
}

function Account_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Account_update(input: any, context: QueryContext): any {
    return false;
}

function Account_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Account_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Account_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Account_delete(input: any, context: QueryContext): any {
    return false;
}

function Verification_read(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Verification_read(input: any, context: QueryContext): any {
    return false;
}

function Verification_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Verification_create(input: any, context: QueryContext): any {
    return false;
}

function Verification_create_input(input: any, context: QueryContext): boolean {
    return false;
}

function Verification_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Verification_update(input: any, context: QueryContext): any {
    return false;
}

function Verification_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Verification_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Verification_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Verification_delete(input: any, context: QueryContext): any {
    return false;
}

function Organization_read(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Organization_read(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function Organization_create(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Organization_create(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function Organization_create_input(input: any, context: QueryContext): boolean {
    return true
}

function Organization_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Organization_update(input: any, context: QueryContext): any {
    return false;
}

function Organization_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Organization_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Organization_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Organization_delete(input: any, context: QueryContext): any {
    return false;
}

function Member_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return { AND: [{ AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, { NOT: ((user?.organizationId ?? null) == null) ? { AND: [] } : { organizationId: { not: { equals: (user?.organizationId ?? null) } } } }] }, ((user?.organizationId ?? null) == null) ? { OR: [] } : { organizationId: { equals: (user?.organizationId ?? null) } }] };
}

function Member$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Member_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if ((user?.organizationId == input?.organizationId)) { return true; }

    return false;
}

function Member_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Member_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    return false;
}

function Member_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Member_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    return false;
}

function Member_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Member_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Member_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Member_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    return false;
}

function Invitation_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { inviterId: { equals: (user?.userId ?? null) } }, ((user?.organizationId ?? null) == null) ? { OR: [] } : { organizationId: { equals: (user?.organizationId ?? null) } }] };
}

function Invitation$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'inviterId', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] };
}

function $check_Invitation_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (((user?.userId == input?.inviterId) && (user?.organizationId == input?.organizationId))) { return true; }

    return false;
}

function Invitation_create(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Invitation_create(input: any, context: QueryContext): any {
    return false;
}

function Invitation_create_input(input: any, context: QueryContext): boolean {
    return false;
}

function Invitation_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Invitation_update(input: any, context: QueryContext): any {
    return false;
}

function Invitation_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Invitation_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Invitation_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Invitation_delete(input: any, context: QueryContext): any {
    return false;
}

function Cid_read(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Cid_read(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function Cid_create(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Cid_create(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function Cid_create_input(input: any, context: QueryContext): boolean {
    return true
}

function Cid_update(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_Cid_update(input: any, context: QueryContext): any {
    return false;
}

function Cid_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Cid_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Cid_delete(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Cid_delete(input: any, context: QueryContext): any {
    if (true) { return true; }

    return false;
}

function AppointmentCid_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { appointment: { patient: { userId: { equals: (user?.userId ?? null) } } } }]
        }]
    };
}

function AppointmentCid$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_AppointmentCid_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.appointment?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function AppointmentCid_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function AppointmentCid$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_AppointmentCid_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function AppointmentCid_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function AppointmentCid$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_AppointmentCid_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function AppointmentCid_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_AppointmentCid_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function AppointmentCid_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function AppointmentCid$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_AppointmentCid_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function AppointmentCid$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_AppointmentCid$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function Appointment_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function Appointment$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Appointment_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function Appointment_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Appointment$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Appointment_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Appointment_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Appointment$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Appointment_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Appointment_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Appointment_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Appointment_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Appointment$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Appointment_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Appointment$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Appointment$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function Patient_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { userId: { equals: (user?.userId ?? null) } }]
        }]
    };
}

function Patient$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'userId', type: 'string' } }] }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Patient_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((user?.userId == input?.userId)) { return true; }

    return false;
}

function Patient_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Patient$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Patient_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Patient_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Patient$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Patient_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Patient_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Patient_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Patient_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Patient$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Patient_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Patient$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Patient$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function Vaccinations_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function Vaccinations$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Vaccinations_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function Vaccinations_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Vaccinations$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Vaccinations_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Vaccinations_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Vaccinations$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Vaccinations_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Vaccinations_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Vaccinations_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Vaccinations_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Vaccinations$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Vaccinations_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Vaccinations$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Vaccinations$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function VaccinationsValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function VaccinationsValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_VaccinationsValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function VaccinationsValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function VaccinationsValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_VaccinationsValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function VaccinationsValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function VaccinationsValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function VaccinationsValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_VaccinationsValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function VaccinationsValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_VaccinationsValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function VaccinationsValues_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_VaccinationsValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    return false;
}

function Allergies_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function Allergies$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Allergies_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function Allergies_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Allergies$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Allergies_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Allergies_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Allergies$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Allergies_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Allergies_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Allergies_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Allergies_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Allergies$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Allergies_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Allergies$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Allergies$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function AllergiesValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function AllergiesValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_AllergiesValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function AllergiesValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function AllergiesValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_AllergiesValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function AllergiesValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function AllergiesValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function AllergiesValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_AllergiesValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function AllergiesValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_AllergiesValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function AllergiesValues_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_AllergiesValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    return false;
}

function Medications_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function Medications$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Medications_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function Medications_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Medications$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Medications_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Medications_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Medications$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Medications_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Medications_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Medications_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Medications_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Medications$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Medications_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Medications$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Medications$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function MedicationsValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function MedicationsValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_MedicationsValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function MedicationsValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function MedicationsValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_MedicationsValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function MedicationsValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function MedicationsValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function MedicationsValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_MedicationsValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function MedicationsValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_MedicationsValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function MedicationsValues_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_MedicationsValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    return false;
}

function ExamResults_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function ExamResults$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_ExamResults_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function ExamResults_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function ExamResults$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_ExamResults_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function ExamResults_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function ExamResults$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_ExamResults_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function ExamResults_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_ExamResults_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function ExamResults_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function ExamResults$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_ExamResults_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function ExamResults$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_ExamResults$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function ExamResultsValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ExamResultsValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ExamResultsValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function ExamResultsValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ExamResultsValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ExamResultsValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function ExamResultsValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function ExamResultsValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ExamResultsValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ExamResultsValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function ExamResultsValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_ExamResultsValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function ExamResultsValues_delete(context: QueryContext, db: CrudContract): any {
    return { OR: [] };
}

function $check_ExamResultsValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    return false;
}

function Comorbidities_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function Comorbidities$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Comorbidities_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function Comorbidities_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Comorbidities$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Comorbidities_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Comorbidities_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Comorbidities$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Comorbidities_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Comorbidities_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Comorbidities_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Comorbidities_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Comorbidities$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Comorbidities_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Comorbidities$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Comorbidities$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function ComorbiditiesValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ComorbiditiesValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ComorbiditiesValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function ComorbiditiesValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ComorbiditiesValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ComorbiditiesValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function ComorbiditiesValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function ComorbiditiesValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ComorbiditiesValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ComorbiditiesValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function ComorbiditiesValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_ComorbiditiesValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function ComorbiditiesValues_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function ComorbiditiesValues$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_ComorbiditiesValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function Surgeries_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function Surgeries$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Surgeries_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function Surgeries_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Surgeries$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Surgeries_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Surgeries_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function Surgeries$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Surgeries_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function Surgeries_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Surgeries_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Surgeries_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function Surgeries$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_Surgeries_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function Surgeries$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_Surgeries$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function SurgeriesValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function SurgeriesValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_SurgeriesValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function SurgeriesValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function SurgeriesValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_SurgeriesValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function SurgeriesValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function SurgeriesValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function SurgeriesValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_SurgeriesValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function SurgeriesValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_SurgeriesValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function SurgeriesValues_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function SurgeriesValues$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_SurgeriesValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function HealthPlans_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { patient: { userId: { equals: (user?.userId ?? null) } } }]
        }]
    };
}

function HealthPlans$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_HealthPlans_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function HealthPlans_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function HealthPlans$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_HealthPlans_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function HealthPlans_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function HealthPlans$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_HealthPlans_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function HealthPlans_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_HealthPlans_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function HealthPlans_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function HealthPlans$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_HealthPlans_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function HealthPlans$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_HealthPlans$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function HealthPlansValues_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function HealthPlansValues$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_HealthPlansValues_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function HealthPlansValues_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function HealthPlansValues$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_HealthPlansValues_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function HealthPlansValues_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return !((user == null)) && (true)
}

function HealthPlansValues_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function HealthPlansValues$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_HealthPlansValues_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function HealthPlansValues_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_HealthPlansValues_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function HealthPlansValues_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return { OR: [] }; } if (true) { return { AND: [] }; } return { OR: [] };
}

function HealthPlansValues$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'value', value: true, type: 'boolean' }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }] };
}

function $check_HealthPlansValues_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if (true) { return true; }

    return false;
}

function DefaultObjectiveInformation_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function DefaultObjectiveInformation$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_DefaultObjectiveInformation_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function DefaultObjectiveInformation_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function DefaultObjectiveInformation$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_DefaultObjectiveInformation_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function DefaultObjectiveInformation_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function DefaultObjectiveInformation$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_DefaultObjectiveInformation_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function DefaultObjectiveInformation_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_DefaultObjectiveInformation_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function DefaultObjectiveInformation_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function DefaultObjectiveInformation$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_DefaultObjectiveInformation_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function DefaultObjectiveInformation$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_DefaultObjectiveInformation$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}

function EventCalendar_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{
                NOT: {
                    delegate_aux_asset: {
                        deleted: true
                    }
                }
            }, { NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }, { appointment: { patient: { userId: { equals: (user?.userId ?? null) } } } }]
        }]
    };
}

function EventCalendar$checker$read(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }, { kind: 'variable', name: '__var1', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'variable', name: 'deleted', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_EventCalendar_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if (input?.deleted) { return false; }

    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    if ((input?.appointment?.patient?.userId == user?.userId)) { return true; }

    return false;
}

function EventCalendar_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function EventCalendar$checker$create(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_EventCalendar_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function EventCalendar_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                OR: [{
                    delegate_aux_asset: {
                        createdById: { equals: (user?.userId ?? null) }
                    }
                }, {
                    AND: [{
                        delegate_aux_asset: {
                            organizationId: { equals: (user?.organizationId ?? null) }
                        }
                    }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
                }]
            }, {
                delegate_aux_asset: {
                    organization: { members: { some: { AND: [((user?.userId ?? null) == null) ? { OR: [] } : { userId: { equals: (user?.userId ?? null) } }, { role: { not: { equals: 'patient' } } }] } } }
                }
            }]
        }]
    };
}

function EventCalendar$checker$update(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'variable', name: '__var0', type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_EventCalendar_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    if ((((input?.organization?.members)?.some((_item: any) => ((_item?.userId == user?.userId) && (_item?.role != 'patient')))) ?? false)) { return true; }

    return false;
}

function EventCalendar_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_EventCalendar_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function EventCalendar_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    return {
        AND: [{
            AND: [{ NOT: (user == null) ? { AND: [] } : { OR: [] } }, {
                NOT: {
                    delegate_aux_asset: {
                        organizationId: { not: { equals: (user?.organizationId ?? null) } }
                    }
                }
            }]
        }, {
            OR: [{
                delegate_aux_asset: {
                    createdById: { equals: (user?.userId ?? null) }
                }
            }, {
                AND: [{
                    delegate_aux_asset: {
                        organizationId: { equals: (user?.organizationId ?? null) }
                    }
                }, { OR: [((user?.organizationRole ?? null) == 'owner') ? { AND: [] } : { OR: [] }, ((user?.organizationRole ?? null) == 'admin') ? { AND: [] } : { OR: [] }] }]
            }]
        }]
    };
}

function EventCalendar$checker$delete(context: PermissionCheckerContext): PermissionCheckerConstraint {
    const user: any = context.user ?? null;
    return { kind: 'and', children: [{ kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.userId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.userId, type: 'string' }, right: { kind: 'variable', name: 'createdById', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }, { kind: 'or', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'owner', type: 'string' } }] }, { kind: 'and', children: [{ kind: 'value', value: (user?.organizationRole ?? null) !== null, type: 'boolean' }, { kind: 'eq', left: { kind: 'value', value: user?.organizationRole, type: 'string' }, right: { kind: 'value', value: 'admin', type: 'string' } }] }] }] }] }, { kind: 'not', children: [{ kind: 'value', value: user === null, type: 'boolean' }] }, { kind: 'not', children: [{ kind: 'and', children: [{ kind: 'value', value: (user?.organizationId ?? null) !== null, type: 'boolean' }, { kind: 'ne', left: { kind: 'value', value: user?.organizationId, type: 'string' }, right: { kind: 'variable', name: 'organizationId', type: 'string' } }] }] }] };
}

function $check_EventCalendar_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user == null)) { return false; }

    if ((user?.organizationId != input?.organizationId)) { return false; }

    if (((user?.userId == input?.createdById) || ((user?.organizationId == input?.organizationId) && ((user?.organizationRole == 'owner') || (user?.organizationRole == 'admin'))))) { return true; }

    return false;
}

function EventCalendar$organizationId_update(context: QueryContext, db: CrudContract): any {
    if (false) { return { AND: [] }; } return { OR: [] };
}

function $check_EventCalendar$organizationId_update(input: any, context: QueryContext): any {
    if (false) { return true; }

    return false;
}
export default policy
