/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { type EnhancementContext, type EnhancementOptions, type ZodSchemas, type AuthUser } from '@zenstackhq/runtime';
import { createEnhancement } from '@zenstackhq/runtime/enhancements/edge';
import modelMeta from './model-meta';
import policy from './policy';
const zodSchemas = undefined;

import { Prisma as _Prisma, PrismaClient as _PrismaClient } from '../prisma/client/edge';
import type { InternalArgs, DynamicClientExtensionThis } from '../prisma/client/runtime/library';
import type * as _P from './logical-prisma-client';
import type { Prisma, PrismaClient } from './logical-prisma-client';
export type { PrismaClient };


export namespace auth {
    type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };
    export type Auth = WithRequired<Partial<_P.Auth>, 'userId'> & Record<string, unknown>;
}


import type { PolicyCrudKind } from '@zenstackhq/runtime';

export interface ModelCheckers {
    user: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; name?: string; email?: string; emailVerified?: boolean; image?: string; username?: string; displayUsername?: string; banned?: boolean; banReason?: string; changePassword?: boolean } }): Promise<boolean>
    },
    asset: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string } }): Promise<boolean>
    },
    session: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; token?: string; ipAddress?: string; userAgent?: string; userId?: string; impersonatedBy?: string; activeOrganizationId?: string } }): Promise<boolean>
    },
    account: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; accountId?: string; providerId?: string; userId?: string; accessToken?: string; refreshToken?: string; idToken?: string; scope?: string; password?: string } }): Promise<boolean>
    },
    verification: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; identifier?: string; value?: string } }): Promise<boolean>
    },
    organization: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; name?: string; slug?: string; logo?: string; metadata?: string } }): Promise<boolean>
    },
    member: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; organizationId?: string; userId?: string; role?: string } }): Promise<boolean>
    },
    invitation: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; organizationId?: string; email?: string; role?: string; status?: string; inviterId?: string } }): Promise<boolean>
    },
    cid: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; code?: string; description?: string } }): Promise<boolean>
    },
    appointmentCid: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; appointmentId?: string; cidId?: string } }): Promise<boolean>
    },
    appointment: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; motive?: string; subjective?: string; objective?: string; evaluation?: string; plan?: string; sickNoteDays?: number; followUpId?: string; patientId?: string } }): Promise<boolean>
    },
    patient: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; name?: string; cpf?: string; cellphone?: string; email?: string; responsible?: string; nationality?: string; state?: string; city?: string; zipcode?: string; neighborhood?: string; street?: string; number?: string; complement?: string; occupation?: string; sexualOrientation?: string; password?: string; userId?: string } }): Promise<boolean>
    },
    vaccinations: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; vaccinationsValuesId?: string } }): Promise<boolean>
    },
    vaccinationsValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    allergies: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; allergiesValuesId?: string; appointmentId?: string } }): Promise<boolean>
    },
    allergiesValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    medications: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; medicationsValuesId?: string; appointmentId?: string } }): Promise<boolean>
    },
    medicationsValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    examResults: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; examResultsValuesId?: string; result?: string } }): Promise<boolean>
    },
    examResultsValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    comorbidities: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; comorbiditiesValuesId?: string; appointmentId?: string } }): Promise<boolean>
    },
    comorbiditiesValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    surgeries: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; surgeriesValuesId?: string } }): Promise<boolean>
    },
    surgeriesValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    healthPlans: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; patientId?: string; healthPlansValuesId?: string } }): Promise<boolean>
    },
    healthPlansValues: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; value?: string } }): Promise<boolean>
    },
    defaultObjectiveInformation: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; text?: string } }): Promise<boolean>
    },
    eventCalendar: {
        check(args: { operation: PolicyCrudKind, where?: { id?: string; type?: string; createdById?: string; updatedById?: string; deletedById?: string; deleted?: boolean; organizationId?: string; title?: string; description?: string; allDay?: boolean; rrule?: string; appointmentId?: string } }): Promise<boolean>
    }
}



// overload for plain PrismaClient
export function enhance<ExtArgs extends Record<string, any> & InternalArgs>(
    prisma: _PrismaClient<any, any, ExtArgs>,
    context?: EnhancementContext<auth.Auth>, options?: EnhancementOptions): PrismaClient & ModelCheckers;

// overload for extended PrismaClient
export function enhance<ExtArgs extends Record<string, any> & InternalArgs>(
    prisma: DynamicClientExtensionThis<_Prisma.TypeMap<ExtArgs>, _Prisma.TypeMapCb, ExtArgs>,
    context?: EnhancementContext<auth.Auth>, options?: EnhancementOptions): DynamicClientExtensionThis<Prisma.TypeMap<ExtArgs>, Prisma.TypeMapCb, ExtArgs> & ModelCheckers;

export function enhance(prisma: any, context?: EnhancementContext<auth.Auth>, options?: EnhancementOptions): any {
    return createEnhancement(prisma, {
        modelMeta,
        policy,
        zodSchemas: zodSchemas as unknown as (ZodSchemas | undefined),
        prismaModule: _Prisma,
        ...options
    }, context);
}

/**
 * Infers the type of PrismaClient with ZenStack's enhancements.
 * @example
 * type EnhancedPrismaClient = Enhanced<typeof prisma>;
 */
export type Enhanced<Client> =
    Client extends _PrismaClient<any, any, any> ? PrismaClient :
    Client extends DynamicClientExtensionThis<_Prisma.TypeMap<infer ExtArgs>, infer _TypeMapCb, infer ExtArgs> ? DynamicClientExtensionThis<Prisma.TypeMap<ExtArgs>, Prisma.TypeMapCb, ExtArgs> : Client;

