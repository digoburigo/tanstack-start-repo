
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  username: 'username',
  displayUsername: 'displayUsername',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  changePassword: 'changePassword'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  createdById: 'createdById',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  deletedAt: 'deletedAt',
  deletedById: 'deletedById',
  deleted: 'deleted',
  organizationId: 'organizationId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  impersonatedBy: 'impersonatedBy',
  activeOrganizationId: 'activeOrganizationId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  email: 'email',
  role: 'role',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  inviterId: 'inviterId'
};

exports.Prisma.CidScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentCidScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  cidId: 'cidId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  motive: 'motive',
  subjective: 'subjective',
  objective: 'objective',
  evaluation: 'evaluation',
  plan: 'plan',
  startDate: 'startDate',
  endDate: 'endDate',
  sickNoteDays: 'sickNoteDays',
  category: 'category',
  status: 'status',
  followUpId: 'followUpId',
  patientId: 'patientId'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cpf: 'cpf',
  cellphone: 'cellphone',
  email: 'email',
  sex: 'sex',
  responsible: 'responsible',
  nationality: 'nationality',
  race: 'race',
  state: 'state',
  city: 'city',
  zipcode: 'zipcode',
  neighborhood: 'neighborhood',
  street: 'street',
  number: 'number',
  complement: 'complement',
  occupation: 'occupation',
  sexualOrientation: 'sexualOrientation',
  civilStatus: 'civilStatus',
  bloodType: 'bloodType',
  genderIdentity: 'genderIdentity',
  password: 'password',
  userId: 'userId'
};

exports.Prisma.VaccinationsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  vaccinationsValuesId: 'vaccinationsValuesId'
};

exports.Prisma.VaccinationsValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.AllergiesScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  allergiesValuesId: 'allergiesValuesId',
  appointmentId: 'appointmentId'
};

exports.Prisma.AllergiesValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.MedicationsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  medicationsValuesId: 'medicationsValuesId',
  appointmentId: 'appointmentId'
};

exports.Prisma.MedicationsValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.ExamResultsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  examResultsValuesId: 'examResultsValuesId',
  result: 'result',
  date: 'date'
};

exports.Prisma.ExamResultsValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.ComorbiditiesScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  comorbiditiesValuesId: 'comorbiditiesValuesId',
  appointmentId: 'appointmentId'
};

exports.Prisma.ComorbiditiesValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.SurgeriesScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  surgeriesValuesId: 'surgeriesValuesId'
};

exports.Prisma.SurgeriesValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.HealthPlansScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  healthPlansValuesId: 'healthPlansValuesId'
};

exports.Prisma.HealthPlansValuesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.DefaultObjectiveInformationScalarFieldEnum = {
  id: 'id',
  text: 'text'
};

exports.Prisma.EventCalendarScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  start: 'start',
  end: 'end',
  allDay: 'allDay',
  eventType: 'eventType',
  rrule: 'rrule',
  appointmentId: 'appointmentId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  user: 'user'
};

exports.AppointmentCategory = exports.$Enums.AppointmentCategory = {
  NORMAL: 'NORMAL',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  ONGOING: 'ONGOING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  RESCHEDULED: 'RESCHEDULED',
  COMPLETED: 'COMPLETED',
  NO_SHOW: 'NO_SHOW'
};

exports.Sex = exports.$Enums.Sex = {
  male: 'male',
  female: 'female'
};

exports.Race = exports.$Enums.Race = {
  black: 'black',
  brown: 'brown',
  white: 'white',
  yellow: 'yellow',
  indigenous: 'indigenous'
};

exports.CivilStatus = exports.$Enums.CivilStatus = {
  single: 'single',
  married: 'married',
  separated: 'separated',
  divorced: 'divorced',
  widowed: 'widowed'
};

exports.BloodType = exports.$Enums.BloodType = {
  a_positive: 'a_positive',
  a_negative: 'a_negative',
  b_positive: 'b_positive',
  b_negative: 'b_negative',
  ab_positive: 'ab_positive',
  ab_negative: 'ab_negative',
  o_positive: 'o_positive',
  o_negative: 'o_negative'
};

exports.GenderIdentity = exports.$Enums.GenderIdentity = {
  cisgender: 'cisgender',
  transgender: 'transgender',
  non_binary: 'non_binary'
};

exports.EventCalendarType = exports.$Enums.EventCalendarType = {
  APPOINTMENT: 'APPOINTMENT',
  APPOINTMENT_FOLLOW_UP: 'APPOINTMENT_FOLLOW_UP',
  CONSULTATION: 'CONSULTATION',
  SURGERY: 'SURGERY',
  EXAM: 'EXAM',
  MEETING: 'MEETING',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Asset: 'Asset',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Organization: 'Organization',
  Member: 'Member',
  Invitation: 'Invitation',
  Cid: 'Cid',
  AppointmentCid: 'AppointmentCid',
  Appointment: 'Appointment',
  Patient: 'Patient',
  Vaccinations: 'Vaccinations',
  VaccinationsValues: 'VaccinationsValues',
  Allergies: 'Allergies',
  AllergiesValues: 'AllergiesValues',
  Medications: 'Medications',
  MedicationsValues: 'MedicationsValues',
  ExamResults: 'ExamResults',
  ExamResultsValues: 'ExamResultsValues',
  Comorbidities: 'Comorbidities',
  ComorbiditiesValues: 'ComorbiditiesValues',
  Surgeries: 'Surgeries',
  SurgeriesValues: 'SurgeriesValues',
  HealthPlans: 'HealthPlans',
  HealthPlansValues: 'HealthPlansValues',
  DefaultObjectiveInformation: 'DefaultObjectiveInformation',
  EventCalendar: 'EventCalendar'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
